[
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002);\nTechnique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002);\nTechnique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.\n\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.",
    "context": "",
    "output": "The provided description is related to MITRE technique Establish Accounts: Email Accounts (T1585.002);\nTechnique Establish Accounts: Email Accounts (T1585.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Establishing email accounts may also allow adversaries to abuse free services \u2013 such as trial periods \u2013 to Acquire Infrastructure for follow-on purposes.\n\nAdversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.",
      "answer": "The provided description is related to MITRE technique Establish Accounts: Email Accounts (T1585.002);\nTechnique Establish Accounts: Email Accounts (T1585.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the Net utility and <code>id</code> and <code>groups</code> on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate local accounts.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Discovery: Local Account (T1087.001);\nTechnique Account Discovery: Local Account (T1087.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the Net utility and <code>id</code> and <code>groups</code> on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate local accounts.",
      "answer": "The provided description is related to MITRE technique Account Discovery: Local Account (T1087.001);\nTechnique Account Discovery: Local Account (T1087.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
      "answer": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003);\nTechnique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003);\nTechnique Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol (T1048.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in Drive-by Compromise. In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as Application Access Token. Prior to Drive-by Compromise, adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).\n\nAdversaries may upload or inject malicious web content, such as JavaScript, into websites. This may be done in a number of ways, including:\n\n* Inserting malicious scripts into web pages or other user controllable web content such as forum posts\n* Modifying script files served to websites from publicly writeable cloud storage buckets\n* Crafting malicious web advertisements and purchasing ad space on a website through legitimate ad providers (i.e., Malvertising)\n\nIn addition to staging content to exploit a user's web browser, adversaries may also stage scripting content to profile the user's browser (as in Gather Victim Host Information) to ensure it is vulnerable prior to attempting exploitation.\n\nWebsites compromised by an adversary and used to stage a drive-by may be ones visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is referred to a strategic web compromise or watering hole attack.\n\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Drive-by Compromise.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Stage Capabilities: Drive-by Target (T1608.004);\nTechnique Stage Capabilities: Drive-by Target (T1608.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in Drive-by Compromise. In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as Application Access Token. Prior to Drive-by Compromise, adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).\n\nAdversaries may upload or inject malicious web content, such as JavaScript, into websites. This may be done in a number of ways, including:\n\n* Inserting malicious scripts into web pages or other user controllable web content such as forum posts\n* Modifying script files served to websites from publicly writeable cloud storage buckets\n* Crafting malicious web advertisements and purchasing ad space on a website through legitimate ad providers (i.e., Malvertising)\n\nIn addition to staging content to exploit a user's web browser, adversaries may also stage scripting content to profile the user's browser (as in Gather Victim Host Information) to ensure it is vulnerable prior to attempting exploitation.\n\nWebsites compromised by an adversary and used to stage a drive-by may be ones visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is referred to a strategic web compromise or watering hole attack.\n\nAdversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Drive-by Compromise.",
      "answer": "The provided description is related to MITRE technique Stage Capabilities: Drive-by Target (T1608.004);\nTechnique Stage Capabilities: Drive-by Target (T1608.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
      "answer": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
    "context": "",
    "output": "The provided description is related to MITRE technique Fallback Channels (T1008);\nTechnique Fallback Channels (T1008) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
      "answer": "The provided description is related to MITRE technique Fallback Channels (T1008);\nTechnique Fallback Channels (T1008) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nOne common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive. Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining. Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.\n\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.\n\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate Network Denial of Service campaigns and/or to seed malicious torrents. Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.",
    "context": "",
    "output": "The provided description is related to MITRE technique Resource Hijacking (T1496);\nTechnique Resource Hijacking (T1496) is applicable to platforms: IaaS,  Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \n\nOne common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive. Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining. Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.\n\nAdditionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it\u2019s not competing for resources.\n\nAdversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate Network Denial of Service campaigns and/or to seed malicious torrents. Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services.",
      "answer": "The provided description is related to MITRE technique Resource Hijacking (T1496);\nTechnique Resource Hijacking (T1496) is applicable to platforms: IaaS,  Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software\\\\Wow6432Node\\\\\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon. \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: \n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Winlogon Helper DLL (T1547.004);\nTechnique Boot or Logon Autostart Execution: Winlogon Helper DLL (T1547.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software\\\\Wow6432Node\\\\\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon. \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: \n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Winlogon Helper DLL (T1547.004);\nTechnique Boot or Logon Autostart Execution: Winlogon Helper DLL (T1547.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
      "answer": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "answer": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.\n\nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.\n\nFor example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.\n\nAdversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Cloud Service Discovery (T1526);\nTechnique Cloud Service Discovery (T1526) is applicable to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.\n\nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.\n\nFor example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.\n\nAdversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs.",
      "answer": "The provided description is related to MITRE technique Cloud Service Discovery (T1526);\nTechnique Cloud Service Discovery (T1526) is applicable to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Office 365,  SaaS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
    "context": "",
    "output": "The provided description is related to MITRE technique Access Token Manipulation (T1134);\nTechnique Access Token Manipulation (T1134) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
      "answer": "The provided description is related to MITRE technique Access Token Manipulation (T1134);\nTechnique Access Token Manipulation (T1134) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Binary Padding (T1027.001);\nTechnique Obfuscated Files or Information: Binary Padding (T1027.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Binary Padding (T1027.001);\nTechnique Obfuscated Files or Information: Binary Padding (T1027.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "answer": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Peripheral Device Discovery (T1120);\nTechnique Peripheral Device Discovery (T1120) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
      "answer": "The provided description is related to MITRE technique Peripheral Device Discovery (T1120);\nTechnique Peripheral Device Discovery (T1120) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
      "answer": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL).  \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>). \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection: Dynamic-link Library Injection (T1055.001);\nTechnique Process Injection: Dynamic-link Library Injection (T1055.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL).  \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>). \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "answer": "The provided description is related to MITRE technique Process Injection: Dynamic-link Library Injection (T1055.001);\nTechnique Process Injection: Dynamic-link Library Injection (T1055.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Credentials from Password Stores: Credentials from Web Browsers (T1555.003);\nTechnique Credentials from Password Stores: Credentials from Web Browsers (T1555.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
      "answer": "The provided description is related to MITRE technique Credentials from Password Stores: Credentials from Web Browsers (T1555.003);\nTechnique Credentials from Password Stores: Credentials from Web Browsers (T1555.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Rootkit (T1014);\nTechnique Rootkit (T1014) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.",
      "answer": "The provided description is related to MITRE technique Rootkit (T1014);\nTechnique Rootkit (T1014) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures. Credentials can then be used to perform Lateral Movement and access restricted information.\n\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
    "context": "",
    "output": "The provided description is related to MITRE technique OS Credential Dumping (T1003);\nTechnique OS Credential Dumping (T1003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures. Credentials can then be used to perform Lateral Movement and access restricted information.\n\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
      "answer": "The provided description is related to MITRE technique OS Credential Dumping (T1003);\nTechnique OS Credential Dumping (T1003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
    "context": "",
    "output": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "answer": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Service Discovery (T1007);\nTechnique System Service Discovery (T1007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique System Service Discovery (T1007);\nTechnique System Service Discovery (T1007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.",
    "context": "",
    "output": "The provided description is related to MITRE technique Rootkit (T1014);\nTechnique Rootkit (T1014) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.",
      "answer": "The provided description is related to MITRE technique Rootkit (T1014);\nTechnique Rootkit (T1014) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: SSH (T1021.004);\nTechnique Remote Services: SSH (T1021.004) is applicable to platforms: macOS, Linux;\nTherefore, the given procedure description is related to platforms: macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.",
      "answer": "The provided description is related to MITRE technique Remote Services: SSH (T1021.004);\nTechnique Remote Services: SSH (T1021.004) is applicable to platforms: macOS, Linux;\nTherefore, the given procedure description is related to platforms: macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. \n\nThis same behavior could be executed using service tickets captured from network traffic.\n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.",
    "context": "",
    "output": "The provided description is related to MITRE technique Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003);\nTechnique Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. \n\nThis same behavior could be executed using service tickets captured from network traffic.\n\nCracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.",
      "answer": "The provided description is related to MITRE technique Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003);\nTechnique Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.\n\nOnce malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Office Application Startup: Outlook Home Page (T1137.004);\nTechnique Office Application Startup: Outlook Home Page (T1137.004) is applicable to platforms: Windows, Office 365;\nTherefore, the given procedure description is related to platforms: Windows, Office 365.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.\n\nOnce malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.",
      "answer": "The provided description is related to MITRE technique Office Application Startup: Outlook Home Page (T1137.004);\nTechnique Office Application Startup: Outlook Home Page (T1137.004) is applicable to platforms: Windows, Office 365;\nTherefore, the given procedure description is related to platforms: Windows, Office 365.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may register for web services\u00a0that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.",
    "context": "",
    "output": "The provided description is related to MITRE technique Acquire Infrastructure: Web Services (T1583.006);\nTechnique Acquire Infrastructure: Web Services (T1583.006) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may register for web services\u00a0that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.",
      "answer": "The provided description is related to MITRE technique Acquire Infrastructure: Web Services (T1583.006);\nTechnique Acquire Infrastructure: Web Services (T1583.006) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
    "context": "",
    "output": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
      "answer": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.\n\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged (T1074);\nTechnique Data Staged (T1074) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.\n\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
      "answer": "The provided description is related to MITRE technique Data Staged (T1074);\nTechnique Data Staged (T1074) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
      "answer": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
      "answer": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>).\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Shutdown/Reboot (T1529);\nTechnique System Shutdown/Reboot (T1529) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>).\n\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.",
      "answer": "The provided description is related to MITRE technique System Shutdown/Reboot (T1529);\nTechnique System Shutdown/Reboot (T1529) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>\n\nSimilar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.?",
    "context": "",
    "output": "The provided description is related to MITRE technique OS Credential Dumping: LSASS Memory (T1003.001);\nTechnique OS Credential Dumping: LSASS Memory (T1003.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>\n\nSimilar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.",
      "answer": "The provided description is related to MITRE technique OS Credential Dumping: LSASS Memory (T1003.001);\nTechnique OS Credential Dumping: LSASS Memory (T1003.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Develop Capabilities: Malware (T1587.001);\nTechnique Develop Capabilities: Malware (T1587.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services.",
      "answer": "The provided description is related to MITRE technique Develop Capabilities: Malware (T1587.001);\nTechnique Develop Capabilities: Malware (T1587.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter (T1059);\nTechnique Command and Scripting Interpreter (T1059) is applicable to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter (T1059);\nTechnique Command and Scripting Interpreter (T1059) is applicable to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Google Workspace,  IaaS,  Linux,  Network,  Office 365,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002);\nTechnique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\n\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002);\nTechnique Exfiltration Over Web Service: Exfiltration to Cloud Storage (T1567.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Unsecured Credentials: Private Keys (T1552.004);\nTechnique Unsecured Credentials: Private Keys (T1552.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nWhen a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device\u2019s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device.\n\nOn network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. \n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.",
      "answer": "The provided description is related to MITRE technique Unsecured Credentials: Private Keys (T1552.004);\nTechnique Unsecured Credentials: Private Keys (T1552.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Encoding: Standard Encoding (T1132.001);\nTechnique Data Encoding: Standard Encoding (T1132.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",
      "answer": "The provided description is related to MITRE technique Data Encoding: Standard Encoding (T1132.001);\nTechnique Data Encoding: Standard Encoding (T1132.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.?",
    "context": "",
    "output": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
      "answer": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Video Capture (T1125);\nTechnique Video Capture (T1125) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.",
      "answer": "The provided description is related to MITRE technique Video Capture (T1125);\nTechnique Video Capture (T1125) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
      "answer": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data: Archive via Utility (T1560.001);\nTechnique Archive Collected Data: Archive via Utility (T1560.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data: Archive via Utility (T1560.001);\nTechnique Archive Collected Data: Archive via Utility (T1560.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or for initial access (ex: Supply Chain Compromise or External Remote Services).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Gather Victim Host Information: Software (T1592.002);\nTechnique Gather Victim Host Information: Software (T1592.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or for initial access (ex: Supply Chain Compromise or External Remote Services).",
      "answer": "The provided description is related to MITRE technique Gather Victim Host Information: Software (T1592.002);\nTechnique Gather Victim Host Information: Software (T1592.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
      "answer": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
    "context": "",
    "output": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
      "answer": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file\u2019s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file\u2019s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file\u2019s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`. \n\nAdversaries may edit the header\u2019s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., Ingress Tool Transfer) and stored (e.g., Upload Malware) so that adversaries may move their malware without triggering detections. \n\nCommon non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.\n\nPolygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade File Type (T1036.008);\nTechnique Masquerading: Masquerade File Type (T1036.008) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file\u2019s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file\u2019s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file\u2019s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`. \n\nAdversaries may edit the header\u2019s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., Ingress Tool Transfer) and stored (e.g., Upload Malware) so that adversaries may move their malware without triggering detections. \n\nCommon non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.\n\nPolygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade File Type (T1036.008);\nTechnique Masquerading: Masquerade File Type (T1036.008) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\CurrentControlSet or ControlSet001\\Control\\Print\\Environments\\\\Windows architecture: e.g., Windows x64\\Print Processors\\\\user defined\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Print Processors (T1547.012);\nTechnique Boot or Logon Autostart Execution: Print Processors (T1547.012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\CurrentControlSet or ControlSet001\\Control\\Print\\Environments\\\\Windows architecture: e.g., Windows x64\\Print Processors\\\\user defined\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Print Processors (T1547.012);\nTechnique Boot or Logon Autostart Execution: Print Processors (T1547.012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
    "context": "",
    "output": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
      "answer": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Peripheral Device Discovery (T1120);\nTechnique Peripheral Device Discovery (T1120) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
      "answer": "The provided description is related to MITRE technique Peripheral Device Discovery (T1120);\nTechnique Peripheral Device Discovery (T1120) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Use Alternate Authentication Material: Pass the Hash (T1550.002);\nTechnique Use Alternate Authentication Material: Pass the Hash (T1550.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.",
      "answer": "The provided description is related to MITRE technique Use Alternate Authentication Material: Pass the Hash (T1550.002);\nTechnique Use Alternate Authentication Material: Pass the Hash (T1550.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Mail Protocols (T1071.003);\nTechnique Application Layer Protocol: Mail Protocols (T1071.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Mail Protocols (T1071.003);\nTechnique Application Layer Protocol: Mail Protocols (T1071.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.\n\nReg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.",
    "context": "",
    "output": "The provided description is related to MITRE technique OS Credential Dumping: LSA Secrets (T1003.004);\nTechnique OS Credential Dumping: LSA Secrets (T1003.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.\n\nReg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.",
      "answer": "The provided description is related to MITRE technique OS Credential Dumping: LSA Secrets (T1003.004);\nTechnique OS Credential Dumping: LSA Secrets (T1003.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\n\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
      "answer": "The provided description is related to MITRE technique Non-Standard Port (T1571);\nTechnique Non-Standard Port (T1571) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.",
    "context": "",
    "output": "The provided description is related to MITRE technique Brute Force (T1110);\nTechnique Brute Force (T1110) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.",
      "answer": "The provided description is related to MITRE technique Brute Force (T1110);\nTechnique Brute Force (T1110) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Domain Trust Discovery (T1482);\nTechnique Domain Trust Discovery (T1482) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.",
      "answer": "The provided description is related to MITRE technique Domain Trust Discovery (T1482);\nTechnique Domain Trust Discovery (T1482) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft.\n\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs. Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Msiexec (T1218.007);\nTechnique System Binary Proxy Execution: Msiexec (T1218.007) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft.\n\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs. Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Msiexec (T1218.007);\nTechnique System Binary Proxy Execution: Msiexec (T1218.007) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy (T1090);\nTechnique Proxy (T1090) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
      "answer": "The provided description is related to MITRE technique Proxy (T1090);\nTechnique Proxy (T1090) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
      "answer": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery: Internet Connection Discovery (T1016.001);\nTechnique System Network Configuration Discovery: Internet Connection Discovery (T1016.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery: Internet Connection Discovery (T1016.001);\nTechnique System Network Configuration Discovery: Internet Connection Discovery (T1016.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.\n\nAdversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters.\n\nFor example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: HTML Smuggling (T1027.006);\nTechnique Obfuscated Files or Information: HTML Smuggling (T1027.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.\n\nAdversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters.\n\nFor example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: HTML Smuggling (T1027.006);\nTechnique Obfuscated Files or Information: HTML Smuggling (T1027.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information, Phishing, or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nA variety of methods exist for compromising email accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials. Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Adversaries may target compromising well-known email accounts or domains from which malicious spam or Phishing emails may evade reputation-based email filtering rules.\n\nAdversaries can use a compromised email account to hijack existing email threads with targets of interest.",
    "context": "",
    "output": "The provided description is related to MITRE technique Compromise Accounts: Email Accounts (T1586.002);\nTechnique Compromise Accounts: Email Accounts (T1586.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information, Phishing, or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains).\n\nA variety of methods exist for compromising email accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials. Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Adversaries may target compromising well-known email accounts or domains from which malicious spam or Phishing emails may evade reputation-based email filtering rules.\n\nAdversaries can use a compromised email account to hijack existing email threads with targets of interest.",
      "answer": "The provided description is related to MITRE technique Compromise Accounts: Email Accounts (T1586.002);\nTechnique Compromise Accounts: Email Accounts (T1586.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host\u2019s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.",
      "answer": "The provided description is related to MITRE technique Network Service Discovery (T1046);\nTechnique Network Service Discovery (T1046) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.?",
    "context": "",
    "output": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
      "answer": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment. If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Steal Application Access Token (T1528);\nTechnique Steal Application Access Token (T1528) is applicable to platforms: Containers,  Google Workspace,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  Office 365,  SaaS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment. If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.",
      "answer": "The provided description is related to MITRE technique Steal Application Access Token (T1528);\nTechnique Steal Application Access Token (T1528) is applicable to platforms: Containers,  Google Workspace,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  Office 365,  SaaS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal (T1070);\nTechnique Indicator Removal (T1070) is applicable to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
      "answer": "The provided description is related to MITRE technique Indicator Removal (T1070);\nTechnique Indicator Removal (T1070) is applicable to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: SSH (T1021.004);\nTechnique Remote Services: SSH (T1021.004) is applicable to platforms: macOS, Linux;\nTherefore, the given procedure description is related to platforms: macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\n\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.",
      "answer": "The provided description is related to MITRE technique Remote Services: SSH (T1021.004);\nTechnique Remote Services: SSH (T1021.004) is applicable to platforms: macOS, Linux;\nTherefore, the given procedure description is related to platforms: macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.",
    "context": "",
    "output": "The provided description is related to MITRE technique Dynamic Resolution (T1568);\nTechnique Dynamic Resolution (T1568) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\n\nAdversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.",
      "answer": "The provided description is related to MITRE technique Dynamic Resolution (T1568);\nTechnique Dynamic Resolution (T1568) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003);\nTechnique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data).\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003);\nTechnique Virtualization/Sandbox Evasion: Time Based Evasion (T1497.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Binary Padding (T1027.001);\nTechnique Obfuscated Files or Information: Binary Padding (T1027.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Binary Padding (T1027.001);\nTechnique Obfuscated Files or Information: Binary Padding (T1027.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data (T1560);\nTechnique Archive Collected Data (T1560) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data (T1560);\nTechnique Archive Collected Data (T1560) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code> and <code>runas</code>.\n\nCreating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process.\n\nWhile this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Access Token Manipulation: Create Process with Token (T1134.002);\nTechnique Access Token Manipulation: Create Process with Token (T1134.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as <code>CreateProcessWithTokenW</code> and <code>runas</code>.\n\nCreating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process.\n\nWhile this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.",
      "answer": "The provided description is related to MITRE technique Access Token Manipulation: Create Process with Token (T1134.002);\nTechnique Access Token Manipulation: Create Process with Token (T1134.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Service Discovery (T1007);\nTechnique System Service Discovery (T1007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique System Service Discovery (T1007);\nTechnique System Service Discovery (T1007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection (T1055);\nTechnique Process Injection (T1055) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "answer": "The provided description is related to MITRE technique Process Injection (T1055);\nTechnique Process Injection (T1055) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
    "context": "",
    "output": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "answer": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.\n\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access.\n Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Credentials from Password Stores: Password Managers (T1555.005);\nTechnique Credentials from Password Stores: Password Managers (T1555.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.\n\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access.\n Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.",
      "answer": "The provided description is related to MITRE technique Credentials from Password Stores: Password Managers (T1555.005);\nTechnique Credentials from Password Stores: Password Managers (T1555.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
    "context": "",
    "output": "The provided description is related to MITRE technique Valid Accounts (T1078);\nTechnique Valid Accounts (T1078) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
      "answer": "The provided description is related to MITRE technique Valid Accounts (T1078);\nTechnique Valid Accounts (T1078) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\n\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Window Discovery (T1010);\nTechnique Application Window Discovery (T1010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\n\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.",
      "answer": "The provided description is related to MITRE technique Application Window Discovery (T1010);\nTechnique Application Window Discovery (T1010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Indicator Removal from Tools (T1027.005);\nTechnique Obfuscated Files or Information: Indicator Removal from Tools (T1027.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Indicator Removal from Tools (T1027.005);\nTechnique Obfuscated Files or Information: Indicator Removal from Tools (T1027.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "answer": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
      "answer": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Launch Daemon (T1543.004);\nTechnique Create or Modify System Process: Launch Daemon (T1543.004) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in <code>/System/Library/LaunchDaemons/</code> and <code>/Library/LaunchDaemons/</code>. Required Launch Daemons parameters include a <code>Label</code> to identify the task, <code>Program</code> to provide a path to the executable, and <code>RunAtLoad</code> to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.\n\nAdversaries may install a Launch Daemon configured to execute at startup by using the <code>RunAtLoad</code> parameter set to <code>true</code> and the <code>Program</code> parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.\n\nAdditionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as <code>usr/local/bin</code> to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Launch Daemon (T1543.004);\nTechnique Create or Modify System Process: Launch Daemon (T1543.004) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.\n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password.\n\nOn Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at `/var/lib/sss/db/cache.domain.ldb` for SSSD or `/var/opt/quest/vas/authcache/vas_auth.vdb` for Quest. Adversaries can use utilities, such as `tdbdump`, on these database files to dump the cached hashes and use Password Cracking to obtain the plaintext password. \n\nWith SYSTEM or sudo access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.\n\nNote: Cached credentials for Windows Vista are derived using PBKDF2.?",
    "context": "",
    "output": "The provided description is related to MITRE technique OS Credential Dumping: Cached Domain Credentials (T1003.005);\nTechnique OS Credential Dumping: Cached Domain Credentials (T1003.005) is applicable to platforms: Windows, Linux;\nTherefore, the given procedure description is related to platforms: Windows, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.\n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password.\n\nOn Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at `/var/lib/sss/db/cache.domain.ldb` for SSSD or `/var/opt/quest/vas/authcache/vas_auth.vdb` for Quest. Adversaries can use utilities, such as `tdbdump`, on these database files to dump the cached hashes and use Password Cracking to obtain the plaintext password. \n\nWith SYSTEM or sudo access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials.\n\nNote: Cached credentials for Windows Vista are derived using PBKDF2.",
      "answer": "The provided description is related to MITRE technique OS Credential Dumping: Cached Domain Credentials (T1003.005);\nTechnique OS Credential Dumping: Cached Domain Credentials (T1003.005) is applicable to platforms: Windows, Linux;\nTherefore, the given procedure description is related to platforms: Windows, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad Cloud Administration Command on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD. Such services may also utilize Web Protocols to communicate back to adversary owned infrastructure.\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Software Deployment Tools (T1072);\nTechnique Software Deployment Tools (T1072) is applicable to platforms: Network,  SaaS,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  SaaS,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad Cloud Administration Command on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD. Such services may also utilize Web Protocols to communicate back to adversary owned infrastructure.\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
      "answer": "The provided description is related to MITRE technique Software Deployment Tools (T1072);\nTechnique Software Deployment Tools (T1072) is applicable to platforms: Network,  SaaS,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  SaaS,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. \n\nAPC injection is commonly performed by attaching malicious code to the APC Queue  of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). \n\nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  AtomBombing  is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection: Asynchronous Procedure Call (T1055.004);\nTechnique Process Injection: Asynchronous Procedure Call (T1055.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. \n\nAPC injection is commonly performed by attaching malicious code to the APC Queue  of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). \n\nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  AtomBombing  is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.\n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "answer": "The provided description is related to MITRE technique Process Injection: Asynchronous Procedure Call (T1055.004);\nTechnique Process Injection: Asynchronous Procedure Call (T1055.004) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
      "answer": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol (T1071);\nTechnique Application Layer Protocol (T1071) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol (T1071);\nTechnique Application Layer Protocol (T1071) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Peripheral Device Discovery (T1120);\nTechnique Peripheral Device Discovery (T1120) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
      "answer": "The provided description is related to MITRE technique Peripheral Device Discovery (T1120);\nTechnique Peripheral Device Discovery (T1120) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment. If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.",
    "context": "",
    "output": "The provided description is related to MITRE technique Steal Application Access Token (T1528);\nTechnique Steal Application Access Token (T1528) is applicable to platforms: Containers,  Google Workspace,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  Office 365,  SaaS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).  Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nFor example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container\u2019s token and thereby gain access to Kubernetes API commands.  Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment. If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges.\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token.\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.",
      "answer": "The provided description is related to MITRE technique Steal Application Access Token (T1528);\nTechnique Steal Application Access Token (T1528) is applicable to platforms: Containers,  Google Workspace,  Office 365,  SaaS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  Office 365,  SaaS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the Net utility and <code>id</code> and <code>groups</code> on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate local accounts.",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Discovery: Local Account (T1087.001);\nTechnique Account Discovery: Local Account (T1087.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the Net utility and <code>id</code> and <code>groups</code> on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file. On macOS the <code>dscl . list /Users</code> command can be used to enumerate local accounts.",
      "answer": "The provided description is related to MITRE technique Account Discovery: Local Account (T1087.001);\nTechnique Account Discovery: Local Account (T1087.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data (T1560);\nTechnique Archive Collected Data (T1560) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data (T1560);\nTechnique Archive Collected Data (T1560) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.",
      "answer": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. \n\nSome adversaries may also use Automated Collection on removable media.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Removable Media (T1025);\nTechnique Data from Removable Media (T1025) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. \n\nSome adversaries may also use Automated Collection on removable media.",
      "answer": "The provided description is related to MITRE technique Data from Removable Media (T1025);\nTechnique Data from Removable Media (T1025) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.\n\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file. MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Trusted Developer Utilities Proxy Execution: MSBuild (T1127.001);\nTechnique Trusted Developer Utilities Proxy Execution: MSBuild (T1127.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.\n\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file. MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.",
      "answer": "The provided description is related to MITRE technique Trusted Developer Utilities Proxy Execution: MSBuild (T1127.001);\nTechnique Trusted Developer Utilities Proxy Execution: MSBuild (T1127.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\CurrentControlSet or ControlSet001\\Control\\Print\\Environments\\\\Windows architecture: e.g., Windows x64\\Print Processors\\\\user defined\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Print Processors (T1547.012);\nTechnique Boot or Logon Autostart Execution: Print Processors (T1547.012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, `spoolsv.exe`, during boot.\n\nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <code>AddPrintProcessor</code> API call with an account that has <code>SeLoadDriverPrivilege</code> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <code>HKLM\\SYSTEM\\\\CurrentControlSet or ControlSet001\\Control\\Print\\Environments\\\\Windows architecture: e.g., Windows x64\\Print Processors\\\\user defined\\Driver</code> Registry key that points to the DLL.\n\nFor the malicious print processor to be correctly installed, the payload must be located in the dedicated system print-processor directory, that can be found with the <code>GetPrintProcessorDirectory</code> API call, or referenced via a relative path from this directory. After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.\n\nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Print Processors (T1547.012);\nTechnique Boot or Logon Autostart Execution: Print Processors (T1547.012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`. The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform Token Impersonation/Theft when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally Create Process with Token using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. Token Impersonation/Theft is also distinct from Make and Impersonate Token in that it refers to duplicating an existing token, rather than creating a new one.",
    "context": "",
    "output": "The provided description is related to MITRE technique Access Token Manipulation: Token Impersonation/Theft (T1134.001);\nTechnique Access Token Manipulation: Token Impersonation/Theft (T1134.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`. The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\n\nAn adversary may perform Token Impersonation/Theft when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.\n\nWhen an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally Create Process with Token using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. Token Impersonation/Theft is also distinct from Make and Impersonate Token in that it refers to duplicating an existing token, rather than creating a new one.",
      "answer": "The provided description is related to MITRE technique Access Token Manipulation: Token Impersonation/Theft (T1134.001);\nTechnique Access Token Manipulation: Token Impersonation/Theft (T1134.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.\n\nAdversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Compromise Infrastructure: Server (T1584.004);\nTechnique Compromise Infrastructure: Server (T1584.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.\n\nAdversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations.",
      "answer": "The provided description is related to MITRE technique Compromise Infrastructure: Server (T1584.004);\nTechnique Compromise Infrastructure: Server (T1584.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Command Obfuscation (T1027.010);\nTechnique Obfuscated Files or Information: Command Obfuscation (T1027.010) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy: External Proxy (T1090.002);\nTechnique Proxy: External Proxy (T1090.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
      "answer": "The provided description is related to MITRE technique Proxy: External Proxy (T1090.002);\nTechnique Proxy: External Proxy (T1090.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.",
    "context": "",
    "output": "The provided description is related to MITRE technique Lateral Tool Transfer (T1570);\nTechnique Lateral Tool Transfer (T1570) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.",
      "answer": "The provided description is related to MITRE technique Lateral Tool Transfer (T1570);\nTechnique Lateral Tool Transfer (T1570) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Unix Shell (T1059.004);\nTechnique Command and Scripting Interpreter: Unix Shell (T1059.004) is applicable to platforms: Network,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Unix Shell (T1059.004);\nTechnique Command and Scripting Interpreter: Unix Shell (T1059.004) is applicable to platforms: Network,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. \n\nProtocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. \n\nAdversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Protocol Tunneling (T1572);\nTechnique Protocol Tunneling (T1572) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. \n\nProtocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. \n\nAdversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.",
      "answer": "The provided description is related to MITRE technique Protocol Tunneling (T1572);\nTechnique Protocol Tunneling (T1572) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Obfuscation: Steganography (T1001.002);\nTechnique Data Obfuscation: Steganography (T1001.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
      "answer": "The provided description is related to MITRE technique Data Obfuscation: Steganography (T1001.002);\nTechnique Data Obfuscation: Steganography (T1001.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal (T1070);\nTechnique Indicator Removal (T1070) is applicable to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\n\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
      "answer": "The provided description is related to MITRE technique Indicator Removal (T1070);\nTechnique Indicator Removal (T1070) is applicable to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Google Workspace,  Linux,  Network,  Office 365,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. \n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "context": "",
    "output": "The provided description is related to MITRE technique Brute Force: Password Spraying (T1110.003);\nTechnique Brute Force: Password Spraying (T1110.003) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. \n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
      "answer": "The provided description is related to MITRE technique Brute Force: Password Spraying (T1110.003);\nTechnique Brute Force: Password Spraying (T1110.003) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \n\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \n\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process (T1543);\nTechnique Create or Modify System Process (T1543) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \n\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \n\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process (T1543);\nTechnique Create or Modify System Process (T1543) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy: Internal Proxy (T1090.001);\nTechnique Proxy: Internal Proxy (T1090.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\n\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
      "answer": "The provided description is related to MITRE technique Proxy: Internal Proxy (T1090.001);\nTechnique Proxy: Internal Proxy (T1090.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data: Archive via Custom Method (T1560.003);\nTechnique Archive Collected Data: Archive via Custom Method (T1560.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data: Archive via Custom Method (T1560.003);\nTechnique Archive Collected Data: Archive via Custom Method (T1560.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
      "answer": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Connections Discovery (T1049);\nTechnique System Network Connections Discovery (T1049) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).",
      "answer": "The provided description is related to MITRE technique System Network Connections Discovery (T1049);\nTechnique System Network Connections Discovery (T1049) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
      "answer": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
      "answer": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Obfuscation: Junk Data (T1001.001);\nTechnique Data Obfuscation: Junk Data (T1001.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.",
      "answer": "The provided description is related to MITRE technique Data Obfuscation: Junk Data (T1001.001);\nTechnique Data Obfuscation: Junk Data (T1001.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.",
    "context": "",
    "output": "The provided description is related to MITRE technique Brute Force (T1110);\nTechnique Brute Force (T1110) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\n\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.",
      "answer": "The provided description is related to MITRE technique Brute Force (T1110);\nTechnique Brute Force (T1110) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Use Alternate Authentication Material: Pass the Hash (T1550.002);\nTechnique Use Alternate Authentication Material: Pass the Hash (T1550.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.",
      "answer": "The provided description is related to MITRE technique Use Alternate Authentication Material: Pass the Hash (T1550.002);\nTechnique Use Alternate Authentication Material: Pass the Hash (T1550.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may rent Virtual Private Servers (VPSs)\u00a0that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.\n\nAcquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Acquire Infrastructure: Virtual Private Server (T1583.003);\nTechnique Acquire Infrastructure: Virtual Private Server (T1583.003) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may rent Virtual Private Servers (VPSs)\u00a0that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.\n\nAcquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.",
      "answer": "The provided description is related to MITRE technique Acquire Infrastructure: Virtual Private Server (T1583.003);\nTechnique Acquire Infrastructure: Virtual Private Server (T1583.003) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data (T1560);\nTechnique Archive Collected Data (T1560) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data (T1560);\nTechnique Archive Collected Data (T1560) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* gsecdump\n* Mimikatz\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.",
    "context": "",
    "output": "The provided description is related to MITRE technique OS Credential Dumping: Security Account Manager (T1003.002);\nTechnique OS Credential Dumping: Security Account Manager (T1003.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* gsecdump\n* Mimikatz\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.",
      "answer": "The provided description is related to MITRE technique OS Credential Dumping: Security Account Manager (T1003.002);\nTechnique OS Credential Dumping: Security Account Manager (T1003.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution (T1547);\nTechnique Boot or Logon Autostart Execution (T1547) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution (T1547);\nTechnique Boot or Logon Autostart Execution (T1547) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection (T1055);\nTechnique Process Injection (T1055) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "answer": "The provided description is related to MITRE technique Process Injection (T1055);\nTechnique Process Injection (T1055) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.\n\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\n\nSpecific checks will vary based on the target and/or adversary, but may involve Native API function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \u201cswallow\u201d or handle the potential error).\n\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as <code>OutputDebugStringW()</code>.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Debugger Evasion (T1622);\nTechnique Debugger Evasion (T1622) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.\n\nDebugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.\n\nSpecific checks will vary based on the target and/or adversary, but may involve Native API function calls such as <code>IsDebuggerPresent()</code> and <code> NtQueryInformationProcess()</code>, or manually checking the <code>BeingDebugged</code> flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \u201cswallow\u201d or handle the potential error).\n\nAdversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as <code>OutputDebugStringW()</code>.",
      "answer": "The provided description is related to MITRE technique Debugger Evasion (T1622);\nTechnique Debugger Evasion (T1622) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad Cloud Administration Command on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD. Such services may also utilize Web Protocols to communicate back to adversary owned infrastructure.\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
    "context": "",
    "output": "The provided description is related to MITRE technique Software Deployment Tools (T1072);\nTechnique Software Deployment Tools (T1072) is applicable to platforms: Network,  SaaS,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  SaaS,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may gain access to and use centralized software suites installed within an enterprise to execute commands and move laterally through the network. Configuration management and software deployment applications may be used in an enterprise network or cloud environment for routine administration purposes. These systems may also be integrated into CI/CD pipelines. Examples of such solutions include: SCCM, HBSS, Altiris, AWS Systems Manager, Microsoft Intune, Azure Arc, and GCP Deployment Manager.  \n\nAccess to network-wide or enterprise-wide endpoint management software may enable an adversary to achieve remote code execution on all connected systems. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nSaaS-based configuration management services may allow for broad Cloud Administration Command on cloud-hosted instances, as well as the execution of arbitrary commands on on-premises endpoints. For example, Microsoft Configuration Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to Azure AD. Such services may also utilize Web Protocols to communicate back to adversary owned infrastructure.\n\nNetwork infrastructure devices may also have configuration management tools that can be similarly abused by adversaries.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to access specific functionality.",
      "answer": "The provided description is related to MITRE technique Software Deployment Tools (T1072);\nTechnique Software Deployment Tools (T1072) is applicable to platforms: Network,  SaaS,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  SaaS,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE). Remote COM execution is facilitated by Remote Services such as  Distributed Component Object Model (DCOM).\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and Visual Basic. Specific COM objects also exist to directly perform functions beyond code execution, such as creating a Scheduled Task/Job, fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.",
    "context": "",
    "output": "The provided description is related to MITRE technique Inter-Process Communication: Component Object Model (T1559.001);\nTechnique Inter-Process Communication: Component Object Model (T1559.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE). Remote COM execution is facilitated by Remote Services such as  Distributed Component Object Model (DCOM).\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and Visual Basic. Specific COM objects also exist to directly perform functions beyond code execution, such as creating a Scheduled Task/Job, fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.",
      "answer": "The provided description is related to MITRE technique Inter-Process Communication: Component Object Model (T1559.001);\nTechnique Inter-Process Communication: Component Object Model (T1559.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",
      "answer": "The provided description is related to MITRE technique Hijack Execution Flow: DLL Side-Loading (T1574.002);\nTechnique Hijack Execution Flow: DLL Side-Loading (T1574.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.?",
    "context": "",
    "output": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.\n\nAccess to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.\n\nAccess may also be gained through an exposed service that doesn\u2019t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",
      "answer": "The provided description is related to MITRE technique External Remote Services (T1133);\nTechnique External Remote Services (T1133) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel (T1573);\nTechnique Encrypted Channel (T1573) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel (T1573);\nTechnique Encrypted Channel (T1573) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\n\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network. In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. \n\nSimilarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies. \n\nDevices registered in Azure AD may be able to conduct Internal Spearphishing campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client. Additionally, an adversary may be able to perform a Service Exhaustion Flood on an Azure AD tenant by registering a large number of devices.",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Manipulation: Device Registration (T1098.005);\nTechnique Account Manipulation: Device Registration (T1098.005) is applicable to platforms: SaaS,  Windows, Azure AD;\nTherefore, the given procedure description is related to platforms: SaaS,  Windows, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.\n\nMFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user\u2019s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network. In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. \n\nSimilarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies. \n\nDevices registered in Azure AD may be able to conduct Internal Spearphishing campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client. Additionally, an adversary may be able to perform a Service Exhaustion Flood on an Azure AD tenant by registering a large number of devices.",
      "answer": "The provided description is related to MITRE technique Account Manipulation: Device Registration (T1098.005);\nTechnique Account Manipulation: Device Registration (T1098.005) is applicable to platforms: SaaS,  Windows, Azure AD;\nTherefore, the given procedure description is related to platforms: SaaS,  Windows, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
      "answer": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
      "answer": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>\n\nSimilar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.",
    "context": "",
    "output": "The provided description is related to MITRE technique OS Credential Dumping: LSASS Memory (T1003.001);\nTechnique OS Credential Dumping: LSASS Memory (T1003.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>\n\nSimilar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.",
      "answer": "The provided description is related to MITRE technique OS Credential Dumping: LSASS Memory (T1003.001);\nTechnique OS Credential Dumping: LSASS Memory (T1003.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
      "answer": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
      "answer": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* gsecdump\n* Mimikatz\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.",
    "context": "",
    "output": "The provided description is related to MITRE technique OS Credential Dumping: Security Account Manager (T1003.002);\nTechnique OS Credential Dumping: Security Account Manager (T1003.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* gsecdump\n* Mimikatz\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n\n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.",
      "answer": "The provided description is related to MITRE technique OS Credential Dumping: Security Account Manager (T1003.002);\nTechnique OS Credential Dumping: Security Account Manager (T1003.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Obfuscation (T1001);\nTechnique Data Obfuscation (T1001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",
      "answer": "The provided description is related to MITRE technique Data Obfuscation (T1001);\nTechnique Data Obfuscation (T1001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell. For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: Clear Windows Event Logs (T1070.001);\nTechnique Indicator Removal: Clear Windows Event Logs (T1070.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\n\nWith administrator privileges, the event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell. For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging.  Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.\n\nAdversaries may also attempt to clear logs by directly deleting the stored log files within `C:\\Windows\\System32\\winevt\\logs\\`.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: Clear Windows Event Logs (T1070.001);\nTechnique Indicator Removal: Clear Windows Event Logs (T1070.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data: Archive via Utility (T1560.001);\nTechnique Archive Collected Data: Archive via Utility (T1560.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data: Archive via Utility (T1560.001);\nTechnique Archive Collected Data: Archive via Utility (T1560.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\n\nAdversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.\n\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).\n\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.\n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.",
    "context": "",
    "output": "The provided description is related to MITRE technique Acquire Infrastructure: Domains (T1583.001);\nTechnique Acquire Infrastructure: Domains (T1583.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.\n\nAdversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control. Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD). Typosquatting may be used to aid in delivery of payloads via Drive-by Compromise. Adversaries may also use internationalized domain names (IDNs) and different character sets (e.g. Cyrillic, Greek, etc.) to execute \"IDN homograph attacks,\" creating visually similar lookalike domains used to deliver malware to victim machines.\n\nDifferent URIs/URLs may also be dynamically generated to uniquely serve malicious content to victims (including one-time, single use domain names).\n\nAdversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.\n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.",
      "answer": "The provided description is related to MITRE technique Acquire Infrastructure: Domains (T1583.001);\nTechnique Acquire Infrastructure: Domains (T1583.001) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "answer": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service (T1102);\nTechnique Web Service (T1102) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "answer": "The provided description is related to MITRE technique Web Service (T1102);\nTechnique Web Service (T1102) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection: Process Hollowing (T1055.012);\nTechnique Process Injection: Process Hollowing (T1055.012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
      "answer": "The provided description is related to MITRE technique Process Injection: Process Hollowing (T1055.012);\nTechnique Process Injection: Process Hollowing (T1055.012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
    "context": "",
    "output": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
      "answer": "The provided description is related to MITRE technique Modify Registry (T1112);\nTechnique Modify Registry (T1112) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.",
      "answer": "The provided description is related to MITRE technique Native API (T1106);\nTechnique Native API (T1106) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.\n\nAdversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Trusted Relationship or Phishing).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Search Victim-Owned Websites (T1594);\nTechnique Search Victim-Owned Websites (T1594) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.\n\nAdversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Trusted Relationship or Phishing).",
      "answer": "The provided description is related to MITRE technique Search Victim-Owned Websites (T1594);\nTechnique Search Victim-Owned Websites (T1594) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: File Transfer Protocols (T1071.002);\nTechnique Application Layer Protocol: File Transfer Protocols (T1071.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: File Transfer Protocols (T1071.002);\nTechnique Application Layer Protocol: File Transfer Protocols (T1071.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.\n\nFor example, adversaries may construct or use onion routing networks \u2013 such as the publicly available Tor network \u2013 to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.\n\nIn the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e., Network Devices). By leveraging Patch System Image on routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon the Network Boundary Bridging method allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.\n\nSimilarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy: Multi-hop Proxy (T1090.003);\nTechnique Proxy: Multi-hop Proxy (T1090.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.\n\nFor example, adversaries may construct or use onion routing networks \u2013 such as the publicly available Tor network \u2013 to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.\n\nIn the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e., Network Devices). By leveraging Patch System Image on routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon the Network Boundary Bridging method allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.\n\nSimilarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.",
      "answer": "The provided description is related to MITRE technique Proxy: Multi-hop Proxy (T1090.003);\nTechnique Proxy: Multi-hop Proxy (T1090.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
      "answer": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
    "context": "",
    "output": "The provided description is related to MITRE technique Fallback Channels (T1008);\nTechnique Fallback Channels (T1008) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
      "answer": "The provided description is related to MITRE technique Fallback Channels (T1008);\nTechnique Fallback Channels (T1008) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide Adversary-in-the-Middle capability for intercepting information transmitted over secure TLS/SSL communications.\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain.",
    "context": "",
    "output": "The provided description is related to MITRE technique Subvert Trust Controls: Install Root Certificate (T1553.004);\nTechnique Subvert Trust Controls: Install Root Certificate (T1553.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide Adversary-in-the-Middle capability for intercepting information transmitted over secure TLS/SSL communications.\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain.",
      "answer": "The provided description is related to MITRE technique Subvert Trust Controls: Install Root Certificate (T1553.004);\nTechnique Subvert Trust Controls: Install Root Certificate (T1553.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. \n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Event Triggered Execution: Application Shimming (T1546.011);\nTechnique Event Triggered Execution: Application Shimming (T1546.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. \n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  Shims can also be abused to establish persistence by continuously being invoked by affected programs.",
      "answer": "The provided description is related to MITRE technique Event Triggered Execution: Application Shimming (T1546.011);\nTechnique Event Triggered Execution: Application Shimming (T1546.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy (T1090);\nTechnique Proxy (T1090) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
      "answer": "The provided description is related to MITRE technique Proxy (T1090);\nTechnique Proxy (T1090) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Software Packing (T1027.002);\nTechnique Obfuscated Files or Information: Software Packing (T1027.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious Link (T1204.001);\nTechnique User Execution: Malicious Link (T1204.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault.  \n\nSecrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables.  \n\nIf an adversary is able to gain sufficient privileges in a cloud environment \u2013 for example, by obtaining the credentials of high-privileged Cloud Accounts or compromising a service that has permission to retrieve secrets \u2013 they may be able to request secrets from the secrets manager. This can be accomplished via commands such as `get-secret-value` in AWS, `gcloud secrets describe` in GCP, and `az key vault secret show` in Azure.\n\n**Note:** this technique is distinct from Cloud Instance Metadata API in that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.",
    "context": "",
    "output": "The provided description is related to MITRE technique Credentials from Password Stores: Cloud Secrets Management Stores (T1555.006);\nTechnique Credentials from Password Stores: Cloud Secrets Management Stores (T1555.006) is applicable to platforms: IaaS;\nTherefore, the given procedure description is related to platforms: IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault.  \n\nSecrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables.  \n\nIf an adversary is able to gain sufficient privileges in a cloud environment \u2013 for example, by obtaining the credentials of high-privileged Cloud Accounts or compromising a service that has permission to retrieve secrets \u2013 they may be able to request secrets from the secrets manager. This can be accomplished via commands such as `get-secret-value` in AWS, `gcloud secrets describe` in GCP, and `az key vault secret show` in Azure.\n\n**Note:** this technique is distinct from Cloud Instance Metadata API in that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.",
      "answer": "The provided description is related to MITRE technique Credentials from Password Stores: Cloud Secrets Management Stores (T1555.006);\nTechnique Credentials from Password Stores: Cloud Secrets Management Stores (T1555.006) is applicable to platforms: IaaS;\nTherefore, the given procedure description is related to platforms: IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Archive Collected Data: Archive via Utility (T1560.001);\nTechnique Archive Collected Data: Archive via Utility (T1560.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. Remote Data Staging). <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",
      "answer": "The provided description is related to MITRE technique Archive Collected Data: Archive via Utility (T1560.001);\nTechnique Archive Collected Data: Archive via Utility (T1560.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.?",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Audio Capture (T1123);\nTechnique Audio Capture (T1123) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
      "answer": "The provided description is related to MITRE technique Audio Capture (T1123);\nTechnique Audio Capture (T1123) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery (T1016);\nTechnique System Network Configuration Discovery (T1016) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.?",
    "context": "",
    "output": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. \n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
      "answer": "The provided description is related to MITRE technique User Execution: Malicious File (T1204.002);\nTechnique User Execution: Malicious File (T1204.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
    "context": "",
    "output": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
      "answer": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
    "context": "",
    "output": "The provided description is related to MITRE technique Valid Accounts (T1078);\nTechnique Valid Accounts (T1078) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
      "answer": "The provided description is related to MITRE technique Valid Accounts (T1078);\nTechnique Valid Accounts (T1078) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Traffic Signaling (T1205);\nTechnique Traffic Signaling (T1205) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.",
      "answer": "The provided description is related to MITRE technique Traffic Signaling (T1205);\nTechnique Traffic Signaling (T1205) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: \n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>",
    "context": "",
    "output": "The provided description is related to MITRE technique Unsecured Credentials: Credentials in Registry (T1552.002);\nTechnique Unsecured Credentials: Credentials in Registry (T1552.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: \n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>",
      "answer": "The provided description is related to MITRE technique Unsecured Credentials: Credentials in Registry (T1552.002);\nTechnique Unsecured Credentials: Credentials in Registry (T1552.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol (T1071);\nTechnique Application Layer Protocol (T1071) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol (T1071);\nTechnique Application Layer Protocol (T1071) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Software Discovery (T1518);\nTechnique Software Discovery (T1518) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",
      "answer": "The provided description is related to MITRE technique Software Discovery (T1518);\nTechnique Software Discovery (T1518) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.\n\nAdversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Compromise Infrastructure: Server (T1584.004);\nTechnique Compromise Infrastructure: Server (T1584.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.\n\nAdversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations.",
      "answer": "The provided description is related to MITRE technique Compromise Infrastructure: Server (T1584.004);\nTechnique Compromise Infrastructure: Server (T1584.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. \n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.  \n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Regsvr32 (T1218.010);\nTechnique System Binary Proxy Execution: Regsvr32 (T1218.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. \n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments.  \n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Regsvr32 (T1218.010);\nTechnique System Binary Proxy Execution: Regsvr32 (T1218.010) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Asymmetric Cryptography (T1573.002);\nTechnique Encrypted Channel: Asymmetric Cryptography (T1573.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Asymmetric Cryptography (T1573.002);\nTechnique Encrypted Channel: Asymmetric Cryptography (T1573.002) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.\n\nUnlike Code Signing, this activity will not result in a valid signature.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Invalid Code Signature (T1036.001);\nTechnique Masquerading: Invalid Code Signature (T1036.001) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.\n\nUnlike Code Signing, this activity will not result in a valid signature.",
      "answer": "The provided description is related to MITRE technique Masquerading: Invalid Code Signature (T1036.001);\nTechnique Masquerading: Invalid Code Signature (T1036.001) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may register for web services\u00a0that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Acquire Infrastructure: Web Services (T1583.006);\nTechnique Acquire Infrastructure: Web Services (T1583.006) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may register for web services\u00a0that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.",
      "answer": "The provided description is related to MITRE technique Acquire Infrastructure: Web Services (T1583.006);\nTechnique Acquire Infrastructure: Web Services (T1583.006) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "answer": "The provided description is related to MITRE technique Non-Application Layer Protocol (T1095);\nTechnique Non-Application Layer Protocol (T1095) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "answer": "The provided description is related to MITRE technique Software Discovery: Security Software Discovery (T1518.001);\nTechnique Software Discovery: Security Software Discovery (T1518.001) is applicable to platforms: Linux,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)    to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket or change an account's password as noted in Account Manipulation.\n\nDCSync functionality has been included in the \"lsadump\" module in Mimikatz. Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.",
    "context": "",
    "output": "The provided description is related to MITRE technique OS Credential Dumping: DCSync (T1003.006);\nTechnique OS Credential Dumping: DCSync (T1003.006) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)    to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket or change an account's password as noted in Account Manipulation.\n\nDCSync functionality has been included in the \"lsadump\" module in Mimikatz. Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.",
      "answer": "The provided description is related to MITRE technique OS Credential Dumping: DCSync (T1003.006);\nTechnique OS Credential Dumping: DCSync (T1003.006) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009);\nTechnique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.\n\nShortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009);\nTechnique Boot or Logon Autostart Execution: Shortcut Modification (T1547.009) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
    "context": "",
    "output": "The provided description is related to MITRE technique Audio Capture (T1123);\nTechnique Audio Capture (T1123) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
      "answer": "The provided description is related to MITRE technique Audio Capture (T1123);\nTechnique Audio Capture (T1123) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Discovery: Domain Account (T1087.002);\nTechnique Account Discovery: Domain Account (T1087.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.",
      "answer": "The provided description is related to MITRE technique Account Discovery: Domain Account (T1087.002);\nTechnique Account Discovery: Domain Account (T1087.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
      "answer": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.\n\nDGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.\n\nAdversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.",
    "context": "",
    "output": "The provided description is related to MITRE technique Dynamic Resolution: Domain Generation Algorithms (T1568.002);\nTechnique Dynamic Resolution: Domain Generation Algorithms (T1568.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.\n\nDGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.\n\nAdversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.",
      "answer": "The provided description is related to MITRE technique Dynamic Resolution: Domain Generation Algorithms (T1568.002);\nTechnique Dynamic Resolution: Domain Generation Algorithms (T1568.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Service Discovery (T1007);\nTechnique System Service Discovery (T1007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique System Service Discovery (T1007);\nTechnique System Service Discovery (T1007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
      "answer": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
      "answer": "The provided description is related to MITRE technique System Services: Service Execution (T1569.002);\nTechnique System Services: Service Execution (T1569.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Visual Basic (T1059.005);\nTechnique Command and Scripting Interpreter: Visual Basic (T1059.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: DNS (T1071.004);\nTechnique Application Layer Protocol: DNS (T1071.004) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use.\n\nThis type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding/compression schemes such as Base64.\n\nThe entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection.\n\nFor example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). \n\nAdversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013);\nTechnique Obfuscated Files or Information: Encrypted/Encoded File (T1027.013) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "answer": "The provided description is related to MITRE technique Subvert Trust Controls: Code Signing (T1553.002);\nTechnique Subvert Trust Controls: Code Signing (T1553.002) is applicable to platforms: macOS, Windows;\nTherefore, the given procedure description is related to platforms: macOS, Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exploitation of Remote Services (T1210);\nTechnique Exploitation of Remote Services (T1210) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
      "answer": "The provided description is related to MITRE technique Exploitation of Remote Services (T1210);\nTechnique Exploitation of Remote Services (T1210) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets. Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion or Exploitation for Client Execution.\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Exploit Public-Facing Application (T1190);\nTechnique Exploit Public-Facing Application (T1190) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets. Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion or Exploitation for Client Execution.\n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.",
      "answer": "The provided description is related to MITRE technique Exploit Public-Facing Application (T1190);\nTechnique Exploit Public-Facing Application (T1190) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Credentials from Password Stores: Credentials from Web Browsers (T1555.003);\nTechnique Credentials from Password Stores: Credentials from Web Browsers (T1555.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key.\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
      "answer": "The provided description is related to MITRE technique Credentials from Password Stores: Credentials from Web Browsers (T1555.003);\nTechnique Credentials from Password Stores: Credentials from Web Browsers (T1555.003) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n\nAdversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",
      "answer": "The provided description is related to MITRE technique Data Staged: Local Data Staging (T1074.001);\nTechnique Data Staged: Local Data Staging (T1074.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
    "context": "",
    "output": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.",
      "answer": "The provided description is related to MITRE technique System Owner/User Discovery (T1033);\nTechnique System Owner/User Discovery (T1033) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Attachment (T1566.001);\nTechnique Phishing: Spearphishing Attachment (T1566.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
    "context": "",
    "output": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place.\n\nAdversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`.\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. \n\nAdversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL .\n\nSimilarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.",
      "answer": "The provided description is related to MITRE technique Phishing: Spearphishing Link (T1566.002);\nTechnique Phishing: Spearphishing Link (T1566.002) is applicable to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace;\nTherefore, the given procedure description is related to platforms: Linux,  Office 365,  SaaS,  Windows,  macOS, Google Workspace.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information: Indicator Removal from Tools (T1027.005);\nTechnique Obfuscated Files or Information: Indicator Removal from Tools (T1027.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information: Indicator Removal from Tools (T1027.005);\nTechnique Obfuscated Files or Information: Indicator Removal from Tools (T1027.005) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
    "context": "",
    "output": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
      "answer": "The provided description is related to MITRE technique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002);\nTechnique Abuse Elevation Control Mechanism: Bypass User Account Control (T1548.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.",
    "context": "",
    "output": "The provided description is related to MITRE technique Domain Trust Discovery (T1482);\nTechnique Domain Trust Discovery (T1482) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.",
      "answer": "The provided description is related to MITRE technique Domain Trust Discovery (T1482);\nTechnique Domain Trust Discovery (T1482) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
      "answer": "The provided description is related to MITRE technique Masquerading: Masquerade Task or Service (T1036.004);\nTechnique Masquerading: Masquerade Task or Service (T1036.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
      "answer": "The provided description is related to MITRE technique Remote Services: SMB/Windows Admin Shares (T1021.002);\nTechnique Remote Services: SMB/Windows Admin Shares (T1021.002) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.",
      "answer": "The provided description is related to MITRE technique Masquerading (T1036);\nTechnique Masquerading (T1036) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
      "answer": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
      "answer": "The provided description is related to MITRE technique Deobfuscate/Decode Files or Information (T1140);\nTechnique Deobfuscate/Decode Files or Information (T1140) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.  Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the Launchctl command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Launch Agent (T1543.001);\nTechnique Create or Modify System Process: Launch Agent (T1543.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.  Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.\n\n Launch Agents can also be executed using the Launchctl command.\n \nAdversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Launch Agent (T1543.001);\nTechnique Create or Modify System Process: Launch Agent (T1543.001) is applicable to platforms: macOS;\nTherefore, the given procedure description is related to platforms: macOS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.\n\nFor example, adversaries may construct or use onion routing networks \u2013 such as the publicly available Tor network \u2013 to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.\n\nIn the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e., Network Devices). By leveraging Patch System Image on routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon the Network Boundary Bridging method allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.\n\nSimilarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Proxy: Multi-hop Proxy (T1090.003);\nTechnique Proxy: Multi-hop Proxy (T1090.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may chain together multiple proxies to disguise the source of malicious traffic. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.\n\nFor example, adversaries may construct or use onion routing networks \u2013 such as the publicly available Tor network \u2013 to transport encrypted C2 traffic through a compromised population, allowing communication with any device within the network.\n\nIn the case of network infrastructure, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain (i.e., Network Devices). By leveraging Patch System Image on routers, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This method is dependent upon the Network Boundary Bridging method allowing the adversaries to cross the protected network boundary of the Internet perimeter and into the organization\u2019s Wide-Area Network (WAN).  Protocols such as ICMP may be used as a transport.\n\nSimilarly, adversaries may abuse peer-to-peer (P2P) and blockchain-oriented infrastructure to implement routing between a decentralized network of peers.",
      "answer": "The provided description is related to MITRE technique Proxy: Multi-hop Proxy (T1090.003);\nTechnique Proxy: Multi-hop Proxy (T1090.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Discovery: Domain Account (T1087.002);\nTechnique Account Discovery: Domain Account (T1087.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.",
      "answer": "The provided description is related to MITRE technique Account Discovery: Domain Account (T1087.002);\nTechnique Account Discovery: Domain Account (T1087.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Mail Protocols (T1071.003);\nTechnique Application Layer Protocol: Mail Protocols (T1071.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Mail Protocols (T1071.003);\nTechnique Application Layer Protocol: Mail Protocols (T1071.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Injection: Thread Execution Hijacking (T1055.003);\nTechnique Process Injection: Thread Execution Hijacking (T1055.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
      "answer": "The provided description is related to MITRE technique Process Injection: Thread Execution Hijacking (T1055.003);\nTechnique Process Injection: Thread Execution Hijacking (T1055.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.\n\nAdversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).",
    "context": "",
    "output": "The provided description is related to MITRE technique Gather Victim Identity Information: Employee Names (T1589.003);\nTechnique Gather Victim Identity Information: Employee Names (T1589.003) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.\n\nAdversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).",
      "answer": "The provided description is related to MITRE technique Gather Victim Identity Information: Employee Names (T1589.003);\nTechnique Gather Victim Identity Information: Employee Names (T1589.003) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: File Deletion (T1070.004);\nTechnique Indicator Removal: File Deletion (T1070.004) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Automated Collection (T1119);\nTechnique Automated Collection (T1119) is applicable to platforms: Linux,  SaaS,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  SaaS,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
      "answer": "The provided description is related to MITRE technique Automated Collection (T1119);\nTechnique Automated Collection (T1119) is applicable to platforms: Linux,  SaaS,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  SaaS,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
      "answer": "The provided description is related to MITRE technique Screen Capture (T1113);\nTechnique Screen Capture (T1113) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
      "answer": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Automated Collection (T1119);\nTechnique Automated Collection (T1119) is applicable to platforms: Linux,  SaaS,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  SaaS,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \n\nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \n\nThis functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",
      "answer": "The provided description is related to MITRE technique Automated Collection (T1119);\nTechnique Automated Collection (T1119) is applicable to platforms: Linux,  SaaS,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  SaaS,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a Windows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Access Software (T1219);\nTechnique Remote Access Software (T1219) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary-controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a Windows Service). Remote access modules/features may also exist as part of otherwise existing software (e.g., Google Chrome\u2019s Remote Desktop).",
      "answer": "The provided description is related to MITRE technique Remote Access Software (T1219);\nTechnique Remote Access Software (T1219) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Mail Protocols (T1071.003);\nTechnique Application Layer Protocol: Mail Protocols (T1071.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Mail Protocols (T1071.003);\nTechnique Application Layer Protocol: Mail Protocols (T1071.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject\"</code>  This behavior has been seen used by malware such as Poweliks. \n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",
      "answer": "The provided description is related to MITRE technique System Binary Proxy Execution: Rundll32 (T1218.011);\nTechnique System Binary Proxy Execution: Rundll32 (T1218.011) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>\n\nSimilar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.",
    "context": "",
    "output": "The provided description is related to MITRE technique OS Credential Dumping: LSASS Memory (T1003.001);\nTechnique OS Credential Dumping: LSASS Memory (T1003.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as `comsvcs.dll` can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>\n\nSimilar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`).\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.",
      "answer": "The provided description is related to MITRE technique OS Credential Dumping: LSASS Memory (T1003.001);\nTechnique OS Credential Dumping: LSASS Memory (T1003.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.",
    "context": "",
    "output": "The provided description is related to MITRE technique Lateral Tool Transfer (T1570);\nTechnique Lateral Tool Transfer (T1570) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.",
      "answer": "The provided description is related to MITRE technique Lateral Tool Transfer (T1570);\nTechnique Lateral Tool Transfer (T1570) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Browser Session Hijacking (T1185);\nTechnique Browser Session Hijacking (T1185) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.\n\nA specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.\n\nAnother example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.",
      "answer": "The provided description is related to MITRE technique Browser Session Hijacking (T1185);\nTechnique Browser Session Hijacking (T1185) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Network Configuration Discovery: Internet Connection Discovery (T1016.001);\nTechnique System Network Configuration Discovery: Internet Connection Discovery (T1016.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites.\n\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
      "answer": "The provided description is related to MITRE technique System Network Configuration Discovery: Internet Connection Discovery (T1016.001);\nTechnique System Network Configuration Discovery: Internet Connection Discovery (T1016.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.",
      "answer": "The provided description is related to MITRE technique Scheduled Task/Job: Scheduled Task (T1053.005);\nTechnique Scheduled Task/Job: Scheduled Task (T1053.005) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
    "context": "",
    "output": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.\n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",
      "answer": "The provided description is related to MITRE technique Obtain Capabilities: Tool (T1588.002);\nTechnique Obtain Capabilities: Tool (T1588.002) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
    "context": "",
    "output": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",
      "answer": "The provided description is related to MITRE technique Impair Defenses: Disable or Modify Tools (T1562.001);\nTechnique Impair Defenses: Disable or Modify Tools (T1562.001) is applicable to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: IaaS,  Linux,  Network,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).",
    "context": "",
    "output": "The provided description is related to MITRE technique Gather Victim Host Information: Client Configurations (T1592.004);\nTechnique Gather Victim Host Information: Client Configurations (T1592.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.\n\nAdversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).",
      "answer": "The provided description is related to MITRE technique Gather Victim Host Information: Client Configurations (T1592.004);\nTechnique Gather Victim Host Information: Client Configurations (T1592.004) is applicable to platforms: PRE;\nTherefore, the given procedure description is related to platforms: PRE.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
    "context": "",
    "output": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
      "answer": "The provided description is related to MITRE technique Obfuscated Files or Information (T1027);\nTechnique Obfuscated Files or Information (T1027) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Web Service: Bidirectional Communication (T1102.002);\nTechnique Web Service: Bidirectional Communication (T1102.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "answer": "The provided description is related to MITRE technique Web Service: Bidirectional Communication (T1102.002);\nTechnique Web Service: Bidirectional Communication (T1102.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
    "context": "",
    "output": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\n\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.",
      "answer": "The provided description is related to MITRE technique Create or Modify System Process: Windows Service (T1543.003);\nTechnique Create or Modify System Process: Windows Service (T1543.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Account Discovery: Domain Account (T1087.002);\nTechnique Account Discovery: Domain Account (T1087.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups. PowerShell cmdlets including <code>Get-ADUser</code> and <code>Get-ADGroupMember</code> may enumerate members of Active Directory groups.",
      "answer": "The provided description is related to MITRE technique Account Discovery: Domain Account (T1087.002);\nTechnique Account Discovery: Domain Account (T1087.002) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
    "context": "",
    "output": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`.\n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
      "answer": "The provided description is related to MITRE technique Virtualization/Sandbox Evasion: System Checks (T1497.001);\nTechnique Virtualization/Sandbox Evasion: System Checks (T1497.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. \n\nOn network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.",
      "answer": "The provided description is related to MITRE technique Process Discovery (T1057);\nTechnique Process Discovery (T1057) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",
      "answer": "The provided description is related to MITRE technique Data from Local System (T1005);\nTechnique Data from Local System (T1005) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
      "answer": "The provided description is related to MITRE technique Indicator Removal: Timestomp (T1070.006);\nTechnique Indicator Removal: Timestomp (T1070.006) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: Windows Command Shell (T1059.003);\nTechnique Command and Scripting Interpreter: Windows Command Shell (T1059.003) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "answer": "The provided description is related to MITRE technique Encrypted Channel: Symmetric Cryptography (T1573.001);\nTechnique Encrypted Channel: Symmetric Cryptography (T1573.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
      "answer": "The provided description is related to MITRE technique Network Share Discovery (T1135);\nTechnique Network Share Discovery (T1135) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Brute Force: Password Guessing (T1110.001);\nTechnique Brute Force: Password Guessing (T1110.001) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
      "answer": "The provided description is related to MITRE technique Brute Force: Password Guessing (T1110.001);\nTechnique Brute Force: Password Guessing (T1110.001) is applicable to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD;\nTherefore, the given procedure description is related to platforms: Containers,  Google Workspace,  IaaS,  Linux,  Network,  Office 365,  SaaS,  Windows,  macOS, Azure AD.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \n\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Initialization Scripts (T1037);\nTechnique Boot or Logon Initialization Scripts (T1037) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \n\nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Initialization Scripts (T1037);\nTechnique Boot or Logon Initialization Scripts (T1037) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.\n\nOnce malicious rules have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Office Application Startup: Outlook Rules (T1137.005);\nTechnique Office Application Startup: Outlook Rules (T1137.005) is applicable to platforms: Windows, Office 365;\nTherefore, the given procedure description is related to platforms: Windows, Office 365.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.\n\nOnce malicious rules have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.",
      "answer": "The provided description is related to MITRE technique Office Application Startup: Outlook Rules (T1137.005);\nTechnique Office Application Startup: Outlook Rules (T1137.005) is applicable to platforms: Windows, Office 365;\nTherefore, the given procedure description is related to platforms: Windows, Office 365.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.",
    "context": "",
    "output": "The provided description is related to MITRE technique Rootkit (T1014);\nTechnique Rootkit (T1014) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.",
      "answer": "The provided description is related to MITRE technique Rootkit (T1014);\nTechnique Rootkit (T1014) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
    "context": "",
    "output": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
      "answer": "The provided description is related to MITRE technique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001);\nTechnique Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1547.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
    "context": "",
    "output": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).\n\nSome files and directories may require elevated or specific user permissions to access.",
      "answer": "The provided description is related to MITRE technique File and Directory Discovery (T1083);\nTechnique File and Directory Discovery (T1083) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
    "context": "",
    "output": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\n\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, `wmic.exe` can be abused by an adversary to delete shadow copies with the command `wmic.exe Shadowcopy Delete` (i.e., Inhibit System Recovery).\n\n**Note:** `wmic.exe` is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like `wbemtool.exe`, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.",
      "answer": "The provided description is related to MITRE technique Windows Management Instrumentation (T1047);\nTechnique Windows Management Instrumentation (T1047) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.?",
    "context": "",
    "output": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. <code>show version</code>). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
      "answer": "The provided description is related to MITRE technique System Information Discovery (T1082);\nTechnique System Information Discovery (T1082) is applicable to platforms: Linux,  Network,  Windows,  macOS, IaaS;\nTherefore, the given procedure description is related to platforms: Linux,  Network,  Windows,  macOS, IaaS.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to access the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",
      "answer": "The provided description is related to MITRE technique Server Software Component: Web Shell (T1505.003);\nTechnique Server Software Component: Web Shell (T1505.003) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
      "answer": "The provided description is related to MITRE technique Application Layer Protocol: Web Protocols (T1071.001);\nTechnique Application Layer Protocol: Web Protocols (T1071.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.",
    "context": "",
    "output": "The provided description is related to MITRE technique Traffic Signaling (T1205);\nTechnique Traffic Signaling (T1205) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\n\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n\nOn network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.\n\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.",
      "answer": "The provided description is related to MITRE technique Traffic Signaling (T1205);\nTechnique Traffic Signaling (T1205) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
    "context": "",
    "output": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\n\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.",
      "answer": "The provided description is related to MITRE technique Ingress Tool Transfer (T1105);\nTechnique Ingress Tool Transfer (T1105) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "answer": "The provided description is related to MITRE technique Exfiltration Over C2 Channel (T1041);\nTechnique Exfiltration Over C2 Channel (T1041) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: PowerShell (T1059.001);\nTechnique Command and Scripting Interpreter: PowerShell (T1059.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
      "answer": "The provided description is related to MITRE technique Input Capture: Keylogging (T1056.001);\nTechnique Input Capture: Keylogging (T1056.001) is applicable to platforms: Network,  Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Network,  Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
    "context": "",
    "output": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
      "answer": "The provided description is related to MITRE technique Masquerading: Match Legitimate Name or Location (T1036.005);\nTechnique Masquerading: Match Legitimate Name or Location (T1036.005) is applicable to platforms: Linux,  Windows,  macOS, Containers;\nTherefore, the given procedure description is related to platforms: Linux,  Windows,  macOS, Containers.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Command and Scripting Interpreter: JavaScript (T1059.007);\nTechnique Command and Scripting Interpreter: JavaScript (T1059.007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.",
      "answer": "The provided description is related to MITRE technique Command and Scripting Interpreter: JavaScript (T1059.007);\nTechnique Command and Scripting Interpreter: JavaScript (T1059.007) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "Which platforms are related to the following technique description: Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the Net utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.?",
    "context": "",
    "output": "The provided description is related to MITRE technique Permission Groups Discovery: Local Groups (T1069.001);\nTechnique Permission Groups Discovery: Local Groups (T1069.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "Which platforms are related to the following technique description: Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the Net utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.",
      "answer": "The provided description is related to MITRE technique Permission Groups Discovery: Local Groups (T1069.001);\nTechnique Permission Groups Discovery: Local Groups (T1069.001) is applicable to platforms: Windows,  macOS, Linux;\nTherefore, the given procedure description is related to platforms: Windows,  macOS, Linux.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
    "context": "",
    "output": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.",
      "answer": "The provided description is related to MITRE technique Remote Services: Remote Desktop Protocol (T1021.001);\nTechnique Remote Services: Remote Desktop Protocol (T1021.001) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  },
  {
    "instruction": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
    "category": "MitreFlan",
    "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform",
    "parsed_raw_data": {
      "question": "What are the platforms that are related to the following technique description: Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "The provided description is related to MITRE technique Query Registry (T1012);\nTechnique Query Registry (T1012) is applicable to platforms: Windows;\nTherefore, the given procedure description is related to platforms: Windows.",
      "category": [
        "MITREFlan"
      ],
      "instruction_type": "cot_technique_platform_mapping_CoT_procedure_platform"
    }
  }
]