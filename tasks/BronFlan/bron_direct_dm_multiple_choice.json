[
  {
    "instruction": "How can you mitigate Mark-of-the-Web Bypass (T1553.005)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mark-of-the-Web Bypass (T1553.005)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionC": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate Mark-of-the-Web Bypass (T1553.005)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nA.  Apply blinding [REF-1219] or masking techniques in strategic areas.\nB.  Use non-predictable inputs for seed generation.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Always verify the length of the string unit character.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "ddmc_optionA": "Apply blinding [REF-1219] or masking techniques in strategic areas.",
      "ddmc_optionB": "Use non-predictable inputs for seed generation.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Always verify the length of the string unit character.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nA.  Apply blinding [REF-1219] or masking techniques in strategic areas.\nB.  Use non-predictable inputs for seed generation.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Always verify the length of the string unit character.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Insufficient Session Expiration (CWE-613)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Set sessions/credentials expiration date.\nC.  Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]\nD.  With Struts, write all data from form beans with the bean's filter attribute set to true.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Insufficient Session Expiration (CWE-613)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Set sessions/credentials expiration date.",
      "ddmc_optionC": "Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]",
      "ddmc_optionD": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Set sessions/credentials expiration date.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Insufficient Session Expiration (CWE-613)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Set sessions/credentials expiration date.\nC.  Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]\nD.  With Struts, write all data from form beans with the bean's filter attribute set to true.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nD.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Unicode Encoding (CWE-176)",
      "ddmc_optionA": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
      "ddmc_optionD": "The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nD.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Relative Path Traversal (CWE-23)?\nA.  Use a hash table instead of an alist.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Relative Path Traversal (CWE-23)",
      "ddmc_optionA": "Use a hash table instead of an alist.",
      "ddmc_optionB": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
      "ddmc_optionC": "Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "prompts": [],
      "instruction": "How can you mitigate Relative Path Traversal (CWE-23)?\nA.  Use a hash table instead of an alist.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Locking (CWE-667)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Locking (CWE-667)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Locking (CWE-667)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionB": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "prompts": [],
      "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Audio Capture (T1123)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Stored Data Manipulation (T1565.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Stored Data Manipulation (T1565.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Debug Messages Revealing Unnecessary Information (CWE-1295)?\nA.  If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.\nB.  Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.\nD.  Alter the method of erasure, add protection of media, or destroy the media to protect the data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Debug Messages Revealing Unnecessary Information (CWE-1295)",
      "ddmc_optionA": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.",
      "ddmc_optionB": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.",
      "ddmc_optionC": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.",
      "ddmc_optionD": "Alter the method of erasure, add protection of media, or destroy the media to protect the data.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Debug Messages Revealing Unnecessary Information (CWE-1295)?\nA.  If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.\nB.  Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.\nD.  Alter the method of erasure, add protection of media, or destroy the media to protect the data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential API Hooking (T1056.004)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential API Hooking (T1056.004)",
      "ddmc_optionA": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "prompts": [],
      "instruction": "How can you mitigate Credential API Hooking (T1056.004)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1614 (System Location Discovery)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Employing file hash comparisons to detect known malware.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1614 (System Location Discovery)",
      "ddmc_optionA": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1614 (System Location Discovery)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Employing file hash comparisons to detect known malware.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-462 (Duplicate Key in Associative List (Alist))?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.\nC.  Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-462 (Duplicate Key in Associative List (Alist))",
      "ddmc_optionA": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionB": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.",
      "ddmc_optionC": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
      "ddmc_optionD": "Force the administrator to change the credential upon installation.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-462 (Duplicate Key in Associative List (Alist))?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.\nC.  Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Key Exchange without Entity Authentication (CWE-322)?\nA.  Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.\nB.  Ensure that proper authentication is included in the system design.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Key Exchange without Entity Authentication (CWE-322)",
      "ddmc_optionA": "Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.",
      "ddmc_optionB": "Ensure that proper authentication is included in the system design.",
      "ddmc_optionC": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.",
      "ddmc_optionD": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure that proper authentication is included in the system design.",
      "prompts": [],
      "instruction": "What is a method to mitigate Key Exchange without Entity Authentication (CWE-322)?\nA.  Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.\nB.  Ensure that proper authentication is included in the system design.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-925 (Improper Verification of Intent by Broadcast Receiver)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.\nC.  Common protection mechanisms include: Disconnecting the user after a small number of failed attempts Implementing a timeout Locking out a targeted account Requiring a computational task on the user's part.\nD.  Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-925 (Improper Verification of Intent by Broadcast Receiver)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.",
      "ddmc_optionC": "Common protection mechanisms include: Disconnecting the user after a small number of failed attempts Implementing a timeout Locking out a targeted account Requiring a computational task on the user's part.",
      "ddmc_optionD": "Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-925 (Improper Verification of Intent by Broadcast Receiver)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.\nC.  Common protection mechanisms include: Disconnecting the user after a small number of failed attempts Implementing a timeout Locking out a targeted account Requiring a computational task on the user's part.\nD.  Run the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Inducing Account Lockout (CAPEC-2)?\nA.  Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.\nB.  Implementation: Perform input validation for all remote content.\nC.  Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface\nD.  Ensure that all user-supplied input is validated before use.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Inducing Account Lockout (CAPEC-2)",
      "ddmc_optionA": "Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.",
      "ddmc_optionB": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionC": "Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface",
      "ddmc_optionD": "Ensure that all user-supplied input is validated before use.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.",
      "prompts": [],
      "instruction": "How can you mitigate Inducing Account Lockout (CAPEC-2)?\nA.  Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.\nB.  Implementation: Perform input validation for all remote content.\nC.  Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface\nD.  Ensure that all user-supplied input is validated before use.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') (CWE-96)?\nA.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Resolve all URIs to absolute or canonical representations before processing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') (CWE-96)",
      "ddmc_optionA": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Resolve all URIs to absolute or canonical representations before processing.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') (CWE-96)?\nA.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Resolve all URIs to absolute or canonical representations before processing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\nB.  Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Input Terminators (CWE-147)",
      "ddmc_optionA": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
      "ddmc_optionB": "Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\nB.  Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Obsolete Function (CWE-477)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nD.  Consider seriously the security implications of using an obsolete function. Consider using alternate functions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Obsolete Function (CWE-477)",
      "ddmc_optionA": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
      "ddmc_optionB": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_optionC": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_optionD": "Consider seriously the security implications of using an obsolete function. Consider using alternate functions.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Consider seriously the security implications of using an obsolete function. Consider using alternate functions.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Obsolete Function (CWE-477)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nD.  Consider seriously the security implications of using an obsolete function. Consider using alternate functions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Forced Authentication (T1187)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Authentication (T1187)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Forced Authentication (T1187)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-698 (Install Malicious Extension)?\nA.  Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.\nB.  If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".\nC.  Configuration: Disable Java Script in the browser\nD.  Perform input validation for all remote content.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-698 (Install Malicious Extension)",
      "ddmc_optionA": "Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.",
      "ddmc_optionB": "If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".",
      "ddmc_optionC": "Configuration: Disable Java Script in the browser",
      "ddmc_optionD": "Perform input validation for all remote content.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-698 (Install Malicious Extension)?\nA.  Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.\nB.  If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".\nC.  Configuration: Disable Java Script in the browser\nD.  Perform input validation for all remote content.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1558.003 (Kerberoasting)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Protect sensitive information with strong encryption.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Protect sensitive information with strong encryption.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Protect sensitive information with strong encryption.",
      "prompts": [],
      "instruction": "How can you mitigate T1558.003 (Kerberoasting)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Protect sensitive information with strong encryption.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Compiled HTML File (T1218.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nD.  Analyzing the properties of file create system call invocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionD": "Analyzing the properties of file create system call invocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the properties of file create system call invocations.",
      "prompts": [],
      "instruction": "How can you mitigate Compiled HTML File (T1218.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nD.  Analyzing the properties of file create system call invocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transmitted Data Manipulation (T1565.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transmitted Data Manipulation (T1565.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Clickjacking (CAPEC-103)?\nA.  Implementation: Kernel Direct Memory Access Protection\nB.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nC.  Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\nD.  Change default PIN passwords and always use one when connecting.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clickjacking (CAPEC-103)",
      "ddmc_optionA": "Implementation: Kernel Direct Memory Access Protection",
      "ddmc_optionB": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "ddmc_optionC": "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
      "ddmc_optionD": "Change default PIN passwords and always use one when connecting.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "prompts": [],
      "instruction": "What is a method to mitigate Clickjacking (CAPEC-103)?\nA.  Implementation: Kernel Direct Memory Access Protection\nB.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nC.  Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\nD.  Change default PIN passwords and always use one when connecting.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Protection for Outbound Error Messages and Alert Signals (CWE-1320)?\nA.  Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.\nB.  NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.\nC.  Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.\nD.  Do not use JNI calls if you don't trust the native library.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Protection for Outbound Error Messages and Alert Signals (CWE-1320)",
      "ddmc_optionA": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.",
      "ddmc_optionB": "NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.",
      "ddmc_optionC": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.",
      "ddmc_optionD": "Do not use JNI calls if you don't trust the native library.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Protection for Outbound Error Messages and Alert Signals (CWE-1320)?\nA.  Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.\nB.  NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.\nC.  Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.\nD.  Do not use JNI calls if you don't trust the native library.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Social Media Accounts (T1586.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Protect sensitive information with strong encryption.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Social Media Accounts (T1586.001)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Social Media Accounts (T1586.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Protect sensitive information with strong encryption.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Permissive Regular Expression (CWE-625)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Permissive Regular Expression (CWE-625)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "ddmc_optionC": "When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.",
      "prompts": [],
      "instruction": "What is a method to mitigate Permissive Regular Expression (CWE-625)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-1314 (Missing Write Protection for Parametric Data Values)?\nA.  For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.\nB.  Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.\nC.  Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.\nD.  In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1314 (Missing Write Protection for Parametric Data Values)",
      "ddmc_optionA": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
      "ddmc_optionB": "Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.",
      "ddmc_optionC": "Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.",
      "ddmc_optionD": "In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-1314 (Missing Write Protection for Parametric Data Values)?\nA.  For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.\nB.  Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.\nC.  Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.\nD.  In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Data Transfer Size Limits (T1030)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data Transfer Size Limits (T1030)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Data Transfer Size Limits (T1030)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionC": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Protect sensitive information with strong encryption.\nD.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "prompts": [],
      "instruction": "How can you mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Protect sensitive information with strong encryption.\nD.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1614 (System Location Discovery)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1614 (System Location Discovery)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate T1614 (System Location Discovery)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Time Providers (T1547.003)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Restoring an software configuration.\nC.  Restoring a file for an entity to access.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Time Providers (T1547.003)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate Time Providers (T1547.003)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Restoring an software configuration.\nC.  Restoring a file for an entity to access.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Network Connections Discovery (T1049)?\nA.  Modifying system configuration to increase password strength.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Network Connections Discovery (T1049)",
      "ddmc_optionA": "Modifying system configuration to increase password strength.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.",
      "ddmc_optionD": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate System Network Connections Discovery (T1049)?\nA.  Modifying system configuration to increase password strength.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  File eviction techniques evict files from system storage.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Storage Object Discovery (T1619)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  File eviction techniques evict files from system storage.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate External Proxy (T1090.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Modifying system configuration to increase password strength.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Proxy (T1090.002)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Modifying system configuration to increase password strength.",
      "ddmc_optionD": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate External Proxy (T1090.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Modifying system configuration to increase password strength.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Process Injection (T1055)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts. Enable the UpdateFolderPermissions action for all logon types. The mailbox audit log will forward folder permission modification events to the Unified Audit Log. Create rules to alert on ModifyFolderPermissions operations where the Anonymous or Default user is assigned permissions other than None. A larger than normal volume of emails sent from an account and similar phishing emails sent from real accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments. Analyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\nD.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Process Injection (T1055)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts. Enable the UpdateFolderPermissions action for all logon types. The mailbox audit log will forward folder permission modification events to the Unified Audit Log. Create rules to alert on ModifyFolderPermissions operations where the Anonymous or Default user is assigned permissions other than None. A larger than normal volume of emails sent from an account and similar phishing emails sent from real accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.",
      "ddmc_optionC": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments. Analyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",
      "ddmc_optionD": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)",
      "prompts": [],
      "instruction": "What is a method to detect Process Injection (T1055)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts. Enable the UpdateFolderPermissions action for all logon types. The mailbox audit log will forward folder permission modification events to the Unified Audit Log. Create rules to alert on ModifyFolderPermissions operations where the Anonymous or Default user is assigned permissions other than None. A larger than normal volume of emails sent from an account and similar phishing emails sent from real accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments. Analyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\nD.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Security Software Discovery (T1518.001)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Security Software Discovery (T1518.001)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate Security Software Discovery (T1518.001)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Lack of Administrator Control over Security (CWE-671)?\nA.  Black box methods might not get the needed code coverage within limited time constraints, and a dynamic test might not produce any noticeable side effects even if it is successful.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Lack of Administrator Control over Security (CWE-671)",
      "ddmc_optionA": "Black box methods might not get the needed code coverage within limited time constraints, and a dynamic test might not produce any noticeable side effects even if it is successful.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest",
      "prompts": [],
      "instruction": "What is a method to detect Lack of Administrator Control over Security (CWE-671)?\nA.  Black box methods might not get the needed code coverage within limited time constraints, and a dynamic test might not produce any noticeable side effects even if it is successful.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.\nB.  Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.\nC.  When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.\nD.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Security Version Number Mutable to Older Versions (CWE-1328)",
      "ddmc_optionA": "In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.",
      "ddmc_optionB": "Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.",
      "ddmc_optionC": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.",
      "ddmc_optionD": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.\nB.  Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.\nC.  When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.\nD.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Executable Regular Expression Error (CWE-624)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Executable Regular Expression Error (CWE-624)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.",
      "prompts": [],
      "instruction": "What is a method to mitigate Executable Regular Expression Error (CWE-624)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect SID-History Injection (T1134.005)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nB.  Examine data in user\u2019s SID-History attributes using the PowerShell <code>Get-ADUser</code> cmdlet , especially users who have SID-History values from the same domain.  Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.   Monitor for Windows API calls to the <code>DsAddSidHistory</code> function. (Citations: Microsoft Get-ADUser, AdSecurity SID History Sept 2015, AdSecurity SID History Sept 2015, Microsoft DsAddSidHistory, Microsoft DsAddSidHistory)\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Monitor file access on removable media. Detect processes that execute when removable media is mounted.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "SID-History Injection (T1134.005)",
      "ddmc_optionA": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_optionB": "Examine data in user\u2019s SID-History attributes using the PowerShell <code>Get-ADUser</code> cmdlet , especially users who have SID-History values from the same domain.  Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.   Monitor for Windows API calls to the <code>DsAddSidHistory</code> function. (Citations: Microsoft Get-ADUser, AdSecurity SID History Sept 2015, AdSecurity SID History Sept 2015, Microsoft DsAddSidHistory, Microsoft DsAddSidHistory)",
      "ddmc_optionC": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Monitor file access on removable media. Detect processes that execute when removable media is mounted.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Examine data in user\u2019s SID-History attributes using the PowerShell <code>Get-ADUser</code> cmdlet , especially users who have SID-History values from the same domain.  Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.   Monitor for Windows API calls to the <code>DsAddSidHistory</code> function. (Citations: Microsoft Get-ADUser, AdSecurity SID History Sept 2015, AdSecurity SID History Sept 2015, Microsoft DsAddSidHistory, Microsoft DsAddSidHistory)",
      "prompts": [],
      "instruction": "How can you detect SID-History Injection (T1134.005)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nB.  Examine data in user\u2019s SID-History attributes using the PowerShell <code>Get-ADUser</code> cmdlet , especially users who have SID-History values from the same domain.  Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.   Monitor for Windows API calls to the <code>DsAddSidHistory</code> function. (Citations: Microsoft Get-ADUser, AdSecurity SID History Sept 2015, AdSecurity SID History Sept 2015, Microsoft DsAddSidHistory, Microsoft DsAddSidHistory)\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Monitor file access on removable media. Detect processes that execute when removable media is mounted.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1011.001 (Exfiltration Over Bluetooth)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Process eviction techniques terminate or remove running process.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Restoring an entity's access to resources.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Process eviction techniques terminate or remove running process.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Restoring an entity's access to resources.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)?\nA.  Leverage anti-virus products to detect and quarantine software with known virus.\nB.  Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.\nC.  Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.\nD.  Ensure that proper permissions on files and folders are enacted to limit accessibility.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)",
      "ddmc_optionA": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "ddmc_optionB": "Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.",
      "ddmc_optionC": "Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.",
      "ddmc_optionD": "Ensure that proper permissions on files and folders are enacted to limit accessibility.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "prompts": [],
      "instruction": "How can you mitigate Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)?\nA.  Leverage anti-virus products to detect and quarantine software with known virus.\nB.  Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.\nC.  Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.\nD.  Ensure that proper permissions on files and folders are enacted to limit accessibility.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionD": "This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.",
      "prompts": [],
      "instruction": "What is a method to detect CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-93 (Log Injection-Tampering-Forging)?\nA.  Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.\nB.  Configuration: Disable SharedArrayBuffer for Web Browsers\nC.  Design: Encrypt all communication between the client and server.\nD.  Monitor system and domain logs for abnormal access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-93 (Log Injection-Tampering-Forging)",
      "ddmc_optionA": "Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.",
      "ddmc_optionB": "Configuration: Disable SharedArrayBuffer for Web Browsers",
      "ddmc_optionC": "Design: Encrypt all communication between the client and server.",
      "ddmc_optionD": "Monitor system and domain logs for abnormal access.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-93 (Log Injection-Tampering-Forging)?\nA.  Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.\nB.  Configuration: Disable SharedArrayBuffer for Web Browsers\nC.  Design: Encrypt all communication between the client and server.\nD.  Monitor system and domain logs for abnormal access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Double Free (CWE-415)?\nA.  Choose a language that provides automatic memory management.\nB.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.\nD.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Double Free (CWE-415)",
      "ddmc_optionA": "Choose a language that provides automatic memory management.",
      "ddmc_optionB": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
      "ddmc_optionC": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.",
      "ddmc_optionD": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Choose a language that provides automatic memory management.",
      "prompts": [],
      "instruction": "How can you mitigate Double Free (CWE-415)?\nA.  Choose a language that provides automatic memory management.\nB.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.\nD.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  A file created for the purposes of deceiving an adversary.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  A file created for the purposes of deceiving an adversary.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.\nB.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nC.  Disable scripting languages such as JavaScript in browser\nD.  Design: Tunnel communications through a secure proxy\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Using Malicious Files (CAPEC-17)",
      "ddmc_optionA": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
      "ddmc_optionB": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "ddmc_optionC": "Disable scripting languages such as JavaScript in browser",
      "ddmc_optionD": "Design: Tunnel communications through a secure proxy",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
      "prompts": [],
      "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.\nB.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nC.  Disable scripting languages such as JavaScript in browser\nD.  Design: Tunnel communications through a secure proxy\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Expression is Always False (CWE-570)?\nA.  Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Expression is Always False (CWE-570)",
      "ddmc_optionA": "Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Expression is Always False (CWE-570)?\nA.  Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Multiple Leading Special Elements (CWE-161)?\nA.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\nB.  Design objects and program flow such that multiple or complex casts are unnecessary\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Many XML parsers and validators can be configured to disable external entity expansion.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Multiple Leading Special Elements (CWE-161)",
      "ddmc_optionA": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
      "ddmc_optionB": "Design objects and program flow such that multiple or complex casts are unnecessary",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Many XML parsers and validators can be configured to disable external entity expansion.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Multiple Leading Special Elements (CWE-161)?\nA.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\nB.  Design objects and program flow such that multiple or complex casts are unnecessary\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Many XML parsers and validators can be configured to disable external entity expansion.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Ensure best practices with respect to communications channel protections.\nC.  Design: Use input validation for cookies\nD.  Employ a robust network defensive posture that includes a managed IDS/IPS.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)",
      "ddmc_optionA": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
      "ddmc_optionB": "Ensure best practices with respect to communications channel protections.",
      "ddmc_optionC": "Design: Use input validation for cookies",
      "ddmc_optionD": "Employ a robust network defensive posture that includes a managed IDS/IPS.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Design: Use input validation for cookies",
      "prompts": [],
      "instruction": "What is a method to mitigate Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Ensure best practices with respect to communications channel protections.\nC.  Design: Use input validation for cookies\nD.  Employ a robust network defensive posture that includes a managed IDS/IPS.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate WebView Exposure (CAPEC-503)?\nA.  To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.\nB.  3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.\nC.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nD.  Design: Perform validation on email header data\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "WebView Exposure (CAPEC-503)",
      "ddmc_optionA": "To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.",
      "ddmc_optionB": "3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.",
      "ddmc_optionC": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
      "ddmc_optionD": "Design: Perform validation on email header data",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.",
      "prompts": [],
      "instruction": "How can you mitigate WebView Exposure (CAPEC-503)?\nA.  To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.\nB.  3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.\nC.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nD.  Design: Perform validation on email header data\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.001 (Launch Agent)",
      "ddmc_optionA": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Signature Spoofing by Key Recreation (CAPEC-485)?\nA.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nB.  Use multifactor authentication.\nC.  Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution\nD.  2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Signature Spoofing by Key Recreation (CAPEC-485)",
      "ddmc_optionA": "Ensure cryptographic elements have been sufficiently tested for weaknesses.",
      "ddmc_optionB": "Use multifactor authentication.",
      "ddmc_optionC": "Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution",
      "ddmc_optionD": "2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure cryptographic elements have been sufficiently tested for weaknesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate Signature Spoofing by Key Recreation (CAPEC-485)?\nA.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nB.  Use multifactor authentication.\nC.  Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution\nD.  2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1571 (Non-Standard Port)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Restricting network traffic originating from any location.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1571 (Non-Standard Port)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "prompts": [],
      "instruction": "How can you mitigate T1571 (Non-Standard Port)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Restricting network traffic originating from any location.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Restriction of Names for Files and Other Resources (CWE-641)?\nA.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nB.  Add an access control layer atop any unprotected interfaces for injecting errors.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\nD.  Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of Names for Files and Other Resources (CWE-641)",
      "ddmc_optionA": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
      "ddmc_optionB": "Add an access control layer atop any unprotected interfaces for injecting errors.",
      "ddmc_optionC": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
      "ddmc_optionD": "Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Restriction of Names for Files and Other Resources (CWE-641)?\nA.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nB.  Add an access control layer atop any unprotected interfaces for injecting errors.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\nD.  Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Event Triggered Execution (T1546)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Event Triggered Execution (T1546)",
      "ddmc_optionA": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate Event Triggered Execution (T1546)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1547.003 (Time Providers)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.003 (Time Providers)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1547.003 (Time Providers)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Use umask() with the correct argument.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nD.  Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Support for Integrity Check (CWE-353)",
      "ddmc_optionA": "Use umask() with the correct argument.",
      "ddmc_optionB": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "ddmc_optionC": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_optionD": "Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "prompts": [],
      "instruction": "What is a method to mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Use umask() with the correct argument.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nD.  Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1222 (File and Directory Permissions Modification)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  Restoring an software configuration.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1222 (File and Directory Permissions Modification)",
      "ddmc_optionA": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1222 (File and Directory Permissions Modification)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  Restoring an software configuration.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1543.003 (Windows Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Restoring a file for an entity to access.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.003 (Windows Service)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1543.003 (Windows Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Restoring a file for an entity to access.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Local Data Staging (T1074.001)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Local Data Staging (T1074.001)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Passive physical link mapping only listens to network traffic as a means to map the physical layer.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cloud Accounts (T1078.004)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Accounts (T1078.004)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cloud Accounts (T1078.004)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Accounts (T1078.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restoring a user account's access to resources.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Accounts (T1078.004)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Restoring a user account's access to resources.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring a user account's access to resources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Accounts (T1078.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restoring a user account's access to resources.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)?\nA.  Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.\nB.  Authenticate all servers and perform redundant checks when using DNS hostnames.\nC.  Design: Enforce principle of least privilege\nD.  Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)",
      "ddmc_optionA": "Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.",
      "ddmc_optionB": "Authenticate all servers and perform redundant checks when using DNS hostnames.",
      "ddmc_optionC": "Design: Enforce principle of least privilege",
      "ddmc_optionD": "Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.",
      "prompts": [],
      "instruction": "How can you mitigate Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)?\nA.  Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.\nB.  Authenticate all servers and perform redundant checks when using DNS hostnames.\nC.  Design: Enforce principle of least privilege\nD.  Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Modifying system configuration to increase password strength.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Always verify and authenticate the source of the message.\nD.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Input Terminators (CWE-147)",
      "ddmc_optionA": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Always verify and authenticate the source of the message.",
      "ddmc_optionD": "In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Always verify and authenticate the source of the message.\nD.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Subvert Trust Controls (T1553)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Subvert Trust Controls (T1553)",
      "ddmc_optionA": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Subvert Trust Controls (T1553)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Double Free (CWE-415)?\nA.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nB.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Double Free (CWE-415)",
      "ddmc_optionA": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionB": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmc_optionC": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).",
      "ddmc_optionD": "Use a static analysis tool to find double free instances.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use a static analysis tool to find double free instances.",
      "prompts": [],
      "instruction": "What is a method to mitigate Double Free (CWE-415)?\nA.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nB.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-Factor Authentication Interception (T1111)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Factor Authentication Interception (T1111)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-Factor Authentication Interception (T1111)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1053.005 (Scheduled Task)?\nA.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nB.  Employing file hash comparisons to detect known malware.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an entity's access to resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1053.005 (Scheduled Task)",
      "ddmc_optionA": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Restoring an entity's access to resources.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1053.005 (Scheduled Task)?\nA.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nB.  Employing file hash comparisons to detect known malware.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an entity's access to resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Suspending a running process on a computer system.\nC.  File eviction techniques evict files from system storage.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Suspending a running process on a computer system.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Suspending a running process on a computer system.\nC.  File eviction techniques evict files from system storage.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-188 (Reverse Engineering)?\nA.  Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nB.  Monitor and control access to the configuration management system.\nC.  Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.\nD.  Implementation: Hide HTTP response header software information filed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-188 (Reverse Engineering)",
      "ddmc_optionA": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
      "ddmc_optionB": "Monitor and control access to the configuration management system.",
      "ddmc_optionC": "Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.",
      "ddmc_optionD": "Implementation: Hide HTTP response header software information filed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-188 (Reverse Engineering)?\nA.  Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nB.  Monitor and control access to the configuration management system.\nC.  Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.\nD.  Implementation: Hide HTTP response header software information filed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Firmware Not Updateable (CWE-1277)?\nA.  Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nB.  Implement the necessary functionality to allow the firmware to be updated.\nC.  Use industry standard APIs to synchronize your code.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Firmware Not Updateable (CWE-1277)",
      "ddmc_optionA": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.",
      "ddmc_optionB": "Implement the necessary functionality to allow the firmware to be updated.",
      "ddmc_optionC": "Use industry standard APIs to synchronize your code.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implement the necessary functionality to allow the firmware to be updated.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Firmware Not Updateable (CWE-1277)?\nA.  Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nB.  Implement the necessary functionality to allow the firmware to be updated.\nC.  Use industry standard APIs to synchronize your code.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Race Condition within a Thread (CWE-366)?\nA.  Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.\nB.  Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.\nC.  Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.\nD.  The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Race Condition within a Thread (CWE-366)",
      "ddmc_optionA": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.",
      "ddmc_optionB": "Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.",
      "ddmc_optionC": "Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.",
      "ddmc_optionD": "The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.",
      "prompts": [],
      "instruction": "How can you mitigate Race Condition within a Thread (CWE-366)?\nA.  Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.\nB.  Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.\nC.  Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.\nD.  The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Serialized Data with Nested Payloads (CAPEC-230)?\nA.  Include \"hosts file\"/IP address in the application.\nB.  Implementation: Upgrade phone lines. Note this may be prohibitively expensive\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Pick a robust implementation of the data parser.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serialized Data with Nested Payloads (CAPEC-230)",
      "ddmc_optionA": "Include \"hosts file\"/IP address in the application.",
      "ddmc_optionB": "Implementation: Upgrade phone lines. Note this may be prohibitively expensive",
      "ddmc_optionC": "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
      "ddmc_optionD": "Pick a robust implementation of the data parser.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Pick a robust implementation of the data parser.",
      "prompts": [],
      "instruction": "What is a method to mitigate Serialized Data with Nested Payloads (CAPEC-230)?\nA.  Include \"hosts file\"/IP address in the application.\nB.  Implementation: Upgrade phone lines. Note this may be prohibitively expensive\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Pick a robust implementation of the data parser.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Golden Ticket (T1558.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Golden Ticket (T1558.001)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate Golden Ticket (T1558.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nB.  Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\nC.  Implementation: Perform output validation for all remote content.\nD.  Implementation: Appropriately deal with error messages.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmc_optionA": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "ddmc_optionB": "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.",
      "ddmc_optionC": "Implementation: Perform output validation for all remote content.",
      "ddmc_optionD": "Implementation: Appropriately deal with error messages.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "prompts": [],
      "instruction": "How can you mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nB.  Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\nC.  Implementation: Perform output validation for all remote content.\nD.  Implementation: Appropriately deal with error messages.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Incomplete List of Disallowed Inputs (CWE-184)?\nA.  Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.\nB.  Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.\nC.  Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Incomplete List of Disallowed Inputs (CWE-184)",
      "ddmc_optionA": "Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.",
      "ddmc_optionB": "Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.",
      "ddmc_optionC": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Incomplete List of Disallowed Inputs (CWE-184)?\nA.  Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.\nB.  Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.\nC.  Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate COR_PROFILER (T1574.012)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate COR_PROFILER (T1574.012)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transport Agent (T1505.002)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Path Interception by Search Order Hijacking (T1574.008)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Interception by Search Order Hijacking (T1574.008)",
      "ddmc_optionA": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Path Interception by Search Order Hijacking (T1574.008)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-1192 (Improper Identifier for IP Block used in System-On-Chip (SOC))?\nA.  Always use array indexing instead of direct pointer manipulation.\nB.  Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.\nC.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nD.  Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1192 (Improper Identifier for IP Block used in System-On-Chip (SOC))",
      "ddmc_optionA": "Always use array indexing instead of direct pointer manipulation.",
      "ddmc_optionB": "Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.",
      "ddmc_optionC": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
      "ddmc_optionD": "Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-1192 (Improper Identifier for IP Block used in System-On-Chip (SOC))?\nA.  Always use array indexing instead of direct pointer manipulation.\nB.  Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.\nC.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nD.  Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate WHOIS (T1596.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent modification of environment variables by unauthorized users and groups.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "WHOIS (T1596.002)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Prevent modification of environment variables by unauthorized users and groups.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate WHOIS (T1596.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent modification of environment variables by unauthorized users and groups.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Forced Deadlock (CAPEC-25)?\nA.  Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.\nB.  Frequent changing of handset and retransmission device\nC.  For competing actions, use well-known libraries which implement synchronization.\nD.  Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Deadlock (CAPEC-25)",
      "ddmc_optionA": "Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.",
      "ddmc_optionB": "Frequent changing of handset and retransmission device",
      "ddmc_optionC": "For competing actions, use well-known libraries which implement synchronization.",
      "ddmc_optionD": "Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For competing actions, use well-known libraries which implement synchronization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Forced Deadlock (CAPEC-25)?\nA.  Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.\nB.  Frequent changing of handset and retransmission device\nC.  For competing actions, use well-known libraries which implement synchronization.\nD.  Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Macro Symbols (CWE-152)",
      "ddmc_optionA": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionC": "Use a language that provides appropriate memory abstractions.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1074.001 (Local Data Staging)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1074.001 (Local Data Staging)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1543.004 (Launch Daemon)?\nA.  File eviction techniques evict files from system storage.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.004 (Launch Daemon)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1543.004 (Launch Daemon)?\nA.  File eviction techniques evict files from system storage.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-71 (Using Unicode Encoding to Bypass Validation Logic)?\nA.  Design: Tunnel communications through a secure proxy\nB.  Monitor and control access to the configuration management system.\nC.  Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.\nD.  Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-71 (Using Unicode Encoding to Bypass Validation Logic)",
      "ddmc_optionA": "Design: Tunnel communications through a secure proxy",
      "ddmc_optionB": "Monitor and control access to the configuration management system.",
      "ddmc_optionC": "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.",
      "ddmc_optionD": "Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-71 (Using Unicode Encoding to Bypass Validation Logic)?\nA.  Design: Tunnel communications through a secure proxy\nB.  Monitor and control access to the configuration management system.\nC.  Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.\nD.  Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "ddmc_optionA": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "Block users or groups from installing unapproved software.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Block users or groups from installing unapproved software.",
      "prompts": [],
      "instruction": "How can you mitigate Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Data is being transferred and/or removed from systems/applications within the network.\nC.  Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
      "ddmc_optionB": "Data is being transferred and/or removed from systems/applications within the network.",
      "ddmc_optionC": "Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.",
      "ddmc_optionD": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "prompts": [],
      "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Data is being transferred and/or removed from systems/applications within the network.\nC.  Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Insertion of Sensitive Information into Log File (CWE-532)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Insertion of Sensitive Information into Log File (CWE-532)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Insertion of Sensitive Information into Log File (CWE-532)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Password Aging with Long Expiration (CWE-263)?\nA.  Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].\nD.  For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Password Aging with Long Expiration (CWE-263)",
      "ddmc_optionA": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].",
      "ddmc_optionD": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].",
      "prompts": [],
      "instruction": "What is a method to mitigate Password Aging with Long Expiration (CWE-263)?\nA.  Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].\nD.  For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Indicator Blocking (T1562.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Indicator Blocking (T1562.006)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "How can you mitigate Indicator Blocking (T1562.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-551 (Modify Existing Service)?\nA.  Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.\nB.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nC.  Implementation: Perform input validation for all remote content.\nD.  Conduct rigorous threat assessments of suppliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-551 (Modify Existing Service)",
      "ddmc_optionA": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
      "ddmc_optionB": "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
      "ddmc_optionC": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionD": "Conduct rigorous threat assessments of suppliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-551 (Modify Existing Service)?\nA.  Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.\nB.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nC.  Implementation: Perform input validation for all remote content.\nD.  Conduct rigorous threat assessments of suppliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Handling of Insufficient Privileges (CWE-274)?\nA.  Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.\nB.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nC.  Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.\nD.  Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Insufficient Privileges (CWE-274)",
      "ddmc_optionA": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
      "ddmc_optionB": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
      "ddmc_optionC": "Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.",
      "ddmc_optionD": "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Handling of Insufficient Privileges (CWE-274)?\nA.  Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.\nB.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nC.  Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.\nD.  Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1036.005 (Match Legitimate Name or Location)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1036.005 (Match Legitimate Name or Location)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1036.005 (Match Legitimate Name or Location)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Network Flood (T1498.001)",
      "ddmc_optionA": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Pass the Hash (T1550.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Pass the Hash (T1550.002)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionD": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Pass the Hash (T1550.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Low-Level Functionality (CWE-695)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries. Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Low-Level Functionality (CWE-695)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionC": "Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries. Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Use of Low-Level Functionality (CWE-695)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries. Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1585.003 (Cloud Accounts)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1585.003 (Cloud Accounts)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1585.003 (Cloud Accounts)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-641 (Improper Restriction of Names for Files and Other Resources)",
      "ddmc_optionA": "Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.",
      "ddmc_optionB": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionC": "Do not allow users to control names of resources used on the server side.",
      "ddmc_optionD": "Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow users to control names of resources used on the server side.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionB": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Modify Registry (T1112)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Modify Registry (T1112)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "How can you mitigate Modify Registry (T1112)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1574.012 (COR_PROFILER)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Cryptographically authenticating the bootloader software before system boot.\nC.  Analyzing a Container Image with respect to a set of policies.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.012 (COR_PROFILER)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Cryptographically authenticating the bootloader software before system boot.",
      "ddmc_optionC": "Analyzing a Container Image with respect to a set of policies.",
      "ddmc_optionD": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1574.012 (COR_PROFILER)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Cryptographically authenticating the bootloader software before system boot.\nC.  Analyzing a Container Image with respect to a set of policies.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CAPEC-653 (Use of Known Operating System Credentials)?\nA.  There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.\nB.  You receive a text message from an entity that you are not even a customer of prompting you to log into your account.\nC.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nD.  Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CAPEC-653 (Use of Known Operating System Credentials)",
      "ddmc_optionA": "There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.",
      "ddmc_optionB": "You receive a text message from an entity that you are not even a customer of prompting you to log into your account.",
      "ddmc_optionC": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionD": "Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "prompts": [],
      "instruction": "How can you detect CAPEC-653 (Use of Known Operating System Credentials)?\nA.  There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.\nB.  You receive a text message from an entity that you are not even a customer of prompting you to log into your account.\nC.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nD.  Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Private Keys (T1552.004)?\nA.  Use of SSH may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. Also monitor user SSH-agent socket files being used by different users.\nB.  Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows. The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citations: GitLab WakeOnLAN)\nC.  Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.\nD.  Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Private Keys (T1552.004)",
      "ddmc_optionA": "Use of SSH may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. Also monitor user SSH-agent socket files being used by different users.",
      "ddmc_optionB": "Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows. The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citations: GitLab WakeOnLAN)",
      "ddmc_optionC": "Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.",
      "ddmc_optionD": "Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.",
      "prompts": [],
      "instruction": "How can you detect Private Keys (T1552.004)?\nA.  Use of SSH may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. Also monitor user SSH-agent socket files being used by different users.\nB.  Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows. The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citations: GitLab WakeOnLAN)\nC.  Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.\nD.  Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Design for FPGA Maliciously Altered (CAPEC-674)?\nA.  Use a secret space that is well known and with no known patterns that may reduce functional size.\nB.  Implementation: Use SSL/TLS to protect cookie in transit\nC.  Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.\nD.  Conduct detailed vendor assessment before acquiring COTS hardware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Design for FPGA Maliciously Altered (CAPEC-674)",
      "ddmc_optionA": "Use a secret space that is well known and with no known patterns that may reduce functional size.",
      "ddmc_optionB": "Implementation: Use SSL/TLS to protect cookie in transit",
      "ddmc_optionC": "Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.",
      "ddmc_optionD": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Design for FPGA Maliciously Altered (CAPEC-674)?\nA.  Use a secret space that is well known and with no known patterns that may reduce functional size.\nB.  Implementation: Use SSL/TLS to protect cookie in transit\nC.  Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.\nD.  Conduct detailed vendor assessment before acquiring COTS hardware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Suspicious Comment (CWE-546)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Protect the core dump files from unauthorized access.\nC.  Software tools are capable of finding ADSs on your system.\nD.  Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Suspicious Comment (CWE-546)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Protect the core dump files from unauthorized access.",
      "ddmc_optionC": "Software tools are capable of finding ADSs on your system.",
      "ddmc_optionD": "Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Protect the core dump files from unauthorized access.",
      "prompts": [],
      "instruction": "How can you mitigate Suspicious Comment (CWE-546)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Protect the core dump files from unauthorized access.\nC.  Software tools are capable of finding ADSs on your system.\nD.  Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1538 (Cloud Service Dashboard)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1538 (Cloud Service Dashboard)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate T1538 (Cloud Service Dashboard)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\nB.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Antivirus software can help mitigate known malicious code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Integer Overflow or Wraparound (CWE-190)",
      "ddmc_optionA": "In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.",
      "ddmc_optionB": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionC": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
      "ddmc_optionD": "Antivirus software can help mitigate known malicious code.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "prompts": [],
      "instruction": "What is a method to mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\nB.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Antivirus software can help mitigate known malicious code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption)?\nA.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nB.  Limit Content Provider permissions (read/write) as appropriate.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-323 (Reusing a Nonce, Key Pair in Encryption)",
      "ddmc_optionA": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "ddmc_optionB": "Limit Content Provider permissions (read/write) as appropriate.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption)?\nA.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nB.  Limit Content Provider permissions (read/write) as appropriate.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.",
      "prompts": [],
      "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)?\nA.  Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.\nB.  This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.\nC.  Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\nD.  Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)",
      "ddmc_optionA": "Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.",
      "ddmc_optionB": "This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.",
      "ddmc_optionC": "Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.",
      "ddmc_optionD": "Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)",
      "prompts": [],
      "instruction": "What is a method to mitigate Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)?\nA.  Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.\nB.  This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.\nC.  Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\nD.  Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Logon Script (Windows) (T1037.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Logon Script (Windows) (T1037.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Output Neutralization for Logs (CWE-117)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Output Neutralization for Logs (CWE-117)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Output Neutralization for Logs (CWE-117)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1021.001 (Remote Desktop Protocol)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.001 (Remote Desktop Protocol)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1021.001 (Remote Desktop Protocol)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Windows Service (T1543.003)?\nA.  Restoring the data in a database.\nB.  Restoring an software configuration.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Windows Service (T1543.003)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Windows Service (T1543.003)?\nA.  Restoring the data in a database.\nB.  Restoring an software configuration.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Inadequate Encryption Strength (CWE-326)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nB.  When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.\nC.  Use an encryption scheme that is currently considered to be strong by experts in the field.\nD.  Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Inadequate Encryption Strength (CWE-326)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionB": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.",
      "ddmc_optionC": "Use an encryption scheme that is currently considered to be strong by experts in the field.",
      "ddmc_optionD": "Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use an encryption scheme that is currently considered to be strong by experts in the field.",
      "prompts": [],
      "instruction": "How can you mitigate Inadequate Encryption Strength (CWE-326)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nB.  When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.\nC.  Use an encryption scheme that is currently considered to be strong by experts in the field.\nD.  Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Executable Installer File Permissions Weakness (T1574.005)?\nA.  Consider analyzing code signing certificates for features that may be associated with the adversary and/or their developers, such as the thumbprint, algorithm used, validity period, common name, and certificate authority. Malware repositories can also be used to identify additional samples associated with the adversary and identify patterns an adversary has used in procuring code signing certificates. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as Code Signing or Install Root Certificate.\nB.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Monitor for changes to Registry values associated with Windows logon scrips, nameley <code>HKCU\\Environment\\UserInitMprLogonScript</code>. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Executable Installer File Permissions Weakness (T1574.005)",
      "ddmc_optionA": "Consider analyzing code signing certificates for features that may be associated with the adversary and/or their developers, such as the thumbprint, algorithm used, validity period, common name, and certificate authority. Malware repositories can also be used to identify additional samples associated with the adversary and identify patterns an adversary has used in procuring code signing certificates. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as Code Signing or Install Root Certificate.",
      "ddmc_optionB": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
      "ddmc_optionC": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Monitor for changes to Registry values associated with Windows logon scrips, nameley <code>HKCU\\Environment\\UserInitMprLogonScript</code>. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Executable Installer File Permissions Weakness (T1574.005)?\nA.  Consider analyzing code signing certificates for features that may be associated with the adversary and/or their developers, such as the thumbprint, algorithm used, validity period, common name, and certificate authority. Malware repositories can also be used to identify additional samples associated with the adversary and identify patterns an adversary has used in procuring code signing certificates. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as Code Signing or Install Root Certificate.\nB.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Monitor for changes to Registry values associated with Windows logon scrips, nameley <code>HKCU\\Environment\\UserInitMprLogonScript</code>. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Obtain Capabilities (T1588)?\nA.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Obtain Capabilities (T1588)",
      "ddmc_optionA": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionB": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Obtain Capabilities (T1588)?\nA.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Cloud Accounts (T1586.003)?\nA.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nB.  Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.\nC.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cloud Accounts (T1586.003)",
      "ddmc_optionA": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)",
      "ddmc_optionB": "Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.",
      "ddmc_optionC": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "ddmc_optionD": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Cloud Accounts (T1586.003)?\nA.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nB.  Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.\nC.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Influence Perception of Authority (CAPEC-421)?\nA.  Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.\nB.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Influence Perception of Authority (CAPEC-421)",
      "ddmc_optionA": "Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.",
      "ddmc_optionB": "Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.",
      "ddmc_optionC": "Digitize documents and cryptographically sign them to verify authenticity.",
      "ddmc_optionD": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "prompts": [],
      "instruction": "How can you mitigate Influence Perception of Authority (CAPEC-421)?\nA.  Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.\nB.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1095 (Non-Application Layer Protocol)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1095 (Non-Application Layer Protocol)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "prompts": [],
      "instruction": "How can you mitigate T1095 (Non-Application Layer Protocol)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Predictable Algorithm in Random Number Generator (CWE-1241)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  An application must make network resources available to a client commensurate with the client's access level.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Predictable Algorithm in Random Number Generator (CWE-1241)",
      "ddmc_optionA": "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.",
      "ddmc_optionB": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
      "ddmc_optionC": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_optionD": "An application must make network resources available to a client commensurate with the client's access level.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A true random number generator should be implemented for cryptographic algorithms.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Predictable Algorithm in Random Number Generator (CWE-1241)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  An application must make network resources available to a client commensurate with the client's access level.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Taint Shared Content (T1080)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restricting network traffic originating from any location.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Taint Shared Content (T1080)",
      "ddmc_optionA": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Deploying a network resource for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "How can you mitigate Taint Shared Content (T1080)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restricting network traffic originating from any location.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1048 (Exfiltration Over Alternative Protocol)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Encrypting a file using a cryptographic key.\nC.  Restoring an software configuration.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1048 (Exfiltration Over Alternative Protocol)",
      "ddmc_optionA": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1048 (Exfiltration Over Alternative Protocol)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Encrypting a file using a cryptographic key.\nC.  Restoring an software configuration.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Trusted Relationship (T1199)?\nA.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nB.  Suspending a running process on a computer system.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmc_optionB": "Suspending a running process on a computer system.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Trusted Relationship (T1199)?\nA.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nB.  Suspending a running process on a computer system.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Encrypting a file using a cryptographic key.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Encrypting a file using a cryptographic key.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Stored Data Manipulation (T1565.001)?\nA.  Restoring the data in a database.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Stored Data Manipulation (T1565.001)?\nA.  Restoring the data in a database.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File eviction techniques evict files from system storage.\nC.  Suspending a running process on a computer system.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1568 (Dynamic Resolution)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Suspending a running process on a computer system.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File eviction techniques evict files from system storage.\nC.  Suspending a running process on a computer system.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration over USB (T1052.001)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Encrypting a file using a cryptographic key.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration over USB (T1052.001)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration over USB (T1052.001)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Encrypting a file using a cryptographic key.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Search Order Hijacking (CAPEC-471)?\nA.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.\nB.  Design: Sign system DLLs so that unauthorized DLLs can be detected.\nC.  Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.\nD.  Ensure users are not reusing username/password combinations for multiple systems, applications, or services.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Search Order Hijacking (CAPEC-471)",
      "ddmc_optionA": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.",
      "ddmc_optionB": "Design: Sign system DLLs so that unauthorized DLLs can be detected.",
      "ddmc_optionC": "Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.",
      "ddmc_optionD": "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design: Sign system DLLs so that unauthorized DLLs can be detected.",
      "prompts": [],
      "instruction": "What is a method to mitigate Search Order Hijacking (CAPEC-471)?\nA.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.\nB.  Design: Sign system DLLs so that unauthorized DLLs can be detected.\nC.  Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.\nD.  Ensure users are not reusing username/password combinations for multiple systems, applications, or services.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Image File Execution Options Injection (T1546.012)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Unprotected Transport of Credentials (CWE-523)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Unprotected Transport of Credentials (CWE-523)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Unprotected Transport of Credentials (CWE-523)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Emulating instructions in a file looking for specific patterns.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Scheduled Task (T1053.005)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Initiating a host's shutdown sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-hop Proxy (T1090.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-hop Proxy (T1090.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Expression is Always True (CWE-571)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Expression is Always True (CWE-571)",
      "ddmc_optionA": "Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Expression is Always True (CWE-571)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer\nB.  Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer",
      "ddmc_optionB": "Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.",
      "prompts": [],
      "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer\nB.  Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Domain Fronting (T1090.004)?\nA.  Determining if a URL is benign or malicious by analyzing the URL or its components.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an software configuration.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Determining if a URL is benign or malicious by analyzing the URL or its components.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Domain Fronting (T1090.004)?\nA.  Determining if a URL is benign or malicious by analyzing the URL or its components.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an software configuration.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Host Software Binary (T1554)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Out-of-bounds Write (CWE-787)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nC.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Out-of-bounds Write (CWE-787)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution",
      "ddmc_optionC": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "prompts": [],
      "instruction": "How can you detect Out-of-bounds Write (CWE-787)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nC.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Blocking a lookup based on the query's domain name value.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking a lookup based on the query's domain name value.",
      "prompts": [],
      "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  None. This attack happens offline.\nB.  Authentication attempts use credentials that have been used previously by the account in question.\nC.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nD.  Software being run on a system matches a file signature found in a malware database\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "None. This attack happens offline.",
      "ddmc_optionB": "Authentication attempts use credentials that have been used previously by the account in question.",
      "ddmc_optionC": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "ddmc_optionD": "Software being run on a system matches a file signature found in a malware database",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Authentication attempts use credentials that have been used previously by the account in question.",
      "prompts": [],
      "instruction": "How can you detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  None. This attack happens offline.\nB.  Authentication attempts use credentials that have been used previously by the account in question.\nC.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nD.  Software being run on a system matches a file signature found in a malware database\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Scheduled Task (T1053.005)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Scheduled Task (T1053.005)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Controlling access to local computer system resources with kernel-level capabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Scheduled Task (T1053.005)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Obsolete Function (CWE-477)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Use a tool that dynamically detects memory management problems, such as valgrind.\nC.  Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.\nD.  If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Obsolete Function (CWE-477)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmc_optionC": "Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.",
      "ddmc_optionD": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Obsolete Function (CWE-477)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Use a tool that dynamically detects memory management problems, such as valgrind.\nC.  Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.\nD.  If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect T1021.006 (Windows Remote Management)?\nA.  Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events. Also monitor for remote WMI connection attempts (typically over port 5985 when using HTTP and 5986 for HTTPS).(Citations: Medium Detecting Lateral Movement)\nB.  Look for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the <code>\\\\\\\\.\\\\</code> notation. Monitor for unusual kernel driver installation activity. For network infrastructure devices, collect AAA logging to monitor for `erase` commands that delete critical configuration files.(Citations: Microsoft Sysmon v6 May 2017)\nC.  There is no documented method for defenders to directly identify behaviors that weaken encryption. Detection efforts may be focused on closely related adversary behaviors, such as Modify System Image. Some detection methods require vendor support to aid in investigation.\nD.  Monitor for the creation of the Office Test Registry key. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Since v13.52, Autoruns can detect tasks set up using the Office Test Registry key. Consider monitoring Office processes for anomalous DLL loads.(Citations: Palo Alto Office Test Sofacy)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1021.006 (Windows Remote Management)",
      "ddmc_optionA": "Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events. Also monitor for remote WMI connection attempts (typically over port 5985 when using HTTP and 5986 for HTTPS).(Citations: Medium Detecting Lateral Movement)",
      "ddmc_optionB": "Look for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the <code>\\\\\\\\.\\\\</code> notation. Monitor for unusual kernel driver installation activity. For network infrastructure devices, collect AAA logging to monitor for `erase` commands that delete critical configuration files.(Citations: Microsoft Sysmon v6 May 2017)",
      "ddmc_optionC": "There is no documented method for defenders to directly identify behaviors that weaken encryption. Detection efforts may be focused on closely related adversary behaviors, such as Modify System Image. Some detection methods require vendor support to aid in investigation.",
      "ddmc_optionD": "Monitor for the creation of the Office Test Registry key. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Since v13.52, Autoruns can detect tasks set up using the Office Test Registry key. Consider monitoring Office processes for anomalous DLL loads.(Citations: Palo Alto Office Test Sofacy)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events. Also monitor for remote WMI connection attempts (typically over port 5985 when using HTTP and 5986 for HTTPS).(Citations: Medium Detecting Lateral Movement)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect T1021.006 (Windows Remote Management)?\nA.  Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events. Also monitor for remote WMI connection attempts (typically over port 5985 when using HTTP and 5986 for HTTPS).(Citations: Medium Detecting Lateral Movement)\nB.  Look for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the <code>\\\\\\\\.\\\\</code> notation. Monitor for unusual kernel driver installation activity. For network infrastructure devices, collect AAA logging to monitor for `erase` commands that delete critical configuration files.(Citations: Microsoft Sysmon v6 May 2017)\nC.  There is no documented method for defenders to directly identify behaviors that weaken encryption. Detection efforts may be focused on closely related adversary behaviors, such as Modify System Image. Some detection methods require vendor support to aid in investigation.\nD.  Monitor for the creation of the Office Test Registry key. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Since v13.52, Autoruns can detect tasks set up using the Office Test Registry key. Consider monitoring Office processes for anomalous DLL loads.(Citations: Palo Alto Office Test Sofacy)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Server Software Component (T1505)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server Software Component (T1505)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Server Software Component (T1505)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Information Discovery (T1082)?\nA.  Encrypting a file using a cryptographic key.\nB.  Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.\nC.  Restoring a file for an entity to access.\nD.  A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Information Discovery (T1082)?\nA.  Encrypting a file using a cryptographic key.\nB.  Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.\nC.  Restoring a file for an entity to access.\nD.  A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unprotected Primary Channel (CWE-419)?\nA.  Do not expose administrative functionnality on the user UI.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unprotected Primary Channel (CWE-419)",
      "ddmc_optionA": "Do not expose administrative functionnality on the user UI.",
      "ddmc_optionB": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
      "ddmc_optionC": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmc_optionD": "Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Do not expose administrative functionnality on the user UI.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unprotected Primary Channel (CWE-419)?\nA.  Do not expose administrative functionnality on the user UI.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Captured Tickets (Pass The Ticket) (CAPEC-645)",
      "ddmc_optionA": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.",
      "ddmc_optionB": "Enforce regular patching of software.",
      "ddmc_optionC": "Design: Enforce principle of least privilege",
      "ddmc_optionD": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1176 (Browser Extensions)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1176 (Browser Extensions)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate T1176 (Browser Extensions)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Server Software Component (T1505)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server Software Component (T1505)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "prompts": [],
      "instruction": "How can you mitigate Server Software Component (T1505)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect External Control of Critical State Data (CWE-642)?\nA.  This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection\nC.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "External Control of Critical State Data (CWE-642)",
      "ddmc_optionA": "This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection",
      "ddmc_optionC": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect External Control of Critical State Data (CWE-642)?\nA.  This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection\nC.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1539 (Steal Web Session Cookie)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1539 (Steal Web Session Cookie)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1539 (Steal Web Session Cookie)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Uninitialized Value on Reset for Registers Holding Security Settings (CWE-1271)?\nA.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.\nB.  All registers holding security-critical information should be set to a specific value on reset.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Uninitialized Value on Reset for Registers Holding Security Settings (CWE-1271)",
      "ddmc_optionA": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.",
      "ddmc_optionB": "All registers holding security-critical information should be set to a specific value on reset.",
      "ddmc_optionC": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "All registers holding security-critical information should be set to a specific value on reset.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Uninitialized Value on Reset for Registers Holding Security Settings (CWE-1271)?\nA.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.\nB.  All registers holding security-critical information should be set to a specific value on reset.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unchecked Input for Loop Condition (CWE-606)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Do not use user-controlled data for loop conditions.\nC.  Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.\nD.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unchecked Input for Loop Condition (CWE-606)",
      "ddmc_optionA": "Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.",
      "ddmc_optionB": "Do not use user-controlled data for loop conditions.",
      "ddmc_optionC": "Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.",
      "ddmc_optionD": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not use user-controlled data for loop conditions.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unchecked Input for Loop Condition (CWE-606)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Do not use user-controlled data for loop conditions.\nC.  Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.\nD.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cloud Storage Object Discovery (T1619)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Storage Object Discovery (T1619)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "prompts": [],
      "instruction": "How can you mitigate Cloud Storage Object Discovery (T1619)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1033 (System Owner/User Discovery)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1033 (System Owner/User Discovery)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate T1033 (System Owner/User Discovery)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Mavinject (T1218.013)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  An authentication token created for the purposes of deceiving an adversary.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mavinject (T1218.013)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionC": "An authentication token created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Mavinject (T1218.013)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  An authentication token created for the purposes of deceiving an adversary.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1548.001 (Setuid and Setgid)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1548.001 (Setuid and Setgid)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate T1548.001 (Setuid and Setgid)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nC.  Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of a One-Way Hash without a Salt (CWE-759)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
      "ddmc_optionC": "Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nC.  Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect External Control of Assumed-Immutable Web Parameter (CWE-472)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "External Control of Assumed-Immutable Web Parameter (CWE-472)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect External Control of Assumed-Immutable Web Parameter (CWE-472)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Safe Mode Boot (T1562.009)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Safe Mode Boot (T1562.009)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate Safe Mode Boot (T1562.009)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nB.  Implementation: Implement communications to and from the registry using secure protocols\nC.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nD.  Ensure all remote methods are secured\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmc_optionA": "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.",
      "ddmc_optionB": "Implementation: Implement communications to and from the registry using secure protocols",
      "ddmc_optionC": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "ddmc_optionD": "Ensure all remote methods are secured",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nB.  Implementation: Implement communications to and from the registry using secure protocols\nC.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nD.  Ensure all remote methods are secured\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Logon Script (Windows) (T1037.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Logon Script (Windows) (T1037.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-823 (Use of Out-of-range Pointer Offset)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nD.  It needs to be determined if the output of a cryptographic primitive is lacking entropy, which is one clear sign that something went wrong with the crypto implementation. There exist many methods of measuring the entropy of a bytestream, from sophisticated ones (like calculating Shannon's entropy of a sequence of characters) to crude ones (by compressing it and comparing the size of the original bytestream vs. the compressed - a truly random byte stream should not be compressible and hence the uncompressed and compressed bytestreams should be nearly identical in size).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-823 (Use of Out-of-range Pointer Offset)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "ddmc_optionD": "It needs to be determined if the output of a cryptographic primitive is lacking entropy, which is one clear sign that something went wrong with the crypto implementation. There exist many methods of measuring the entropy of a bytestream, from sophisticated ones (like calculating Shannon's entropy of a sequence of characters) to crude ones (by compressing it and comparing the size of the original bytestream vs. the compressed - a truly random byte stream should not be compressible and hence the uncompressed and compressed bytestreams should be nearly identical in size).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-823 (Use of Out-of-range Pointer Offset)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nD.  It needs to be determined if the output of a cryptographic primitive is lacking entropy, which is one clear sign that something went wrong with the crypto implementation. There exist many methods of measuring the entropy of a bytestream, from sophisticated ones (like calculating Shannon's entropy of a sequence of characters) to crude ones (by compressing it and comparing the size of the original bytestream vs. the compressed - a truly random byte stream should not be compressible and hence the uncompressed and compressed bytestreams should be nearly identical in size).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Credential API Hooking (T1056.004)?\nA.  Restoring a file for an entity to access.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential API Hooking (T1056.004)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionC": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Preventing execution of any address in a memory region other than the code segment.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Credential API Hooking (T1056.004)?\nA.  Restoring a file for an entity to access.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Change Default File Association (T1546.001)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Change Default File Association (T1546.001)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Change Default File Association (T1546.001)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nB.  Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\nC.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "ddmc_optionA": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)",
      "ddmc_optionB": "Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.",
      "ddmc_optionC": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "ddmc_optionD": "Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nB.  Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\nC.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Log Injection-Tampering-Forging (CAPEC-93)?\nA.  Carefully control access to physical log files.\nB.  Ensure proper HTML output encoding before writing user supplied data to the page\nC.  Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).\nD.  Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Log Injection-Tampering-Forging (CAPEC-93)",
      "ddmc_optionA": "Carefully control access to physical log files.",
      "ddmc_optionB": "Ensure proper HTML output encoding before writing user supplied data to the page",
      "ddmc_optionC": "Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).",
      "ddmc_optionD": "Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Carefully control access to physical log files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Log Injection-Tampering-Forging (CAPEC-93)?\nA.  Carefully control access to physical log files.\nB.  Ensure proper HTML output encoding before writing user supplied data to the page\nC.  Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).\nD.  Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Restricting network traffic originating from any location.\nD.  Restoring the data in a database.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Restoring the data in a database.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Restricting network traffic originating from any location.\nD.  Restoring the data in a database.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Choose a language that provides automatic memory management.\nB.  Merge common functionality into a single function and then call that function from across the entire code base.\nC.  Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-656 (Reliance on Security Through Obscurity)",
      "ddmc_optionA": "Choose a language that provides automatic memory management.",
      "ddmc_optionB": "Merge common functionality into a single function and then call that function from across the entire code base.",
      "ddmc_optionC": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Choose a language that provides automatic memory management.\nB.  Merge common functionality into a single function and then call that function from across the entire code base.\nC.  Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Process Discovery (T1057)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Restoring an software configuration.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Process Discovery (T1057)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Process Discovery (T1057)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Restoring an software configuration.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Return Inside Finally Block (CWE-584)?\nA.  Software tools are capable of finding ADSs on your system.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).\nD.  Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Return Inside Finally Block (CWE-584)",
      "ddmc_optionA": "Software tools are capable of finding ADSs on your system.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).",
      "ddmc_optionD": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.",
      "prompts": [],
      "instruction": "What is a method to mitigate Return Inside Finally Block (CWE-584)?\nA.  Software tools are capable of finding ADSs on your system.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).\nD.  Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1055.002 (Portable Executable Injection)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1055.002 (Portable Executable Injection)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1055.002 (Portable Executable Injection)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Validation of Integrity Check Value (CWE-354)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.\nC.  Restrict server socket address to known local addresses.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Validation of Integrity Check Value (CWE-354)",
      "ddmc_optionA": "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.",
      "ddmc_optionB": "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.",
      "ddmc_optionC": "Restrict server socket address to known local addresses.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Validation of Integrity Check Value (CWE-354)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.\nC.  Restrict server socket address to known local addresses.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Modifying an application's configuration to reduce its attack surface.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmc_optionA": "Modifying an application's configuration to reduce its attack surface.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Modifying an application's configuration to reduce its attack surface.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remanent Data Readable after Memory Erase (CWE-1330)?\nA.  Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.\nB.  Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.\nC.  Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\nD.  Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remanent Data Readable after Memory Erase (CWE-1330)",
      "ddmc_optionA": "Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.",
      "ddmc_optionB": "Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.",
      "ddmc_optionC": "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
      "ddmc_optionD": "Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remanent Data Readable after Memory Erase (CWE-1330)?\nA.  Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.\nB.  Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.\nC.  Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\nD.  Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1574.012 (COR_PROFILER)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Using kernel-level capabilities to isolate processes.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.012 (COR_PROFILER)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1574.012 (COR_PROFILER)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Using kernel-level capabilities to isolate processes.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.001 (Launch Agent)",
      "ddmc_optionA": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restricting a user account's access to resources.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restricting a user account's access to resources.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect At (T1053.002)?\nA.  Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the <code>atq</code> command and ensure IP addresses stored in the <code>SSH_CONNECTION</code> and <code>SSH_CLIENT</code> variables, machines that created the jobs, are trusted hosts. All at jobs are stored in <code>/var/spool/cron/atjobs/</code>. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns, rowland linux at 2019)\nB.  Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)\nC.  If infrastructure or patterns in malware have been previously identified, internet scanning may uncover when an adversary has staged malware to make it accessible for targeting. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle, such as User Execution or Ingress Tool Transfer.\nD.  Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "At (T1053.002)",
      "ddmc_optionA": "Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the <code>atq</code> command and ensure IP addresses stored in the <code>SSH_CONNECTION</code> and <code>SSH_CLIENT</code> variables, machines that created the jobs, are trusted hosts. All at jobs are stored in <code>/var/spool/cron/atjobs/</code>. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns, rowland linux at 2019)",
      "ddmc_optionB": "Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)",
      "ddmc_optionC": "If infrastructure or patterns in malware have been previously identified, internet scanning may uncover when an adversary has staged malware to make it accessible for targeting. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle, such as User Execution or Ingress Tool Transfer.",
      "ddmc_optionD": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the <code>atq</code> command and ensure IP addresses stored in the <code>SSH_CONNECTION</code> and <code>SSH_CLIENT</code> variables, machines that created the jobs, are trusted hosts. All at jobs are stored in <code>/var/spool/cron/atjobs/</code>. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns, rowland linux at 2019)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect At (T1053.002)?\nA.  Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the <code>atq</code> command and ensure IP addresses stored in the <code>SSH_CONNECTION</code> and <code>SSH_CLIENT</code> variables, machines that created the jobs, are trusted hosts. All at jobs are stored in <code>/var/spool/cron/atjobs/</code>. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns, rowland linux at 2019)\nB.  Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)\nC.  If infrastructure or patterns in malware have been previously identified, internet scanning may uncover when an adversary has staged malware to make it accessible for targeting. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle, such as User Execution or Ingress Tool Transfer.\nD.  Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restricting network traffic originating from any location.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restricting network traffic originating from any location.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unused/Unsupported Cloud Regions (T1535)?\nA.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unused/Unsupported Cloud Regions (T1535)",
      "ddmc_optionA": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unused/Unsupported Cloud Regions (T1535)?\nA.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Process eviction techniques terminate or remove running process.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "AppInit DLLs (T1546.010)",
      "ddmc_optionA": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Process eviction techniques terminate or remove running process.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)?\nA.  Do not store sensitive information in files which may be misinterpreted.\nB.  Prevention schemes mirror that of hard-coded password storage.\nC.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nD.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)",
      "ddmc_optionA": "Do not store sensitive information in files which may be misinterpreted.",
      "ddmc_optionB": "Prevention schemes mirror that of hard-coded password storage.",
      "ddmc_optionC": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
      "ddmc_optionD": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)?\nA.  Do not store sensitive information in files which may be misinterpreted.\nB.  Prevention schemes mirror that of hard-coded password storage.\nC.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nD.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Default Cryptographic Key (CWE-1394)?\nA.  Always set the secure attribute when the cookie should sent via HTTPS only.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nD.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Cryptographic Key (CWE-1394)",
      "ddmc_optionA": "Always set the secure attribute when the cookie should sent via HTTPS only.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.",
      "ddmc_optionD": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Default Cryptographic Key (CWE-1394)?\nA.  Always set the secure attribute when the cookie should sent via HTTPS only.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nD.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Build Image on Host (T1612)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Build Image on Host (T1612)",
      "ddmc_optionA": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionD": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "prompts": [],
      "instruction": "What is a method to mitigate Build Image on Host (T1612)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CMSTP (T1218.003)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring a file for an entity to access.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "What is a method to mitigate CMSTP (T1218.003)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring a file for an entity to access.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Exploit Public-Facing Application (T1190)?\nA.  Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques. Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  Consider monitoring for traffic to known anonymity networks (such as Tor).(Citations: University of Birmingham C2)\nC.  Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.\nD.  Where applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Exploit Public-Facing Application (T1190)",
      "ddmc_optionA": "Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques. Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.",
      "ddmc_optionB": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  Consider monitoring for traffic to known anonymity networks (such as Tor).(Citations: University of Birmingham C2)",
      "ddmc_optionC": "Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.",
      "ddmc_optionD": "Where applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Exploit Public-Facing Application (T1190)?\nA.  Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques. Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  Consider monitoring for traffic to known anonymity networks (such as Tor).(Citations: University of Birmingham C2)\nC.  Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.\nD.  Where applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Struts: Unused Validation Form (CWE-107)?\nA.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nB.  Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\nD.  Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Struts: Unused Validation Form (CWE-107)",
      "ddmc_optionA": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
      "ddmc_optionB": "Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.",
      "ddmc_optionC": "Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
      "ddmc_optionD": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
      "prompts": [],
      "instruction": "What is a method to mitigate Struts: Unused Validation Form (CWE-107)?\nA.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nB.  Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\nD.  Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Agent (T1543.001)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring a file for an entity to access.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate SQL Injection (CAPEC-66)?\nA.  Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.\nB.  Use strong access control such as two factor access control for administrative access to the switch\nC.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nD.  Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "SQL Injection (CAPEC-66)",
      "ddmc_optionA": "Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.",
      "ddmc_optionB": "Use strong access control such as two factor access control for administrative access to the switch",
      "ddmc_optionC": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
      "ddmc_optionD": "Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
      "prompts": [],
      "instruction": "How can you mitigate SQL Injection (CAPEC-66)?\nA.  Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.\nB.  Use strong access control such as two factor access control for administrative access to the switch\nC.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nD.  Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Portable Executable Injection (T1055.002)?\nA.  Restoring an software configuration.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate Portable Executable Injection (T1055.002)?\nA.  Restoring an software configuration.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-426 (Untrusted Search Path)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-426 (Untrusted Search Path)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionC": "Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-426 (Untrusted Search Path)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Direct Network Flood (T1498.001)?\nA.  Restoring the data in a database.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Network Flood (T1498.001)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Direct Network Flood (T1498.001)?\nA.  Restoring the data in a database.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Cryptographically verifying firmware integrity.\nC.  Employing file hash comparisons to detect known malware.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Cryptographically verifying firmware integrity.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Cryptographically verifying firmware integrity.\nC.  Employing file hash comparisons to detect known malware.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1498 (Network Denial of Service)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1498 (Network Denial of Service)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "How can you mitigate T1498 (Network Denial of Service)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)?\nA.  Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means\nB.  Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.\nC.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\nD.  Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)",
      "ddmc_optionA": "Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means",
      "ddmc_optionB": "Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.",
      "ddmc_optionC": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "ddmc_optionD": "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)?\nA.  Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means\nB.  Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.\nC.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\nD.  Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1082 (System Information Discovery)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Employing file hash comparisons to detect known malware.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1082 (System Information Discovery)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1082 (System Information Discovery)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Employing file hash comparisons to detect known malware.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Web Cookies (T1606.001)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Cookies (T1606.001)",
      "ddmc_optionA": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "How can you mitigate Web Cookies (T1606.001)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Container Orchestration Job (T1053.007)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Container Orchestration Job (T1053.007)",
      "ddmc_optionA": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Container Orchestration Job (T1053.007)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Serialized Data External Linking (CAPEC-201)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Configure the serialized data processor to only retrieve external entities from trusted sources.\nC.  Implementation: The victim should configure the browser to minimize active content from untrusted sources.\nD.  Enable at least AES Kerberos encryption for tickets.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serialized Data External Linking (CAPEC-201)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Configure the serialized data processor to only retrieve external entities from trusted sources.",
      "ddmc_optionC": "Implementation: The victim should configure the browser to minimize active content from untrusted sources.",
      "ddmc_optionD": "Enable at least AES Kerberos encryption for tickets.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configure the serialized data processor to only retrieve external entities from trusted sources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Serialized Data External Linking (CAPEC-201)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Configure the serialized data processor to only retrieve external entities from trusted sources.\nC.  Implementation: The victim should configure the browser to minimize active content from untrusted sources.\nD.  Enable at least AES Kerberos encryption for tickets.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Evil Twin Wi-Fi Attack (CAPEC-615)?\nA.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\nB.  Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).\nC.  Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.\nD.  Design: Generate and validate MAC for cookies\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Evil Twin Wi-Fi Attack (CAPEC-615)",
      "ddmc_optionA": "Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.",
      "ddmc_optionB": "Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).",
      "ddmc_optionC": "Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.",
      "ddmc_optionD": "Design: Generate and validate MAC for cookies",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.",
      "prompts": [],
      "instruction": "How can you mitigate Evil Twin Wi-Fi Attack (CAPEC-615)?\nA.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\nB.  Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).\nC.  Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.\nD.  Design: Generate and validate MAC for cookies\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Office Test (T1137.002)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Office Test (T1137.002)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "How can you mitigate Office Test (T1137.002)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1110.003 (Password Spraying)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1110.003 (Password Spraying)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "How can you mitigate T1110.003 (Password Spraying)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Return of Stack Variable Address (CWE-562)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Return of Stack Variable Address (CWE-562)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionD": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Return of Stack Variable Address (CWE-562)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1207 (Rogue Domain Controller)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1207 (Rogue Domain Controller)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1207 (Rogue Domain Controller)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-583 (finalize() Method Declared Public)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-583 (finalize() Method Declared Public)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-583 (finalize() Method Declared Public)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restoring a file for an entity to access.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restoring a file for an entity to access.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1176 (Browser Extensions)",
      "ddmc_optionA": "System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.",
      "ddmc_optionB": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Software inventorying identifies and records the software items in the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate RC Scripts (T1037.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Protect sensitive information with strong encryption.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "RC Scripts (T1037.004)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate RC Scripts (T1037.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Protect sensitive information with strong encryption.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Code Repositories (T1213.003)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Code Repositories (T1213.003)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Code Repositories (T1213.003)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1110.004 (Credential Stuffing)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1110.004 (Credential Stuffing)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionD": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1110.004 (Credential Stuffing)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Email Forwarding Rule (T1114.003)?\nA.  Restoring an software configuration.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Email Forwarding Rule (T1114.003)?\nA.  Restoring an software configuration.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Assignment to Variable without Use (CWE-563)?\nA.  For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.\nB.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nC.  Remove unused variables from the code.\nD.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Assignment to Variable without Use (CWE-563)",
      "ddmc_optionA": "For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.",
      "ddmc_optionB": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionC": "Remove unused variables from the code.",
      "ddmc_optionD": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Remove unused variables from the code.",
      "prompts": [],
      "instruction": "What is a method to mitigate Assignment to Variable without Use (CWE-563)?\nA.  For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.\nB.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nC.  Remove unused variables from the code.\nD.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1568 (Dynamic Resolution)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Traffic Signaling (T1205)?\nA.  A Credential created for the purpose of deceiving an adversary.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Traffic Signaling (T1205)",
      "ddmc_optionA": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Traffic Signaling (T1205)?\nA.  A Credential created for the purpose of deceiving an adversary.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Rootkit (T1014)?\nA.  Replacing old software on a computer system component.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Restoring software to a host.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Replacing old software on a computer system component.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Restoring software to a host.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring software to a host.",
      "prompts": [],
      "instruction": "How can you mitigate Rootkit (T1014)?\nA.  Replacing old software on a computer system component.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Restoring software to a host.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restricting network traffic originating from any location.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restricting network traffic originating from any location.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nA.  Restoring a file for an entity to access.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Detects processes that modify, change, or replace their own code at runtime.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1140 (Deobfuscate/Decode Files or Information)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring a file for an entity to access.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nA.  Restoring a file for an entity to access.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Detects processes that modify, change, or replace their own code at runtime.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use of Inherently Dangerous Function (CWE-242)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Inherently Dangerous Function (CWE-242)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use of Inherently Dangerous Function (CWE-242)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Write Handling in Limited-write Non-Volatile Memories (CWE-1246)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Include secure wear leveling algorithms and ensure they may not be bypassed.\nC.  Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.\nD.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Write Handling in Limited-write Non-Volatile Memories (CWE-1246)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
      "ddmc_optionC": "Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.",
      "ddmc_optionD": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Write Handling in Limited-write Non-Volatile Memories (CWE-1246)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Include secure wear leveling algorithms and ensure they may not be bypassed.\nC.  Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.\nD.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Removing Important Client Functionality (CAPEC-207)?\nA.  Do not reuse local administrator account credentials across systems.\nB.  Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.\nC.  The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.\nD.  Design: Use obfuscation and other techniques to prevent reverse engineering the client code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Removing Important Client Functionality (CAPEC-207)",
      "ddmc_optionA": "Do not reuse local administrator account credentials across systems.",
      "ddmc_optionB": "Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.",
      "ddmc_optionC": "The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.",
      "ddmc_optionD": "Design: Use obfuscation and other techniques to prevent reverse engineering the client code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Use obfuscation and other techniques to prevent reverse engineering the client code.",
      "prompts": [],
      "instruction": "What is a method to mitigate Removing Important Client Functionality (CAPEC-207)?\nA.  Do not reuse local administrator account credentials across systems.\nB.  Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.\nC.  The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.\nD.  Design: Use obfuscation and other techniques to prevent reverse engineering the client code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate ICMP Echo Request Ping (CAPEC-285)?\nA.  Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Patch installed applications as soon as new updates become available.\nD.  Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "ICMP Echo Request Ping (CAPEC-285)",
      "ddmc_optionA": "Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "Patch installed applications as soon as new updates become available.",
      "ddmc_optionD": "Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.",
      "prompts": [],
      "instruction": "How can you mitigate ICMP Echo Request Ping (CAPEC-285)?\nA.  Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Patch installed applications as soon as new updates become available.\nD.  Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-477 (Signature Spoofing by Mixing Signed and Unsigned Content)?\nA.  Monitor system and domain logs for abnormal credential access.\nB.  Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.\nC.  When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.\nD.  Only download open-source software from reputable hosting sites or package managers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-477 (Signature Spoofing by Mixing Signed and Unsigned Content)",
      "ddmc_optionA": "Monitor system and domain logs for abnormal credential access.",
      "ddmc_optionB": "Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.",
      "ddmc_optionC": "When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.",
      "ddmc_optionD": "Only download open-source software from reputable hosting sites or package managers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-477 (Signature Spoofing by Mixing Signed and Unsigned Content)?\nA.  Monitor system and domain logs for abnormal credential access.\nB.  Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.\nC.  When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.\nD.  Only download open-source software from reputable hosting sites or package managers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-638 (Not Using Complete Mediation)?\nA.  Use spyware detection and removal software.\nB.  Use PHP 4 or later.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-638 (Not Using Complete Mediation)",
      "ddmc_optionA": "Use spyware detection and removal software.",
      "ddmc_optionB": "Use PHP 4 or later.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use PHP 4 or later.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-638 (Not Using Complete Mediation)?\nA.  Use spyware detection and removal software.\nB.  Use PHP 4 or later.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Web Portal Capture (T1056.003)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Portal Capture (T1056.003)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionD": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "What is a method to mitigate Web Portal Capture (T1056.003)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Check for Unusual or Exceptional Conditions (CWE-754)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Check for Unusual or Exceptional Conditions (CWE-754)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.",
      "ddmc_optionD": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Check for Unusual or Exceptional Conditions (CWE-754)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Resource Injection (CAPEC-240)?\nA.  Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\nB.  Pick a robust implementation of the data parser.\nC.  Perform input validation for all content.\nD.  File extensions should be checked to see if non-visible characters are being included.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Resource Injection (CAPEC-240)",
      "ddmc_optionA": "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
      "ddmc_optionB": "Pick a robust implementation of the data parser.",
      "ddmc_optionC": "Perform input validation for all content.",
      "ddmc_optionD": "File extensions should be checked to see if non-visible characters are being included.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform input validation for all content.",
      "prompts": [],
      "instruction": "What is a method to mitigate Resource Injection (CAPEC-240)?\nA.  Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\nB.  Pick a robust implementation of the data parser.\nC.  Perform input validation for all content.\nD.  File extensions should be checked to see if non-visible characters are being included.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Monitoring the existence of or changes to Domain User Accounts.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Monitoring the existence of or changes to Domain User Accounts.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Monitoring the existence of or changes to Domain User Accounts.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1566.003 (Spearphishing via Service)?\nA.  Analyzing the reputation of an identifier.\nB.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1566.003 (Spearphishing via Service)",
      "ddmc_optionA": "Analyzing the reputation of an identifier.",
      "ddmc_optionB": "Passive physical link mapping only listens to network traffic as a means to map the physical layer.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Analyzing the reputation of an identifier.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1566.003 (Spearphishing via Service)?\nA.  Analyzing the reputation of an identifier.\nB.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Office Application Startup (T1137)?\nA.  File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.\nB.  Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)\nC.  Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citations: CrowdStrike Outlook Forms, Outlook Today Home Page, Microsoft Detect Outlook Forms, SensePost NotRuler)\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Office Application Startup (T1137)",
      "ddmc_optionA": "File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.",
      "ddmc_optionB": "Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)",
      "ddmc_optionC": "Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citations: CrowdStrike Outlook Forms, Outlook Today Home Page, Microsoft Detect Outlook Forms, SensePost NotRuler)",
      "ddmc_optionD": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citations: CrowdStrike Outlook Forms, Outlook Today Home Page, Microsoft Detect Outlook Forms, SensePost NotRuler)",
      "prompts": [],
      "instruction": "How can you detect Office Application Startup (T1137)?\nA.  File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.\nB.  Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)\nC.  Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citations: CrowdStrike Outlook Forms, Outlook Today Home Page, Microsoft Detect Outlook Forms, SensePost NotRuler)\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Location Discovery (CAPEC-694)?\nA.  To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.\nB.  Utilize browsers that can warn users if URLs contain characters from different character sets.\nC.  Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.\nD.  Have a large pool of backup IPs built into the application and support proxy capability in the application.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Location Discovery (CAPEC-694)",
      "ddmc_optionA": "To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.",
      "ddmc_optionB": "Utilize browsers that can warn users if URLs contain characters from different character sets.",
      "ddmc_optionC": "Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.",
      "ddmc_optionD": "Have a large pool of backup IPs built into the application and support proxy capability in the application.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Location Discovery (CAPEC-694)?\nA.  To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.\nB.  Utilize browsers that can warn users if URLs contain characters from different character sets.\nC.  Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.\nD.  Have a large pool of backup IPs built into the application and support proxy capability in the application.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Encrypting a file using a cryptographic key.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Encrypting a file using a cryptographic key.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Critical Data Element Declared Public (CWE-766)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Critical Data Element Declared Public (CWE-766)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionC": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Critical Data Element Declared Public (CWE-766)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Export of Android Application Components (CWE-926)?\nA.  The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  Limit Content Provider permissions (read/write) as appropriate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmc_optionA": "The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.",
      "ddmc_optionB": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionC": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionD": "Limit Content Provider permissions (read/write) as appropriate.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Limit Content Provider permissions (read/write) as appropriate.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Export of Android Application Components (CWE-926)?\nA.  The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  Limit Content Provider permissions (read/write) as appropriate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-499 (Serializable Class Containing Sensitive Data)?\nA.  Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.\nB.  Make sure to prevent serialization of your objects.\nC.  Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-499 (Serializable Class Containing Sensitive Data)",
      "ddmc_optionA": "Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.",
      "ddmc_optionB": "Make sure to prevent serialization of your objects.",
      "ddmc_optionC": "Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).",
      "ddmc_optionD": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Make sure to prevent serialization of your objects.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-499 (Serializable Class Containing Sensitive Data)?\nA.  Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.\nB.  Make sure to prevent serialization of your objects.\nC.  Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.\nB.  Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.\nC.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nD.  Limit the amount of resources that are accessible to unprivileged users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Alternative Execution Due to Deceptive Filenames (CAPEC-635)",
      "ddmc_optionA": "Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.",
      "ddmc_optionB": "Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.",
      "ddmc_optionC": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionD": "Limit the amount of resources that are accessible to unprivileged users.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.\nB.  Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.\nC.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nD.  Limit the amount of resources that are accessible to unprivileged users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]\nC.  Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Input Terminators (CWE-147)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]",
      "ddmc_optionC": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]\nC.  Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect BlueSmacking (CAPEC-666)?\nA.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nB.  Too many exceptions generated by the application as a result of malformed queries\nC.  Software being run on a system matches a file signature found in a malware database\nD.  Performance is degraded or halted by incoming L2CAP packets.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "BlueSmacking (CAPEC-666)",
      "ddmc_optionA": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "ddmc_optionB": "Too many exceptions generated by the application as a result of malformed queries",
      "ddmc_optionC": "Software being run on a system matches a file signature found in a malware database",
      "ddmc_optionD": "Performance is degraded or halted by incoming L2CAP packets.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Performance is degraded or halted by incoming L2CAP packets.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect BlueSmacking (CAPEC-666)?\nA.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nB.  Too many exceptions generated by the application as a result of malformed queries\nC.  Software being run on a system matches a file signature found in a malware database\nD.  Performance is degraded or halted by incoming L2CAP packets.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate clone() Method Without super.clone() (CWE-580)?\nA.  In some cases, you can eliminate the clone method altogether and use copy constructors.\nB.  Remove debug log files before deploying the application into production.\nC.  Protect log files against unauthorized read/write.\nD.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "clone() Method Without super.clone() (CWE-580)",
      "ddmc_optionA": "In some cases, you can eliminate the clone method altogether and use copy constructors.",
      "ddmc_optionB": "Remove debug log files before deploying the application into production.",
      "ddmc_optionC": "Protect log files against unauthorized read/write.",
      "ddmc_optionD": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "In some cases, you can eliminate the clone method altogether and use copy constructors.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate clone() Method Without super.clone() (CWE-580)?\nA.  In some cases, you can eliminate the clone method altogether and use copy constructors.\nB.  Remove debug log files before deploying the application into production.\nC.  Protect log files against unauthorized read/write.\nD.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.\nB.  Always use explicit block delimitation and use static-analysis technologies to enforce this practice.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Support for Integrity Check (CWE-353)",
      "ddmc_optionA": "Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.",
      "ddmc_optionB": "Always use explicit block delimitation and use static-analysis technologies to enforce this practice.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.",
      "prompts": [],
      "instruction": "How can you mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.\nB.  Always use explicit block delimitation and use static-analysis technologies to enforce this practice.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Network Topology (T1590.004)?\nA.  Once adversaries have provisioned software on a compromised server (ex: for use as a command and control server), internet scans may reveal servers that adversaries have compromised. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.(Citations: ThreatConnect Infrastructure Dec 2020, Mandiant SCANdalous Jul 2020, Koczwara Beacon Hunting Sep 2021)\nB.  Consider monitoring for anomalous changes to domain registrant information and/or domain resolution information that may indicate the compromise of a domain. Efforts may need to be tailored to specific domains of interest as benign registration and resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Network Topology (T1590.004)",
      "ddmc_optionA": "Once adversaries have provisioned software on a compromised server (ex: for use as a command and control server), internet scans may reveal servers that adversaries have compromised. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.(Citations: ThreatConnect Infrastructure Dec 2020, Mandiant SCANdalous Jul 2020, Koczwara Beacon Hunting Sep 2021)",
      "ddmc_optionB": "Consider monitoring for anomalous changes to domain registrant information and/or domain resolution information that may indicate the compromise of a domain. Efforts may need to be tailored to specific domains of interest as benign registration and resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.",
      "ddmc_optionC": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "How can you detect Network Topology (T1590.004)?\nA.  Once adversaries have provisioned software on a compromised server (ex: for use as a command and control server), internet scans may reveal servers that adversaries have compromised. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.(Citations: ThreatConnect Infrastructure Dec 2020, Mandiant SCANdalous Jul 2020, Koczwara Beacon Hunting Sep 2021)\nB.  Consider monitoring for anomalous changes to domain registrant information and/or domain resolution information that may indicate the compromise of a domain. Efforts may need to be tailored to specific domains of interest as benign registration and resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Inhibit System Recovery (T1490)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Inhibit System Recovery (T1490)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "prompts": [],
      "instruction": "How can you mitigate Inhibit System Recovery (T1490)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-651 (Eavesdropping)?\nA.  Use secure functions not vulnerable to buffer overflow.\nB.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nC.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nD.  Design: Validate all log data before it is output\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-651 (Eavesdropping)",
      "ddmc_optionA": "Use secure functions not vulnerable to buffer overflow.",
      "ddmc_optionB": "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
      "ddmc_optionC": "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.",
      "ddmc_optionD": "Design: Validate all log data before it is output",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-651 (Eavesdropping)?\nA.  Use secure functions not vulnerable to buffer overflow.\nB.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nC.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nD.  Design: Validate all log data before it is output\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Session Hijacking (CAPEC-593)?\nA.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nB.  Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.\nC.  Do not reuse local administrator account credentials across systems.\nD.  Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Session Hijacking (CAPEC-593)",
      "ddmc_optionA": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "ddmc_optionB": "Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.",
      "ddmc_optionC": "Do not reuse local administrator account credentials across systems.",
      "ddmc_optionD": "Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.",
      "prompts": [],
      "instruction": "How can you mitigate Session Hijacking (CAPEC-593)?\nA.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nB.  Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.\nC.  Do not reuse local administrator account credentials across systems.\nD.  Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Traffic Signaling (T1205)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Restoring software to a host.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Traffic Signaling (T1205)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Restoring software to a host.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Traffic Signaling (T1205)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Restoring software to a host.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1505.005 (Terminal Services DLL)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nC.  Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)\nD.  Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1505.005 (Terminal Services DLL)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "ddmc_optionC": "Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)",
      "ddmc_optionD": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citations: University of Birmingham C2)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "prompts": [],
      "instruction": "How can you detect T1505.005 (Terminal Services DLL)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nC.  Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)\nD.  Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Application Window Discovery (T1010)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application Window Discovery (T1010)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "prompts": [],
      "instruction": "How can you mitigate Application Window Discovery (T1010)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1547.008 (LSASS Driver)?\nA.  Restoring software to a host.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.008 (LSASS Driver)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionC": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring software to a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1547.008 (LSASS Driver)?\nA.  Restoring software to a host.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1091 (Replication Through Removable Media)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1091 (Replication Through Removable Media)",
      "ddmc_optionA": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1091 (Replication Through Removable Media)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Dylib Hijacking (T1574.004)?\nA.  Terminating a running application process on a computer system.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Terminating a running application process on a computer system.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate Dylib Hijacking (T1574.004)?\nA.  Terminating a running application process on a computer system.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Security Version Number Mutable to Older Versions (CWE-1328)",
      "ddmc_optionA": "Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.",
      "prompts": [],
      "instruction": "What is a method to detect Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Ptrace System Calls (T1055.008)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Ptrace System Calls (T1055.008)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "How can you mitigate Ptrace System Calls (T1055.008)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)",
      "ddmc_optionA": "Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.",
      "ddmc_optionB": "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).",
      "ddmc_optionC": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "ddmc_optionD": "Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Dead Drop Resolver (T1102.001)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  Consider monitoring for traffic to known anonymity networks (such as Tor).(Citations: University of Birmingham C2)\nB.  Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nC.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\nD.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Dead Drop Resolver (T1102.001)",
      "ddmc_optionA": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  Consider monitoring for traffic to known anonymity networks (such as Tor).(Citations: University of Birmingham C2)",
      "ddmc_optionB": "Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
      "ddmc_optionC": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "What is a method to detect Dead Drop Resolver (T1102.001)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  Consider monitoring for traffic to known anonymity networks (such as Tor).(Citations: University of Birmingham C2)\nB.  Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nC.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\nD.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Create Process with Token (T1134.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Create Process with Token (T1134.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionD": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Create Process with Token (T1134.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP\nC.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nD.  When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Authorization Bypass Through User-Controlled Key (CWE-639)",
      "ddmc_optionA": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP",
      "ddmc_optionC": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
      "ddmc_optionD": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP\nC.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nD.  When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Windows Admin Shares with Stolen Credentials (CAPEC-561)",
      "ddmc_optionA": "Enforce regular patching of software.",
      "ddmc_optionB": "Design: Enforce principle of least privilege.",
      "ddmc_optionC": "Do not allow accounts to be a local administrator on more than one system.",
      "ddmc_optionD": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow accounts to be a local administrator on more than one system.",
      "prompts": [],
      "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1578.002 (Create Cloud Instance)?\nA.  The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)\nB.  Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>. These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citations: Apple Developer Doco Archive Run-Path, Wardle Dylib Hijack Vulnerable Apps, Github EmpireProject HijackScanner)\nC.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\nD.  Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1578.002 (Create Cloud Instance)",
      "ddmc_optionA": "The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)",
      "ddmc_optionB": "Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>. These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citations: Apple Developer Doco Archive Run-Path, Wardle Dylib Hijack Vulnerable Apps, Github EmpireProject HijackScanner)",
      "ddmc_optionC": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "ddmc_optionD": "Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)",
      "prompts": [],
      "instruction": "What is a method to detect T1578.002 (Create Cloud Instance)?\nA.  The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)\nB.  Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>. These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citations: Apple Developer Doco Archive Run-Path, Wardle Dylib Hijack Vulnerable Apps, Github EmpireProject HijackScanner)\nC.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\nD.  Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Service (T1102)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Fingerprinting (CAPEC-224)?\nA.  One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.\nB.  Perform validation on canonical data.\nC.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\nD.  While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Fingerprinting (CAPEC-224)",
      "ddmc_optionA": "One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.",
      "ddmc_optionB": "Perform validation on canonical data.",
      "ddmc_optionC": "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
      "ddmc_optionD": "While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.",
      "prompts": [],
      "instruction": "How can you mitigate Fingerprinting (CAPEC-224)?\nA.  One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.\nB.  Perform validation on canonical data.\nC.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\nD.  While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-684 (Incorrect Provision of Specified Functionality)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Ensure that your code strictly conforms to specifications.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-684 (Incorrect Provision of Specified Functionality)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Ensure that your code strictly conforms to specifications.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that your code strictly conforms to specifications.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-684 (Incorrect Provision of Specified Functionality)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Ensure that your code strictly conforms to specifications.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Executable Installer File Permissions Weakness (T1574.005)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Replacing old software on a computer system component.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Executable Installer File Permissions Weakness (T1574.005)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Replacing old software on a computer system component.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Replacing old software on a computer system component.",
      "prompts": [],
      "instruction": "How can you mitigate Executable Installer File Permissions Weakness (T1574.005)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Replacing old software on a computer system component.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing a call stack for return addresses which point to unexpected memory locations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Analyzing a call stack for return addresses which point to unexpected memory locations.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing a call stack for return addresses which point to unexpected memory locations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restoring the data in a database.\nC.  A Credential created for the purpose of deceiving an adversary.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restoring the data in a database.\nC.  A Credential created for the purpose of deceiving an adversary.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Archive via Utility (T1560.001)?\nA.  Replacing old software on a computer system component.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Replacing old software on a computer system component.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Archive via Utility (T1560.001)?\nA.  Replacing old software on a computer system component.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Office Test (T1137.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Office Test (T1137.002)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate Office Test (T1137.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Path Equivalence: '/./' (Single Dot Directory) (CWE-55)?\nA.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\nB.  Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Equivalence: '/./' (Single Dot Directory) (CWE-55)",
      "ddmc_optionA": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]",
      "ddmc_optionB": "Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "How can you mitigate Path Equivalence: '/./' (Single Dot Directory) (CWE-55)?\nA.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\nB.  Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Signal Handler Use of a Non-reentrant Function (CWE-479)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Signal Handler Use of a Non-reentrant Function (CWE-479)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionC": "For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Signal Handler Use of a Non-reentrant Function (CWE-479)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-668 (Key Negotiation of Bluetooth Attack (KNOB))?\nA.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Patch installed applications as soon as new updates become available.\nD.  Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-668 (Key Negotiation of Bluetooth Attack (KNOB))",
      "ddmc_optionA": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "ddmc_optionB": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
      "ddmc_optionC": "Patch installed applications as soon as new updates become available.",
      "ddmc_optionD": "Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-668 (Key Negotiation of Bluetooth Attack (KNOB))?\nA.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Patch installed applications as soon as new updates become available.\nD.  Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1570 (Lateral Tool Transfer)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting network traffic originating from any location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1570 (Lateral Tool Transfer)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1570 (Lateral Tool Transfer)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting network traffic originating from any location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deployment of Wrong Handler (CWE-430)?\nA.  Protect the administrative/restricted functionality with a strong authentication mechanism.\nB.  Perform a type check before interpreting an object.\nC.  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\nD.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deployment of Wrong Handler (CWE-430)",
      "ddmc_optionA": "Protect the administrative/restricted functionality with a strong authentication mechanism.",
      "ddmc_optionB": "Perform a type check before interpreting an object.",
      "ddmc_optionC": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.",
      "ddmc_optionD": "Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Perform a type check before interpreting an object.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deployment of Wrong Handler (CWE-430)?\nA.  Protect the administrative/restricted functionality with a strong authentication mechanism.\nB.  Perform a type check before interpreting an object.\nC.  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\nD.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cloud Service Dashboard (T1538)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  The process of temporarily disabling user accounts on a system or domain.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Service Dashboard (T1538)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Cloud Service Dashboard (T1538)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  The process of temporarily disabling user accounts on a system or domain.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-166 (Improper Handling of Missing Special Element)?\nA.  The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\nB.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-166 (Improper Handling of Missing Special Element)",
      "ddmc_optionA": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.",
      "ddmc_optionB": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-166 (Improper Handling of Missing Special Element)?\nA.  The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\nB.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Removing Important Client Functionality (CAPEC-207)?\nA.  Design: Ship client-side application with integrity checks (code signing) when possible.\nB.  Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Removing Important Client Functionality (CAPEC-207)",
      "ddmc_optionA": "Design: Ship client-side application with integrity checks (code signing) when possible.",
      "ddmc_optionB": "Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.",
      "ddmc_optionC": "Use secure functions not vulnerable to buffer overflow.",
      "ddmc_optionD": "Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Design: Ship client-side application with integrity checks (code signing) when possible.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Removing Important Client Functionality (CAPEC-207)?\nA.  Design: Ship client-side application with integrity checks (code signing) when possible.\nB.  Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Password Policy Discovery (T1201)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Password Policy Discovery (T1201)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Password Policy Discovery (T1201)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Restoring software to a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Restoring software to a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Restoring software to a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Event Triggered Execution (T1546)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Event Triggered Execution (T1546)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform regular software updates to mitigate exploitation risk.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Event Triggered Execution (T1546)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restricting network traffic originating from any location.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restricting network traffic originating from any location.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Indicator Blocking (T1562.006)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Indicator Blocking (T1562.006)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Indicator Blocking (T1562.006)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Restoring an entity's access to resources.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Port Monitors (T1547.010)?\nA.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nB.  Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Port Monitors (T1547.010)",
      "ddmc_optionA": "Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)",
      "ddmc_optionB": "Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.",
      "ddmc_optionC": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)",
      "prompts": [],
      "instruction": "How can you detect Port Monitors (T1547.010)?\nA.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nB.  Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Password in Configuration File (CWE-260)?\nA.  Avoid storing passwords in easily accessible locations.\nB.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nC.  Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Password in Configuration File (CWE-260)",
      "ddmc_optionA": "Avoid storing passwords in easily accessible locations.",
      "ddmc_optionB": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_optionC": "Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Avoid storing passwords in easily accessible locations.",
      "prompts": [],
      "instruction": "What is a method to mitigate Password in Configuration File (CWE-260)?\nA.  Avoid storing passwords in easily accessible locations.\nB.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nC.  Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Schema Poisoning (CAPEC-271)",
      "ddmc_optionA": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "ddmc_optionB": "Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.",
      "ddmc_optionC": "Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.",
      "ddmc_optionD": "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "prompts": [],
      "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking DNS queries that are deceptively similar to legitimate domain names.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Blocking DNS queries that are deceptively similar to legitimate domain names.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Software inventorying identifies and records the software items in the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking DNS queries that are deceptively similar to legitimate domain names.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1612 (Build Image on Host)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1612 (Build Image on Host)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "prompts": [],
      "instruction": "How can you mitigate T1612 (Build Image on Host)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restricting a user account's access to resources.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Operating system level mechanisms to prevent abusive input device exploitation.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Operating system level mechanisms to prevent abusive input device exploitation.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restricting a user account's access to resources.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Operating system level mechanisms to prevent abusive input device exploitation.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Contradictory Destinations in Traffic Routing Schemes (CAPEC-481)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nC.  Implementation: Scan dynamically generated content against validation specification\nD.  Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Contradictory Destinations in Traffic Routing Schemes (CAPEC-481)",
      "ddmc_optionA": "Minimize error/response output to only what is necessary for functional use or corrective language.",
      "ddmc_optionB": "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
      "ddmc_optionC": "Implementation: Scan dynamically generated content against validation specification",
      "ddmc_optionD": "Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.",
      "prompts": [],
      "instruction": "What is a method to mitigate Contradictory Destinations in Traffic Routing Schemes (CAPEC-481)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nC.  Implementation: Scan dynamically generated content against validation specification\nD.  Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Code Signing Certificates (T1588.003)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Code Signing Certificates (T1588.003)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate Code Signing Certificates (T1588.003)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Session tokens for specific host\nB.  Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.\nC.  Ensure that all user-supplied input is validated before use.\nD.  Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Rogue Base Station (CAPEC-617)",
      "ddmc_optionA": "Session tokens for specific host",
      "ddmc_optionB": "Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.",
      "ddmc_optionC": "Ensure that all user-supplied input is validated before use.",
      "ddmc_optionD": "Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Session tokens for specific host\nB.  Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.\nC.  Ensure that all user-supplied input is validated before use.\nD.  Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Using kernel-level capabilities to isolate processes.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Using kernel-level capabilities to isolate processes.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.\nC.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\nD.  Be mindful of your surroundings when discussing or viewing sensitive information in public areas.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Contaminate Resource (CAPEC-548)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.",
      "ddmc_optionC": "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
      "ddmc_optionD": "Be mindful of your surroundings when discussing or viewing sensitive information in public areas.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.",
      "prompts": [],
      "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.\nC.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\nD.  Be mindful of your surroundings when discussing or viewing sensitive information in public areas.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an entity's access to resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmc_optionA": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "prompts": [],
      "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an entity's access to resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Leading Special Elements (CWE-160)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.",
      "ddmc_optionD": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cross Site Tracing (CAPEC-107)?\nA.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nB.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\nC.  Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cross Site Tracing (CAPEC-107)",
      "ddmc_optionA": "Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.",
      "ddmc_optionB": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)",
      "ddmc_optionC": "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.",
      "ddmc_optionD": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cross Site Tracing (CAPEC-107)?\nA.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nB.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\nC.  Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dylib Hijacking (T1574.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Set and enforce secure password policies for accounts.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dylib Hijacking (T1574.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Set and enforce secure password policies for accounts.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1090.002 (External Proxy)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from any location.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1090.002 (External Proxy)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate T1090.002 (External Proxy)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from any location.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Restricting network traffic originating from any location.\nB.  Restoring a file for an entity to access.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Restricting network traffic originating from any location.\nB.  Restoring a file for an entity to access.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Controlling access to local computer system resources with kernel-level capabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate External Defacement (T1491.002)?\nA.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Defacement (T1491.002)",
      "ddmc_optionA": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "prompts": [],
      "instruction": "What is a method to mitigate External Defacement (T1491.002)?\nA.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Fast Flux DNS (T1568.001)?\nA.  In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.\nB.  Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\nC.  Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.\nD.  Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Fast Flux DNS (T1568.001)",
      "ddmc_optionA": "In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.",
      "ddmc_optionB": "Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
      "ddmc_optionC": "Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.",
      "ddmc_optionD": "Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.",
      "prompts": [],
      "instruction": "What is a method to detect Fast Flux DNS (T1568.001)?\nA.  In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.\nB.  Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\nC.  Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.\nD.  Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1030 (Data Transfer Size Limits)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Set and enforce secure password policies for accounts.\nD.  Block users or groups from installing or using unapproved hardware on systems, including USB devices.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1030 (Data Transfer Size Limits)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "How can you mitigate T1030 (Data Transfer Size Limits)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Set and enforce secure password policies for accounts.\nD.  Block users or groups from installing or using unapproved hardware on systems, including USB devices.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)?\nA.  Implementation: Implement email filtering solutions on mail server or on MTA, relay server.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)",
      "ddmc_optionA": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server.",
      "ddmc_optionB": "Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.",
      "ddmc_optionC": "Use secure functions not vulnerable to buffer overflow.",
      "ddmc_optionD": "Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server.",
      "prompts": [],
      "instruction": "How can you mitigate Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)?\nA.  Implementation: Implement email filtering solutions on mail server or on MTA, relay server.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Network Flood (T1498.001)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Targeted Malware (CAPEC-542)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution\nC.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nD.  Authentication attempts use credentials that have been used previously by the account in question.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Targeted Malware (CAPEC-542)",
      "ddmc_optionA": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionB": "Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution",
      "ddmc_optionC": "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
      "ddmc_optionD": "Authentication attempts use credentials that have been used previously by the account in question.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution",
      "prompts": [],
      "instruction": "How can you detect Targeted Malware (CAPEC-542)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution\nC.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nD.  Authentication attempts use credentials that have been used previously by the account in question.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis\nB.  Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis",
      "ddmc_optionB": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
      "prompts": [],
      "instruction": "What is a method to detect CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis\nB.  Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)?\nA.  Implementation: Use SSL/TLS to protect cookie in transit\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.\nD.  Ensure that all user-supplied input is validated before use.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)",
      "ddmc_optionA": "Implementation: Use SSL/TLS to protect cookie in transit",
      "ddmc_optionB": "Require SSL for update channels and implement certificate transparency based verification.",
      "ddmc_optionC": "Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.",
      "ddmc_optionD": "Ensure that all user-supplied input is validated before use.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Use SSL/TLS to protect cookie in transit",
      "prompts": [],
      "instruction": "How can you mitigate Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)?\nA.  Implementation: Use SSL/TLS to protect cookie in transit\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.\nD.  Ensure that all user-supplied input is validated before use.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Multi-Stage Channels (T1104)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Stage Channels (T1104)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Multi-Stage Channels (T1104)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Data Encoding (T1132)?\nA.  On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nC.  Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the <code>ZwSetEaFile</code> and <code>ZwQueryEaFile</code> Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]</code>) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f. The Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir /r</code> command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream</code> parameter to interact with ADSs.  (Citations: Journey into IR ZeroAccess NTFS EA, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, SpectorOps Host-Based Jul 2017, Microsoft ADS Mar 2014, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, Symantec ADS May 2009, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014)\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Data Encoding (T1132)",
      "ddmc_optionA": "On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)",
      "ddmc_optionB": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_optionC": "Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the <code>ZwSetEaFile</code> and <code>ZwQueryEaFile</code> Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]</code>) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f. The Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir /r</code> command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream</code> parameter to interact with ADSs.  (Citations: Journey into IR ZeroAccess NTFS EA, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, SpectorOps Host-Based Jul 2017, Microsoft ADS Mar 2014, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, Symantec ADS May 2009, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014)",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "What is a method to detect Data Encoding (T1132)?\nA.  On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nC.  Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the <code>ZwSetEaFile</code> and <code>ZwQueryEaFile</code> Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]</code>) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f. The Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir /r</code> command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream</code> parameter to interact with ADSs.  (Citations: Journey into IR ZeroAccess NTFS EA, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, SpectorOps Host-Based Jul 2017, Microsoft ADS Mar 2014, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, Symantec ADS May 2009, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014)\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Netsh Helper DLL (T1546.007)?\nA.  Initiating a host's reboot sequence to terminate all running processes.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmc_optionB": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "How can you mitigate Netsh Helper DLL (T1546.007)?\nA.  Initiating a host's reboot sequence to terminate all running processes.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Intent Spoof (CAPEC-502)?\nA.  Prevent unknown or malicious software from loading through using an allowlist policy.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.\nD.  Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Intent Spoof (CAPEC-502)",
      "ddmc_optionA": "Prevent unknown or malicious software from loading through using an allowlist policy.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "ddmc_optionD": "Refer to the RFCs to safely decode URL.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "prompts": [],
      "instruction": "What is a method to mitigate Intent Spoof (CAPEC-502)?\nA.  Prevent unknown or malicious software from loading through using an allowlist policy.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.\nD.  Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nA.  Encrypting a file using a cryptographic key.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Encrypting a file using a cryptographic key.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1140 (Deobfuscate/Decode Files or Information)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nA.  Encrypting a file using a cryptographic key.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Encrypting a file using a cryptographic key.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Portable Executable Injection (T1055.002)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate Portable Executable Injection (T1055.002)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1218.002 (Control Panel)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1218.002 (Control Panel)",
      "ddmc_optionA": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionB": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "How can you mitigate T1218.002 (Control Panel)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1574.006 (Dynamic Linker Hijacking)?\nA.  Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. <code>-silent</code>, <code>-ignore-reboot</code>), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. <code>VBoxManage startvm $VM --type headless</code>). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. <code>VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"</code>). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.(Citations: Shadowbunny VM Defense Evasion, Shadowbunny VM Defense Evasion)\nB.  This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for Process Injection against browser applications.\nC.  Deleting Windows event logs (via native binaries , API functions , or PowerShell ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").(Citations: Microsoft wevtutil Oct 2017, Microsoft EventLog.Clear, Microsoft Clear-EventLog)\nD.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1574.006 (Dynamic Linker Hijacking)",
      "ddmc_optionA": "Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. <code>-silent</code>, <code>-ignore-reboot</code>), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. <code>VBoxManage startvm $VM --type headless</code>). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. <code>VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"</code>). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.(Citations: Shadowbunny VM Defense Evasion, Shadowbunny VM Defense Evasion)",
      "ddmc_optionB": "This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for Process Injection against browser applications.",
      "ddmc_optionC": "Deleting Windows event logs (via native binaries , API functions , or PowerShell ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").(Citations: Microsoft wevtutil Oct 2017, Microsoft EventLog.Clear, Microsoft Clear-EventLog)",
      "ddmc_optionD": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
      "prompts": [],
      "instruction": "What is a method to detect T1574.006 (Dynamic Linker Hijacking)?\nA.  Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. <code>-silent</code>, <code>-ignore-reboot</code>), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. <code>VBoxManage startvm $VM --type headless</code>). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. <code>VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"</code>). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.(Citations: Shadowbunny VM Defense Evasion, Shadowbunny VM Defense Evasion)\nB.  This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for Process Injection against browser applications.\nC.  Deleting Windows event logs (via native binaries , API functions , or PowerShell ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").(Citations: Microsoft wevtutil Oct 2017, Microsoft EventLog.Clear, Microsoft Clear-EventLog)\nD.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Privilege Abuse (CAPEC-122)?\nA.  Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).\nB.  Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.\nC.  Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.\nD.  Implementation: Use XML parsing tools that protect against DTD attacks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Privilege Abuse (CAPEC-122)",
      "ddmc_optionA": "Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
      "ddmc_optionB": "Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.",
      "ddmc_optionC": "Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.",
      "ddmc_optionD": "Implementation: Use XML parsing tools that protect against DTD attacks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Privilege Abuse (CAPEC-122)?\nA.  Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).\nB.  Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.\nC.  Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.\nD.  Implementation: Use XML parsing tools that protect against DTD attacks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Login Hook (T1037.002)?\nA.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\nB.  Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)\nC.  `System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.\nD.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Login Hook (T1037.002)",
      "ddmc_optionA": "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.",
      "ddmc_optionB": "Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)",
      "ddmc_optionC": "`System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.",
      "ddmc_optionD": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Login Hook (T1037.002)?\nA.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\nB.  Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)\nC.  `System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.\nD.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-29 (Path Traversal: '\\..\\filename')?\nA.  Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Remove null bytes from all incoming strings.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-29 (Path Traversal: '\\..\\filename')",
      "ddmc_optionA": "Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Remove null bytes from all incoming strings.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-29 (Path Traversal: '\\..\\filename')?\nA.  Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Remove null bytes from all incoming strings.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-125 (Flooding)",
      "ddmc_optionA": "Session tokens for specific host",
      "ddmc_optionB": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
      "ddmc_optionC": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionD": "Ensure that protocols have specific limits of scale configured.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that protocols have specific limits of scale configured.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)?\nA.  Protect access control list files.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Implement the validate() method and call super.validate() within that method.\nD.  Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)",
      "ddmc_optionA": "Protect access control list files.",
      "ddmc_optionB": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
      "ddmc_optionC": "Implement the validate() method and call super.validate() within that method.",
      "ddmc_optionD": "Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Protect access control list files.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)?\nA.  Protect access control list files.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Implement the validate() method and call super.validate() within that method.\nD.  Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Restricting network traffic originating from any location.\nB.  Detects processes that modify, change, or replace their own code at runtime.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detects processes that modify, change, or replace their own code at runtime.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Restricting network traffic originating from any location.\nB.  Detects processes that modify, change, or replace their own code at runtime.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') (CWE-652)?\nA.  Remove dead code before deploying the application.\nB.  Use parameterized queries. This will help ensure separation between data plane and control plane.\nC.  Implicitly or explicitly add checks and mitigation for negative or over-shift values.\nD.  Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') (CWE-652)",
      "ddmc_optionA": "Remove dead code before deploying the application.",
      "ddmc_optionB": "Use parameterized queries. This will help ensure separation between data plane and control plane.",
      "ddmc_optionC": "Implicitly or explicitly add checks and mitigation for negative or over-shift values.",
      "ddmc_optionD": "Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use parameterized queries. This will help ensure separation between data plane and control plane.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') (CWE-652)?\nA.  Remove dead code before deploying the application.\nB.  Use parameterized queries. This will help ensure separation between data plane and control plane.\nC.  Implicitly or explicitly add checks and mitigation for negative or over-shift values.\nD.  Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Kernel Modules and Extensions (T1547.006)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Block users or groups from installing unapproved software.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Kernel Modules and Extensions (T1547.006)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Block users or groups from installing unapproved software.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Kernel Modules and Extensions (T1547.006)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Block users or groups from installing unapproved software.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nB.  Many incorrect login attempts are detected by the system.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Data is being transferred and/or removed from systems/applications within the network.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "ddmc_optionB": "Many incorrect login attempts are detected by the system.",
      "ddmc_optionC": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "ddmc_optionD": "Data is being transferred and/or removed from systems/applications within the network.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "prompts": [],
      "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nB.  Many incorrect login attempts are detected by the system.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Data is being transferred and/or removed from systems/applications within the network.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate XML Flood (CAPEC-528)?\nA.  Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption\nB.  Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.\nC.  Implementation: Customizing HTTP error codes such as 404 or 500.\nD.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "XML Flood (CAPEC-528)",
      "ddmc_optionA": "Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption",
      "ddmc_optionB": "Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.",
      "ddmc_optionC": "Implementation: Customizing HTTP error codes such as 404 or 500.",
      "ddmc_optionD": "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
      "prompts": [],
      "instruction": "How can you mitigate XML Flood (CAPEC-528)?\nA.  Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption\nB.  Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.\nC.  Implementation: Customizing HTTP error codes such as 404 or 500.\nD.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1030 (Data Transfer Size Limits)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1030 (Data Transfer Size Limits)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1030 (Data Transfer Size Limits)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Leveraging Race Conditions (CAPEC-26)?\nA.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nB.  Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.\nC.  Pay attention to concurrency problems related to the access of resources.\nD.  Ensure all input content that is delivered to client is sanitized against an acceptable content specification.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Leveraging Race Conditions (CAPEC-26)",
      "ddmc_optionA": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "ddmc_optionB": "Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.",
      "ddmc_optionC": "Pay attention to concurrency problems related to the access of resources.",
      "ddmc_optionD": "Ensure all input content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Pay attention to concurrency problems related to the access of resources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Leveraging Race Conditions (CAPEC-26)?\nA.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nB.  Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.\nC.  Pay attention to concurrency problems related to the access of resources.\nD.  Ensure all input content that is delivered to client is sanitized against an acceptable content specification.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Uninitialized Variable (CWE-457)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Uninitialized Variable (CWE-457)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Use of Uninitialized Variable (CWE-457)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Standard Encoding (T1132.002)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Encoding (T1132.002)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Standard Encoding (T1132.002)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate XQuery Injection (CAPEC-84)?\nA.  For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nB.  Design: Perform input allowlist validation on all XML input\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  Ensure immutable code or data is programmed into ROM or write-once memory.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "XQuery Injection (CAPEC-84)",
      "ddmc_optionA": "For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).",
      "ddmc_optionB": "Design: Perform input allowlist validation on all XML input",
      "ddmc_optionC": "Digitize documents and cryptographically sign them to verify authenticity.",
      "ddmc_optionD": "Ensure immutable code or data is programmed into ROM or write-once memory.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design: Perform input allowlist validation on all XML input",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate XQuery Injection (CAPEC-84)?\nA.  For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nB.  Design: Perform input allowlist validation on all XML input\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  Ensure immutable code or data is programmed into ROM or write-once memory.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).\nB.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nC.  Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.\nD.  The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Creation of Temporary File in Directory with Insecure Permissions (CWE-379)",
      "ddmc_optionA": "Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).",
      "ddmc_optionB": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.",
      "ddmc_optionC": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
      "ddmc_optionD": "The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).\nB.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nC.  Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.\nD.  The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Forced Authentication (T1187)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Set and enforce secure password policies for accounts.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Authentication (T1187)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Set and enforce secure password policies for accounts.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Forced Authentication (T1187)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Set and enforce secure password policies for accounts.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.",
      "ddmc_optionC": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect HTTP Response Splitting (CAPEC-34)?\nA.  Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.\nB.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nC.  You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "HTTP Response Splitting (CAPEC-34)",
      "ddmc_optionA": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.",
      "ddmc_optionB": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionC": "You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.",
      "ddmc_optionD": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.",
      "prompts": [],
      "instruction": "How can you detect HTTP Response Splitting (CAPEC-34)?\nA.  Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.\nB.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nC.  You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use of Default Credentials (CWE-1392)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nC.  For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest",
      "ddmc_optionC": "For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use of Default Credentials (CWE-1392)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nC.  For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-132 (Symlink Attack)?\nA.  Disable script execution.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Design: Use libraries and templates that minimize unfiltered input.\nD.  Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-132 (Symlink Attack)",
      "ddmc_optionA": "Disable script execution.",
      "ddmc_optionB": "Design: Use browser technologies that do not allow client side scripting.",
      "ddmc_optionC": "Design: Use libraries and templates that minimize unfiltered input.",
      "ddmc_optionD": "Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-132 (Symlink Attack)?\nA.  Disable script execution.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Design: Use libraries and templates that minimize unfiltered input.\nD.  Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1005 (Data from Local System)?\nA.  Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods).  Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file. Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis. Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide.  Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns  and RegDelNull .(Citations: Microsoft 4657 APR 2017, Microsoft Reghide NOV 2006, SpectorOps Hiding Reg Jul 2017, Microsoft RegDelNull July 2016)\nB.  Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.\nC.  While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.\nD.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Further, Network Device CLI commands may also be used to collect files such as configuration files with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files.(Citations: Mandiant APT41 Global Intrusion , US-CERT-TA18-106A)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1005 (Data from Local System)",
      "ddmc_optionA": "Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods).  Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file. Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis. Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide.  Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns  and RegDelNull .(Citations: Microsoft 4657 APR 2017, Microsoft Reghide NOV 2006, SpectorOps Hiding Reg Jul 2017, Microsoft RegDelNull July 2016)",
      "ddmc_optionB": "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.",
      "ddmc_optionC": "While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.",
      "ddmc_optionD": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Further, Network Device CLI commands may also be used to collect files such as configuration files with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files.(Citations: Mandiant APT41 Global Intrusion , US-CERT-TA18-106A)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Further, Network Device CLI commands may also be used to collect files such as configuration files with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files.(Citations: Mandiant APT41 Global Intrusion , US-CERT-TA18-106A)",
      "prompts": [],
      "instruction": "How can you detect T1005 (Data from Local System)?\nA.  Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods).  Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file. Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis. Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide.  Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns  and RegDelNull .(Citations: Microsoft 4657 APR 2017, Microsoft Reghide NOV 2006, SpectorOps Hiding Reg Jul 2017, Microsoft RegDelNull July 2016)\nB.  Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.\nC.  While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.\nD.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Further, Network Device CLI commands may also be used to collect files such as configuration files with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files.(Citations: Mandiant APT41 Global Intrusion , US-CERT-TA18-106A)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  Ensure that all user-supplied input is validated before use.\nB.  Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nC.  Implementation: Perform input validation for all remote content.\nD.  Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)",
      "ddmc_optionA": "Ensure that all user-supplied input is validated before use.",
      "ddmc_optionB": "Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.",
      "ddmc_optionC": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionD": "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  Ensure that all user-supplied input is validated before use.\nB.  Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nC.  Implementation: Perform input validation for all remote content.\nD.  Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Blocking the resolution of any subdomain of a specified domain name.\nB.  Restoring a file for an entity to access.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Blocking the resolution of any subdomain of a specified domain name.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring a file for an entity to access.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Blocking the resolution of any subdomain of a specified domain name.\nB.  Restoring a file for an entity to access.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1574.004 (Dylib Hijacking)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Initiating a host's reboot sequence to terminate all running processes.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.004 (Dylib Hijacking)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1574.004 (Dylib Hijacking)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Initiating a host's reboot sequence to terminate all running processes.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Component Firmware (T1542.002)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Restrict the ability to modify certain hives or keys in the Windows Registry.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Component Firmware (T1542.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform regular software updates to mitigate exploitation risk.",
      "prompts": [],
      "instruction": "How can you mitigate Component Firmware (T1542.002)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Restrict the ability to modify certain hives or keys in the Windows Registry.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1003.001 (LSASS Memory)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1003.001 (LSASS Memory)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1003.001 (LSASS Memory)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect HTTP Request Splitting (CAPEC-105)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Too many false or invalid queries to the database, especially those caused by malformed input.\nC.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\nD.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "HTTP Request Splitting (CAPEC-105)",
      "ddmc_optionA": "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
      "ddmc_optionB": "Too many false or invalid queries to the database, especially those caused by malformed input.",
      "ddmc_optionC": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "ddmc_optionD": "Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "prompts": [],
      "instruction": "How can you detect HTTP Request Splitting (CAPEC-105)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Too many false or invalid queries to the database, especially those caused by malformed input.\nC.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\nD.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Buffer Overflow via Parameter Expansion (CAPEC-47)?\nA.  Ensure Public Keys are signed by a Certificate Authority\nB.  Implementation: Server routines should be determined by content not determined by filename or file extension.\nC.  Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system\nD.  Avoid giving elevated privileges to developers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Buffer Overflow via Parameter Expansion (CAPEC-47)",
      "ddmc_optionA": "Ensure Public Keys are signed by a Certificate Authority",
      "ddmc_optionB": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "ddmc_optionC": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
      "ddmc_optionD": "Avoid giving elevated privileges to developers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Buffer Overflow via Parameter Expansion (CAPEC-47)?\nA.  Ensure Public Keys are signed by a Certificate Authority\nB.  Implementation: Server routines should be determined by content not determined by filename or file extension.\nC.  Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system\nD.  Avoid giving elevated privileges to developers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-339 (Small Seed Space in PRNG)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The fabric firewall should apply the same protections as the original region to the mirrored regions.\nC.  During development, do not mark it as safe for scripting.\nD.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-339 (Small Seed Space in PRNG)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "The fabric firewall should apply the same protections as the original region to the mirrored regions.",
      "ddmc_optionC": "During development, do not mark it as safe for scripting.",
      "ddmc_optionD": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-339 (Small Seed Space in PRNG)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The fabric firewall should apply the same protections as the original region to the mirrored regions.\nC.  During development, do not mark it as safe for scripting.\nD.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Shared Modules (T1129)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Shared Modules (T1129)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "How can you mitigate Shared Modules (T1129)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Network Trust Dependencies (T1590.003)",
      "ddmc_optionA": "Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "ddmc_optionB": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_optionD": "Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  File eviction techniques evict files from system storage.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  File eviction techniques evict files from system storage.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-596 (TCP RST Injection)?\nA.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nB.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nC.  Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.\nD.  Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-596 (TCP RST Injection)",
      "ddmc_optionA": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
      "ddmc_optionB": "Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.",
      "ddmc_optionC": "Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.",
      "ddmc_optionD": "Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-596 (TCP RST Injection)?\nA.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nB.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nC.  Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.\nD.  Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Service Discovery (T1007)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Service Discovery (T1007)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Service Discovery (T1007)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dynamic Resolution (T1568)?\nA.  Blocking a reverse lookup based on the query's IP address value.\nB.  Encrypting a file using a cryptographic key.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Blocking a reverse lookup based on the query's IP address value.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Blocking a reverse lookup based on the query's IP address value.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dynamic Resolution (T1568)?\nA.  Blocking a reverse lookup based on the query's IP address value.\nB.  Encrypting a file using a cryptographic key.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Firmware (T1592.003)?\nA.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Firmware (T1592.003)",
      "ddmc_optionA": "Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmc_optionB": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Firmware (T1592.003)?\nA.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Traffic Intercept (CAPEC-609)",
      "ddmc_optionA": "Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.",
      "ddmc_optionD": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Replace Binaries (CAPEC-642)?\nA.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\nB.  Design: Minimize switch and option functionality to only that necessary for correct function of the command.\nC.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nD.  Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replace Binaries (CAPEC-642)",
      "ddmc_optionA": "Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests",
      "ddmc_optionB": "Design: Minimize switch and option functionality to only that necessary for correct function of the command.",
      "ddmc_optionC": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "ddmc_optionD": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
      "prompts": [],
      "instruction": "What is a method to mitigate Replace Binaries (CAPEC-642)?\nA.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\nB.  Design: Minimize switch and option functionality to only that necessary for correct function of the command.\nC.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nD.  Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Steganography (T1027.003)?\nA.  Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.\nB.  Malicious XDG autostart entries may be detected by auditing file creation and modification events within the <code>/etc/xdg/autostart</code> and <code>~/.config/autostart</code> directories. Depending on individual configurations, defenders may need to query the environment variables <code>$XDG_CONFIG_HOME</code> or <code>$XDG_CONFIG_DIRS</code> to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline. Suspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.\nC.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\nD.  When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as Tor) or known adversary infrastructure that uses this technique. In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers. Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization. Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted. Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Steganography (T1027.003)",
      "ddmc_optionA": "Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.",
      "ddmc_optionB": "Malicious XDG autostart entries may be detected by auditing file creation and modification events within the <code>/etc/xdg/autostart</code> and <code>~/.config/autostart</code> directories. Depending on individual configurations, defenders may need to query the environment variables <code>$XDG_CONFIG_HOME</code> or <code>$XDG_CONFIG_DIRS</code> to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline. Suspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.",
      "ddmc_optionC": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
      "ddmc_optionD": "When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as Tor) or known adversary infrastructure that uses this technique. In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers. Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization. Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted. Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.",
      "prompts": [],
      "instruction": "What is a method to detect Steganography (T1027.003)?\nA.  Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.\nB.  Malicious XDG autostart entries may be detected by auditing file creation and modification events within the <code>/etc/xdg/autostart</code> and <code>~/.config/autostart</code> directories. Depending on individual configurations, defenders may need to query the environment variables <code>$XDG_CONFIG_HOME</code> or <code>$XDG_CONFIG_DIRS</code> to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline. Suspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.\nC.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\nD.  When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as Tor) or known adversary infrastructure that uses this technique. In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers. Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization. Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted. Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Software Development Tools Maliciously Altered (CAPEC-670)?\nA.  Sign everything, including configuration files, XML files and packages.\nB.  Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.\nC.  Avoid giving elevated privileges to developers.\nD.  Design: Include \"hosts file\"/IP address in the application\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Software Development Tools Maliciously Altered (CAPEC-670)",
      "ddmc_optionA": "Sign everything, including configuration files, XML files and packages.",
      "ddmc_optionB": "Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.",
      "ddmc_optionC": "Avoid giving elevated privileges to developers.",
      "ddmc_optionD": "Design: Include \"hosts file\"/IP address in the application",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Avoid giving elevated privileges to developers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Software Development Tools Maliciously Altered (CAPEC-670)?\nA.  Sign everything, including configuration files, XML files and packages.\nB.  Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.\nC.  Avoid giving elevated privileges to developers.\nD.  Design: Include \"hosts file\"/IP address in the application\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Space after Filename (T1036.006)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-523 (Unprotected Transport of Credentials)?\nA.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\nB.  Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.\nC.  Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-523 (Unprotected Transport of Credentials)",
      "ddmc_optionA": "Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.",
      "ddmc_optionB": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.",
      "ddmc_optionC": "Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-523 (Unprotected Transport of Credentials)?\nA.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\nB.  Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.\nC.  Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Hardware Design Specifications Are Altered (CAPEC-521)?\nA.  The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.\nB.  Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\nC.  Use mail.local\nD.  Monitor and control access to the configuration management system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hardware Design Specifications Are Altered (CAPEC-521)",
      "ddmc_optionA": "The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
      "ddmc_optionB": "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
      "ddmc_optionC": "Use mail.local",
      "ddmc_optionD": "Monitor and control access to the configuration management system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
      "prompts": [],
      "instruction": "How can you mitigate Hardware Design Specifications Are Altered (CAPEC-521)?\nA.  The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.\nB.  Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\nC.  Use mail.local\nD.  Monitor and control access to the configuration management system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1218.003 (CMSTP)?\nA.  Encrypting a file using a cryptographic key.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1218.003 (CMSTP)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate T1218.003 (CMSTP)?\nA.  Encrypting a file using a cryptographic key.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Portable Executable Injection (T1055.002)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.\nC.  Analyzing email or instant message content to detect unauthorized activity.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.",
      "ddmc_optionC": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Portable Executable Injection (T1055.002)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.\nC.  Analyzing email or instant message content to detect unauthorized activity.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1562.002 (Disable Windows Event Logging)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Replacing old software on a computer system component.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1562.002 (Disable Windows Event Logging)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Replacing old software on a computer system component.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "How can you mitigate T1562.002 (Disable Windows Event Logging)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Replacing old software on a computer system component.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Forced Integer Overflow (CAPEC-92)?\nA.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nB.  Always do bound checking before consuming user input data.\nC.  Ensure deleted files are actually deleted.\nD.  Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Integer Overflow (CAPEC-92)",
      "ddmc_optionA": "Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.",
      "ddmc_optionB": "Always do bound checking before consuming user input data.",
      "ddmc_optionC": "Ensure deleted files are actually deleted.",
      "ddmc_optionD": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Always do bound checking before consuming user input data.",
      "prompts": [],
      "instruction": "How can you mitigate Forced Integer Overflow (CAPEC-92)?\nA.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nB.  Always do bound checking before consuming user input data.\nC.  Ensure deleted files are actually deleted.\nD.  Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Not Using Complete Mediation (CWE-638)?\nA.  If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))\nB.  Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  With Struts, write all data from form beans with the bean's filter attribute set to true.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Not Using Complete Mediation (CWE-638)",
      "ddmc_optionA": "If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))",
      "ddmc_optionB": "Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Not Using Complete Mediation (CWE-638)?\nA.  If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))\nB.  Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  With Struts, write all data from form beans with the bean's filter attribute set to true.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Block users or groups from installing or using unapproved hardware on systems, including USB devices.\nC.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hardware Additions (T1200)",
      "ddmc_optionA": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionB": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
      "ddmc_optionC": "Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Block users or groups from installing or using unapproved hardware on systems, including USB devices.\nC.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Application Window Discovery (T1010)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application Window Discovery (T1010)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Application Window Discovery (T1010)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Accounts (T1078.002)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  File eviction techniques evict files from system storage.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Accounts (T1078.002)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  File eviction techniques evict files from system storage.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Email Accounts (T1585.002)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\nB.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Email Accounts (T1585.002)",
      "ddmc_optionA": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.",
      "ddmc_optionB": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)",
      "ddmc_optionC": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "prompts": [],
      "instruction": "What is a method to detect Email Accounts (T1585.002)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\nB.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Not Using Password Aging (CWE-262)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Not Using Password Aging (CWE-262)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_optionD": "Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Not Using Password Aging (CWE-262)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Proxy (T1090.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1007 (System Service Discovery)?\nA.  Restricting network traffic originating from any location.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Employing file hash comparisons to detect known malware.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1007 (System Service Discovery)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "prompts": [],
      "instruction": "How can you mitigate T1007 (System Service Discovery)?\nA.  Restricting network traffic originating from any location.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Employing file hash comparisons to detect known malware.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Terminating a running application process on a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Terminating a running application process on a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Terminating a running application process on a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Absolute Path Traversal (CWE-36)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Absolute Path Traversal (CWE-36)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Absolute Path Traversal (CWE-36)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Symmetric Cryptography (T1573.001)?\nA.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nB.  Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: TechNet Autoruns)\nC.  With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more . CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.(Citations: Data Driven Security DGA)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "ddmc_optionB": "Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: TechNet Autoruns)",
      "ddmc_optionC": "With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more . CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.(Citations: Data Driven Security DGA)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Symmetric Cryptography (T1573.001)?\nA.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nB.  Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: TechNet Autoruns)\nC.  With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more . CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.(Citations: Data Driven Security DGA)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nB.  Do not reuse local administrator account credentials across systems.\nC.  Monitor system and domain logs for abnormal access.\nD.  Purchase potential TypoSquatted domains and forward to legitimate domain.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Captured Tickets (Pass The Ticket) (CAPEC-645)",
      "ddmc_optionA": "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.",
      "ddmc_optionB": "Do not reuse local administrator account credentials across systems.",
      "ddmc_optionC": "Monitor system and domain logs for abnormal access.",
      "ddmc_optionD": "Purchase potential TypoSquatted domains and forward to legitimate domain.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor system and domain logs for abnormal access.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nB.  Do not reuse local administrator account credentials across systems.\nC.  Monitor system and domain logs for abnormal access.\nD.  Purchase potential TypoSquatted domains and forward to legitimate domain.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remote Code Inclusion (CAPEC-253)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\nC.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nD.  Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Code Inclusion (CAPEC-253)",
      "ddmc_optionA": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
      "ddmc_optionB": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
      "ddmc_optionC": "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
      "ddmc_optionD": "Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remote Code Inclusion (CAPEC-253)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\nC.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nD.  Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Creation of Temporary File in Directory with Insecure Permissions (CWE-379)",
      "ddmc_optionA": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionC": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "ddmc_optionD": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
      "prompts": [],
      "instruction": "How can you mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Compromise Software Supply Chain (T1195.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Software Supply Chain (T1195.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform regular software updates to mitigate exploitation risk.",
      "prompts": [],
      "instruction": "What is a method to mitigate Compromise Software Supply Chain (T1195.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1565.002 (Transmitted Data Manipulation)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Restoring an software configuration.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1565.002 (Transmitted Data Manipulation)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1565.002 (Transmitted Data Manipulation)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Restoring an software configuration.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Screen Capture (T1113)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Steal Application Access Token (T1528)?\nA.  Analyzing failed connections in a network to detect unauthorized activity.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmc_optionB": "Comparing the \"text\" or \"code\" memory segments to a source of truth.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Steal Application Access Token (T1528)?\nA.  Analyzing failed connections in a network to detect unauthorized activity.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect ARP Cache Poisoning (T1557.002)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\nC.  Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.\nD.  Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "ARP Cache Poisoning (T1557.002)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
      "ddmc_optionC": "Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.",
      "ddmc_optionD": "Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.",
      "prompts": [],
      "instruction": "How can you detect ARP Cache Poisoning (T1557.002)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\nC.  Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.\nD.  Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Analyzing email or instant message content to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionD": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Analyzing email or instant message content to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1553.001 (Gatekeeper Bypass)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1553.001 (Gatekeeper Bypass)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "How can you mitigate T1553.001 (Gatekeeper Bypass)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate File and Directory Discovery (T1083)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Discovery (T1083)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate File and Directory Discovery (T1083)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Build Image on Host (T1612)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Build Image on Host (T1612)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_optionC": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Build Image on Host (T1612)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-1239 (Improper Zeroization of Hardware Register)?\nA.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nB.  Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1239 (Improper Zeroization of Hardware Register)",
      "ddmc_optionA": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionB": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
      "ddmc_optionC": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionD": "Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-1239 (Improper Zeroization of Hardware Register)?\nA.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nB.  Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Generation Algorithms (T1568.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Generation Algorithms (T1568.002)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionC": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Generation Algorithms (T1568.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Rename System Utilities (T1036.003)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rename System Utilities (T1036.003)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "How can you mitigate Rename System Utilities (T1036.003)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Data Transfer Size Limits (T1030)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data Transfer Size Limits (T1030)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "How can you mitigate Data Transfer Size Limits (T1030)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate TCP Fragmentation (CAPEC-494)?\nA.  Change default PIN passwords and always use one when connecting.\nB.  This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule \"IF FO=1 and PROTOCOL=TCP then DROP PACKET\" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.\nC.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nD.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "TCP Fragmentation (CAPEC-494)",
      "ddmc_optionA": "Change default PIN passwords and always use one when connecting.",
      "ddmc_optionB": "This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule \"IF FO=1 and PROTOCOL=TCP then DROP PACKET\" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.",
      "ddmc_optionC": "Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.",
      "ddmc_optionD": "Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule \"IF FO=1 and PROTOCOL=TCP then DROP PACKET\" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.",
      "prompts": [],
      "instruction": "What is a method to mitigate TCP Fragmentation (CAPEC-494)?\nA.  Change default PIN passwords and always use one when connecting.\nB.  This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule \"IF FO=1 and PROTOCOL=TCP then DROP PACKET\" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.\nC.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nD.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an software configuration.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an software configuration.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1546.007 (Netsh Helper DLL)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an software configuration.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1546.007 (Netsh Helper DLL)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate T1546.007 (Netsh Helper DLL)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an software configuration.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Missing Standardized Error Handling Mechanism (CWE-544)?\nA.  An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.\nB.  Assign all variables to an initial value.\nC.  define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.\nD.  Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Standardized Error Handling Mechanism (CWE-544)",
      "ddmc_optionA": "An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.",
      "ddmc_optionB": "Assign all variables to an initial value.",
      "ddmc_optionC": "define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.",
      "ddmc_optionD": "Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.",
      "prompts": [],
      "instruction": "How can you mitigate Missing Standardized Error Handling Mechanism (CWE-544)?\nA.  An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.\nB.  Assign all variables to an initial value.\nC.  define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.\nD.  Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Memory (T1003.001)?\nA.  Restricting network traffic originating from any location.\nB.  Initiating a host's shutdown sequence to terminate all running processes.\nC.  Restoring an entity's access to resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Memory (T1003.001)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Initiating a host's shutdown sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Memory (T1003.001)?\nA.  Restricting network traffic originating from any location.\nB.  Initiating a host's shutdown sequence to terminate all running processes.\nC.  Restoring an entity's access to resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect T1001 (Data Obfuscation)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious. Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.\nC.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1001 (Data Obfuscation)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious. Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.",
      "ddmc_optionC": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect T1001 (Data Obfuscation)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious. Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.\nC.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect CWE-918 (Server-Side Request Forgery (SSRF))?\nA.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-918 (Server-Side Request Forgery (SSRF))",
      "ddmc_optionA": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect CWE-918 (Server-Side Request Forgery (SSRF))?\nA.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Rogue Domain Controller (T1207)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Rogue Domain Controller (T1207)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Reflective Code Loading (T1620)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Restricting network traffic originating from any location.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Reflective Code Loading (T1620)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Reflective Code Loading (T1620)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Restricting network traffic originating from any location.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exploitation for Privilege Escalation (T1068)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmc_optionA": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exploitation for Privilege Escalation (T1068)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Restoring a file for an entity to access.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring a file for an entity to access.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Restoring a file for an entity to access.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Employing file hash comparisons to detect known malware.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Employing file hash comparisons to detect known malware.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1505.002 (Transport Agent)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1505.002 (Transport Agent)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1505.002 (Transport Agent)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nB.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)",
      "ddmc_optionA": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_optionB": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nB.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Hidden Window (T1564.003)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Block users or groups from installing unapproved software.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hidden Window (T1564.003)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Block users or groups from installing unapproved software.",
      "ddmc_optionD": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block users or groups from installing unapproved software.",
      "prompts": [],
      "instruction": "What is a method to mitigate Hidden Window (T1564.003)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Block users or groups from installing unapproved software.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Encrypting a file using a cryptographic key.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Analyzing a Container Image with respect to a set of policies.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Analyzing a Container Image with respect to a set of policies.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Encrypting a file using a cryptographic key.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Analyzing a Container Image with respect to a set of policies.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File eviction techniques evict files from system storage.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File eviction techniques evict files from system storage.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1014 (Rootkit)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Encrypting a file using a cryptographic key.\nC.  Employing file hash comparisons to detect known malware.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1014 (Rootkit)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1014 (Rootkit)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Encrypting a file using a cryptographic key.\nC.  Employing file hash comparisons to detect known malware.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Preventing execution of any address in a memory region other than the code segment.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1176 (Browser Extensions)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Preventing execution of any address in a memory region other than the code segment.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1025 (Data from Removable Media)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1025 (Data from Removable Media)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1025 (Data from Removable Media)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Struts: Form Bean Does Not Extend Validation Class (CWE-104)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Leverage the HttpOnly flag when setting a sensitive cookie in a response.\nC.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nD.  Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Struts: Form Bean Does Not Extend Validation Class (CWE-104)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Leverage the HttpOnly flag when setting a sensitive cookie in a response.",
      "ddmc_optionC": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
      "ddmc_optionD": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Leverage the HttpOnly flag when setting a sensitive cookie in a response.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Struts: Form Bean Does Not Extend Validation Class (CWE-104)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Leverage the HttpOnly flag when setting a sensitive cookie in a response.\nC.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nD.  Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring software to a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring software to a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Cleartext Storage of Sensitive Information (CWE-312)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cleartext Storage of Sensitive Information (CWE-312)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Cleartext Storage of Sensitive Information (CWE-312)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Web Shell (T1505.003)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Shell (T1505.003)",
      "ddmc_optionA": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate Web Shell (T1505.003)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect CWE-526 (Cleartext Storage of Sensitive Information in an Environment Variable)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-526 (Cleartext Storage of Sensitive Information in an Environment Variable)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect CWE-526 (Cleartext Storage of Sensitive Information in an Environment Variable)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Web Application Scanner Web Services Scanner Database Scanners\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmc_optionA": "By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.",
      "ddmc_optionD": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Call to Thread run() instead of start() (CWE-572)?\nA.  During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Call to Thread run() instead of start() (CWE-572)",
      "ddmc_optionA": "During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Call to Thread run() instead of start() (CWE-572)?\nA.  During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Hard-coded Credentials (CWE-798)?\nA.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\nB.  Use the template engine's sandbox or restricted mode, if available.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nD.  Regularly wrap sub-expressions in parentheses, especially in security-critical code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Hard-coded Credentials (CWE-798)",
      "ddmc_optionA": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.",
      "ddmc_optionB": "Use the template engine's sandbox or restricted mode, if available.",
      "ddmc_optionC": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_optionD": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Hard-coded Credentials (CWE-798)?\nA.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\nB.  Use the template engine's sandbox or restricted mode, if available.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nD.  Regularly wrap sub-expressions in parentheses, especially in security-critical code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-607 (Public Static Final Field References Mutable Object)?\nA.  Protect mutable objects by making them private. Restrict access to the getter and setter as well.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nD.  Design signal handlers to only set flags rather than perform complex functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-607 (Public Static Final Field References Mutable Object)",
      "ddmc_optionA": "Protect mutable objects by making them private. Restrict access to the getter and setter as well.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionC": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_optionD": "Design signal handlers to only set flags rather than perform complex functionality.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Protect mutable objects by making them private. Restrict access to the getter and setter as well.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-607 (Public Static Final Field References Mutable Object)?\nA.  Protect mutable objects by making them private. Restrict access to the getter and setter as well.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nD.  Design signal handlers to only set flags rather than perform complex functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credentials in Registry (T1552.002)?\nA.  Encrypting a file using a cryptographic key.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credentials in Registry (T1552.002)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Credentials in Registry (T1552.002)?\nA.  Encrypting a file using a cryptographic key.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Blocking a lookup based on the query's domain name value.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Blocking a lookup based on the query's domain name value.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Using kernel-level capabilities to isolate processes.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Blocking a lookup based on the query's domain name value.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nB.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\nC.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nD.  Implementation: Hide inner ordering of HTTP response header.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Alternative Execution Due to Deceptive Filenames (CAPEC-635)",
      "ddmc_optionA": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmc_optionB": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "ddmc_optionC": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "ddmc_optionD": "Implementation: Hide inner ordering of HTTP response header.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "prompts": [],
      "instruction": "What is a method to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nB.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\nC.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nD.  Implementation: Hide inner ordering of HTTP response header.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate COR_PROFILER (T1574.012)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate COR_PROFILER (T1574.012)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.\nB.  Avoid race conditions (CWE-362) during initialization routines.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Integer Overflow or Wraparound (CWE-190)",
      "ddmc_optionA": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.",
      "ddmc_optionB": "Avoid race conditions (CWE-362) during initialization routines.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
      "prompts": [],
      "instruction": "How can you mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.\nB.  Avoid race conditions (CWE-362) during initialization routines.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-509 (Replicating Malicious Code (Virus or Worm))?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-509 (Replicating Malicious Code (Virus or Worm))",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-509 (Replicating Malicious Code (Virus or Worm))?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)",
      "ddmc_optionA": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_optionB": "Use static analysis tools to spot return of the address of a stack variable.",
      "ddmc_optionC": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Trusted Relationship (T1199)?\nA.  Restoring a file for an entity to access.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Trusted Relationship (T1199)?\nA.  Restoring a file for an entity to access.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Value Delimiters (CWE-142)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.\nD.  When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Value Delimiters (CWE-142)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
      "ddmc_optionC": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
      "ddmc_optionD": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Value Delimiters (CWE-142)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.\nD.  When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Path Equivalence: 'fakedir/../realdir/filename' (CWE-57)?\nA.  Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.\nB.  Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.\nC.  Always use explicit block delimitation and use static-analysis technologies to enforce this practice.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Equivalence: 'fakedir/../realdir/filename' (CWE-57)",
      "ddmc_optionA": "Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.",
      "ddmc_optionB": "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.",
      "ddmc_optionC": "Always use explicit block delimitation and use static-analysis technologies to enforce this practice.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "How can you mitigate Path Equivalence: 'fakedir/../realdir/filename' (CWE-57)?\nA.  Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.\nB.  Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.\nC.  Always use explicit block delimitation and use static-analysis technologies to enforce this practice.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Disable Windows Event Logging (T1562.002)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Modifying an application's configuration to reduce its attack surface.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Disable Windows Event Logging (T1562.002)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "Modifying an application's configuration to reduce its attack surface.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Modifying an application's configuration to reduce its attack surface.",
      "prompts": [],
      "instruction": "How can you mitigate Disable Windows Event Logging (T1562.002)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Modifying an application's configuration to reduce its attack surface.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Replication Through Removable Media (T1091)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replication Through Removable Media (T1091)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Replication Through Removable Media (T1091)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Blocking Code in Single-threaded, Non-blocking Context (CWE-1322)?\nA.  Assign IP addresses that are not 0.0.0.0.\nB.  Do not store unnecessarily sensitive information in the cache.\nC.  If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).\nD.  For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Blocking Code in Single-threaded, Non-blocking Context (CWE-1322)",
      "ddmc_optionA": "Assign IP addresses that are not 0.0.0.0.",
      "ddmc_optionB": "Do not store unnecessarily sensitive information in the cache.",
      "ddmc_optionC": "If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).",
      "ddmc_optionD": "For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Blocking Code in Single-threaded, Non-blocking Context (CWE-1322)?\nA.  Assign IP addresses that are not 0.0.0.0.\nB.  Do not store unnecessarily sensitive information in the cache.\nC.  If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).\nD.  For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1056.001 (Keylogging)?\nA.  Analyzing email or instant message content to detect unauthorized activity.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1056.001 (Keylogging)",
      "ddmc_optionA": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate T1056.001 (Keylogging)?\nA.  Analyzing email or instant message content to detect unauthorized activity.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Encrypting a file using a cryptographic key.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Encrypting a file using a cryptographic key.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cloud Account (T1136.003)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Account (T1136.003)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cloud Account (T1136.003)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Storing Passwords in a Recoverable Format (CWE-257)?\nA.  Periodically review the privileges and their owners.\nB.  A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g., user id, app name) Depending on the threat model, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 800-63B [REF-1053] for further information on password requirements.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Use strong, non-reversible encryption to protect stored passwords.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Storing Passwords in a Recoverable Format (CWE-257)",
      "ddmc_optionA": "Periodically review the privileges and their owners.",
      "ddmc_optionB": "A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g., user id, app name) Depending on the threat model, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 800-63B [REF-1053] for further information on password requirements.",
      "ddmc_optionC": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
      "ddmc_optionD": "Use strong, non-reversible encryption to protect stored passwords.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use strong, non-reversible encryption to protect stored passwords.",
      "prompts": [],
      "instruction": "What is a method to mitigate Storing Passwords in a Recoverable Format (CWE-257)?\nA.  Periodically review the privileges and their owners.\nB.  A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g., user id, app name) Depending on the threat model, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 800-63B [REF-1053] for further information on password requirements.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Use strong, non-reversible encryption to protect stored passwords.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nB.  Do not expose sensitive error information to the user.\nC.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nD.  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Shell in Externally Accessible Directory (CWE-553)",
      "ddmc_optionA": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices.",
      "ddmc_optionB": "Do not expose sensitive error information to the user.",
      "ddmc_optionC": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionD": "Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not expose sensitive error information to the user.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nB.  Do not expose sensitive error information to the user.\nC.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nD.  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Handling of Missing Special Element (CWE-166)?\nA.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Enforce the use of strong mutual authentication mechanism between the two parties.\nC.  Implement the access control check first. Access should only be given to asset if agent is authorized.\nD.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Missing Special Element (CWE-166)",
      "ddmc_optionA": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "Enforce the use of strong mutual authentication mechanism between the two parties.",
      "ddmc_optionC": "Implement the access control check first. Access should only be given to asset if agent is authorized.",
      "ddmc_optionD": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Handling of Missing Special Element (CWE-166)?\nA.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Enforce the use of strong mutual authentication mechanism between the two parties.\nC.  Implement the access control check first. Access should only be given to asset if agent is authorized.\nD.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Permissive Cross-domain Policy with Untrusted Domains (CWE-942)?\nA.  System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Permissive Cross-domain Policy with Untrusted Domains (CWE-942)",
      "ddmc_optionA": "System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.",
      "ddmc_optionB": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_optionC": "Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "prompts": [],
      "instruction": "How can you mitigate Permissive Cross-domain Policy with Untrusted Domains (CWE-942)?\nA.  System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Assigning instead of Comparing (CWE-481)?\nA.  Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.\nB.  Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\nC.  Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.\nD.  Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Assigning instead of Comparing (CWE-481)",
      "ddmc_optionA": "Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.",
      "ddmc_optionB": "Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.",
      "ddmc_optionC": "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.",
      "ddmc_optionD": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
      "prompts": [],
      "instruction": "How can you mitigate Assigning instead of Comparing (CWE-481)?\nA.  Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.\nB.  Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\nC.  Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.\nD.  Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.",
      "ddmc_optionD": "Use a static analysis tool to find double free instances.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Missing Authentication for Critical Function (CWE-306)?\nA.  Use a tool that dynamically detects memory management problems, such as valgrind.\nB.  Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].\nD.  Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Authentication for Critical Function (CWE-306)",
      "ddmc_optionA": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmc_optionB": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_optionC": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].",
      "ddmc_optionD": "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].",
      "prompts": [],
      "instruction": "How can you mitigate Missing Authentication for Critical Function (CWE-306)?\nA.  Use a tool that dynamically detects memory management problems, such as valgrind.\nB.  Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].\nD.  Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.\n\nPlease select the correct answer."
    }
  }
]