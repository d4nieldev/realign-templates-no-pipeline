[
  {
    "instruction": "Which one of the following is a way to detect Phishing (CAPEC-98)?\nA.  You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.\nB.  Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nC.  None. This attack happens offline.\nD.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Phishing (CAPEC-98)",
      "ddmc_optionA": "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.",
      "ddmc_optionB": "Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
      "ddmc_optionC": "None. This attack happens offline.",
      "ddmc_optionD": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Phishing (CAPEC-98)?\nA.  You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.\nB.  Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nC.  None. This attack happens offline.\nD.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Cloud Accounts (T1586.003)?\nA.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nB.  Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.\nC.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cloud Accounts (T1586.003)",
      "ddmc_optionA": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)",
      "ddmc_optionB": "Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.",
      "ddmc_optionC": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "ddmc_optionD": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Cloud Accounts (T1586.003)?\nA.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nB.  Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.\nC.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Network Flood (T1498.001)",
      "ddmc_optionA": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1055.001 (Dynamic-link Library Injection)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1055.001 (Dynamic-link Library Injection)",
      "ddmc_optionA": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionD": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1055.001 (Dynamic-link Library Injection)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1053.005 (Scheduled Task)?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  Detects processes that modify, change, or replace their own code at runtime.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1053.005 (Scheduled Task)",
      "ddmc_optionA": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionB": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detects processes that modify, change, or replace their own code at runtime.",
      "prompts": [],
      "instruction": "How can you mitigate T1053.005 (Scheduled Task)?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  Detects processes that modify, change, or replace their own code at runtime.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect T1001 (Data Obfuscation)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious. Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.\nC.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1001 (Data Obfuscation)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious. Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.",
      "ddmc_optionC": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect T1001 (Data Obfuscation)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious. Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.\nC.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Security Software Discovery (T1518.001)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Security Software Discovery (T1518.001)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate Security Software Discovery (T1518.001)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Permissions Modification (T1222)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate COR_PROFILER (T1574.012)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate COR_PROFILER (T1574.012)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Msiexec (T1218.007)",
      "ddmc_optionA": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Unprotected Transport of Credentials (CWE-523)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Unprotected Transport of Credentials (CWE-523)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Unprotected Transport of Credentials (CWE-523)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Compiled HTML File (T1218.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nD.  Analyzing the properties of file create system call invocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionD": "Analyzing the properties of file create system call invocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the properties of file create system call invocations.",
      "prompts": [],
      "instruction": "How can you mitigate Compiled HTML File (T1218.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nD.  Analyzing the properties of file create system call invocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1021.001 (Remote Desktop Protocol)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.001 (Remote Desktop Protocol)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1021.001 (Remote Desktop Protocol)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1498.002 (Reflection Amplification)",
      "ddmc_optionA": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1553.001 (Gatekeeper Bypass)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1553.001 (Gatekeeper Bypass)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "How can you mitigate T1553.001 (Gatekeeper Bypass)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Process Injection (T1055)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Process Injection (T1055)",
      "ddmc_optionA": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Process Injection (T1055)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1594 (Search Victim-Owned Websites)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1594 (Search Victim-Owned Websites)",
      "ddmc_optionA": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmc_optionD": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1594 (Search Victim-Owned Websites)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1574.012 (COR_PROFILER)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Using kernel-level capabilities to isolate processes.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.012 (COR_PROFILER)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1574.012 (COR_PROFILER)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Using kernel-level capabilities to isolate processes.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1207 (Rogue Domain Controller)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1207 (Rogue Domain Controller)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1207 (Rogue Domain Controller)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Application Window Discovery (T1010)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application Window Discovery (T1010)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "prompts": [],
      "instruction": "How can you mitigate Application Window Discovery (T1010)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Using biological measures in order to authenticate a user.\nD.  Process eviction techniques terminate or remove running process.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Using biological measures in order to authenticate a user.",
      "ddmc_optionD": "Process eviction techniques terminate or remove running process.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Process eviction techniques terminate or remove running process.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Using biological measures in order to authenticate a user.\nD.  Process eviction techniques terminate or remove running process.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.",
      "prompts": [],
      "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nB.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\nC.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nD.  Implementation: Hide inner ordering of HTTP response header.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Alternative Execution Due to Deceptive Filenames (CAPEC-635)",
      "ddmc_optionA": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmc_optionB": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "ddmc_optionC": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "ddmc_optionD": "Implementation: Hide inner ordering of HTTP response header.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "prompts": [],
      "instruction": "What is a method to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nB.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\nC.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nD.  Implementation: Hide inner ordering of HTTP response header.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cause Web Server Misclassification (CAPEC-11)?\nA.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nB.  Sign everything, including configuration files, XML files and packages.\nC.  Design: Use load balancing mechanisms\nD.  Implementation: Server routines should be determined by content not determined by filename or file extension.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cause Web Server Misclassification (CAPEC-11)",
      "ddmc_optionA": "Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.",
      "ddmc_optionB": "Sign everything, including configuration files, XML files and packages.",
      "ddmc_optionC": "Design: Use load balancing mechanisms",
      "ddmc_optionD": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cause Web Server Misclassification (CAPEC-11)?\nA.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nB.  Sign everything, including configuration files, XML files and packages.\nC.  Design: Use load balancing mechanisms\nD.  Implementation: Server routines should be determined by content not determined by filename or file extension.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Firmware (T1592.003)?\nA.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Firmware (T1592.003)",
      "ddmc_optionA": "Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmc_optionB": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Firmware (T1592.003)?\nA.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Analyzing failed connections in a network to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Audio Capture (T1123)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmc_optionD": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Analyzing failed connections in a network to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  A file created for the purposes of deceiving an adversary.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  A file created for the purposes of deceiving an adversary.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Dylib Hijacking (T1574.004)?\nA.  Terminating a running application process on a computer system.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Terminating a running application process on a computer system.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate Dylib Hijacking (T1574.004)?\nA.  Terminating a running application process on a computer system.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-1192 (Improper Identifier for IP Block used in System-On-Chip (SOC))?\nA.  Always use array indexing instead of direct pointer manipulation.\nB.  Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.\nC.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nD.  Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1192 (Improper Identifier for IP Block used in System-On-Chip (SOC))",
      "ddmc_optionA": "Always use array indexing instead of direct pointer manipulation.",
      "ddmc_optionB": "Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.",
      "ddmc_optionC": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
      "ddmc_optionD": "Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-1192 (Improper Identifier for IP Block used in System-On-Chip (SOC))?\nA.  Always use array indexing instead of direct pointer manipulation.\nB.  Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.\nC.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nD.  Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Hardware Design Specifications Are Altered (CAPEC-521)?\nA.  The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.\nB.  Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\nC.  Use mail.local\nD.  Monitor and control access to the configuration management system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hardware Design Specifications Are Altered (CAPEC-521)",
      "ddmc_optionA": "The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
      "ddmc_optionB": "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
      "ddmc_optionC": "Use mail.local",
      "ddmc_optionD": "Monitor and control access to the configuration management system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
      "prompts": [],
      "instruction": "How can you mitigate Hardware Design Specifications Are Altered (CAPEC-521)?\nA.  The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.\nB.  Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\nC.  Use mail.local\nD.  Monitor and control access to the configuration management system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Build Image on Host (T1612)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Build Image on Host (T1612)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_optionC": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Build Image on Host (T1612)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Not Using Input Validation Framework (CWE-554)?\nA.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "ASP.NET Misconfiguration: Not Using Input Validation Framework (CWE-554)",
      "ddmc_optionA": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Not Using Input Validation Framework (CWE-554)?\nA.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1537 (Transfer Data to Cloud Account)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nB.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nC.  Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1537 (Transfer Data to Cloud Account)",
      "ddmc_optionA": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_optionB": "Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmc_optionC": "Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)",
      "ddmc_optionD": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)",
      "prompts": [],
      "instruction": "How can you detect T1537 (Transfer Data to Cloud Account)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nB.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nC.  Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Expression is Always False (CWE-570)?\nA.  Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Expression is Always False (CWE-570)",
      "ddmc_optionA": "Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Expression is Always False (CWE-570)?\nA.  Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Domain Fronting (T1090.004)?\nA.  Determining if a URL is benign or malicious by analyzing the URL or its components.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an software configuration.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Determining if a URL is benign or malicious by analyzing the URL or its components.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Domain Fronting (T1090.004)?\nA.  Determining if a URL is benign or malicious by analyzing the URL or its components.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an software configuration.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.\nB.  Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Do not expose administrative functionnality on the user UI.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)",
      "ddmc_optionA": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.",
      "ddmc_optionB": "Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.",
      "ddmc_optionC": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.",
      "ddmc_optionD": "Do not expose administrative functionnality on the user UI.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.\nB.  Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Do not expose administrative functionnality on the user UI.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-166 (Improper Handling of Missing Special Element)?\nA.  The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\nB.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-166 (Improper Handling of Missing Special Element)",
      "ddmc_optionA": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.",
      "ddmc_optionB": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-166 (Improper Handling of Missing Special Element)?\nA.  The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\nB.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nB.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]\nC.  Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.\nD.  Remove any Shells accessible under the web root folder and children directories.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Shell in Externally Accessible Directory (CWE-553)",
      "ddmc_optionA": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionB": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]",
      "ddmc_optionC": "Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.",
      "ddmc_optionD": "Remove any Shells accessible under the web root folder and children directories.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove any Shells accessible under the web root folder and children directories.",
      "prompts": [],
      "instruction": "How can you mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nB.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]\nC.  Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.\nD.  Remove any Shells accessible under the web root folder and children directories.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Export of Android Application Components (CWE-926)?\nA.  Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Limit Content Provider permissions (read/write) as appropriate.\nD.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmc_optionA": "Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Limit Content Provider permissions (read/write) as appropriate.",
      "ddmc_optionD": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limit Content Provider permissions (read/write) as appropriate.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Export of Android Application Components (CWE-926)?\nA.  Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Limit Content Provider permissions (read/write) as appropriate.\nD.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Return Inside Finally Block (CWE-584)?\nA.  Software tools are capable of finding ADSs on your system.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).\nD.  Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Return Inside Finally Block (CWE-584)",
      "ddmc_optionA": "Software tools are capable of finding ADSs on your system.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).",
      "ddmc_optionD": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.",
      "prompts": [],
      "instruction": "What is a method to mitigate Return Inside Finally Block (CWE-584)?\nA.  Software tools are capable of finding ADSs on your system.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).\nD.  Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Suspending a running process on a computer system.\nC.  File eviction techniques evict files from system storage.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Suspending a running process on a computer system.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Suspending a running process on a computer system.\nC.  File eviction techniques evict files from system storage.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Leading Special Elements (CWE-160)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.",
      "ddmc_optionD": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Memory (T1003.001)?\nA.  Restricting network traffic originating from any location.\nB.  Initiating a host's shutdown sequence to terminate all running processes.\nC.  Restoring an entity's access to resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Memory (T1003.001)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Initiating a host's shutdown sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Memory (T1003.001)?\nA.  Restricting network traffic originating from any location.\nB.  Initiating a host's shutdown sequence to terminate all running processes.\nC.  Restoring an entity's access to resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Encrypting a file using a cryptographic key.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Analyzing a Container Image with respect to a set of policies.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Analyzing a Container Image with respect to a set of policies.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Encrypting a file using a cryptographic key.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Analyzing a Container Image with respect to a set of policies.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Scheduled Task (T1053.005)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Initiating a host's shutdown sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-125 (Flooding)",
      "ddmc_optionA": "Session tokens for specific host",
      "ddmc_optionB": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
      "ddmc_optionC": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionD": "Ensure that protocols have specific limits of scale configured.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that protocols have specific limits of scale configured.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1505.002 (Transport Agent)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1505.002 (Transport Agent)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1505.002 (Transport Agent)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hardware Additions (T1200)",
      "ddmc_optionA": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionB": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "prompts": [],
      "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credentials in Registry (T1552.002)?\nA.  Encrypting a file using a cryptographic key.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credentials in Registry (T1552.002)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Credentials in Registry (T1552.002)?\nA.  Encrypting a file using a cryptographic key.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate WHOIS (T1596.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent modification of environment variables by unauthorized users and groups.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "WHOIS (T1596.002)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Prevent modification of environment variables by unauthorized users and groups.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate WHOIS (T1596.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent modification of environment variables by unauthorized users and groups.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1548.001 (Setuid and Setgid)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1548.001 (Setuid and Setgid)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate T1548.001 (Setuid and Setgid)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credential API Hooking (T1056.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential API Hooking (T1056.004)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Comparing the \"text\" or \"code\" memory segments to a source of truth.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Using a digital signature to authenticate a file before opening.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Comparing the \"text\" or \"code\" memory segments to a source of truth.",
      "prompts": [],
      "instruction": "What is a method to mitigate Credential API Hooking (T1056.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Kernel Modules and Extensions (T1547.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use signatures or heuristics to detect malicious software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Kernel Modules and Extensions (T1547.006)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use signatures or heuristics to detect malicious software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Kernel Modules and Extensions (T1547.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use signatures or heuristics to detect malicious software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dynamic Resolution (T1568)?\nA.  Blocking a reverse lookup based on the query's IP address value.\nB.  Encrypting a file using a cryptographic key.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Blocking a reverse lookup based on the query's IP address value.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Blocking a reverse lookup based on the query's IP address value.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dynamic Resolution (T1568)?\nA.  Blocking a reverse lookup based on the query's IP address value.\nB.  Encrypting a file using a cryptographic key.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Default Credentials (CWE-1392)?\nA.  Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.\nB.  Consider using encryption in the cache.\nC.  If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.\nD.  When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.",
      "ddmc_optionB": "Consider using encryption in the cache.",
      "ddmc_optionC": "If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.",
      "ddmc_optionD": "When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Default Credentials (CWE-1392)?\nA.  Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.\nB.  Consider using encryption in the cache.\nC.  If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.\nD.  When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-596 (TCP RST Injection)?\nA.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nB.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nC.  Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.\nD.  Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-596 (TCP RST Injection)",
      "ddmc_optionA": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
      "ddmc_optionB": "Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.",
      "ddmc_optionC": "Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.",
      "ddmc_optionD": "Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-596 (TCP RST Injection)?\nA.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nB.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nC.  Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.\nD.  Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Default Credentials (CWE-1392)?\nA.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nD.  Perform a type check before interpreting an object.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
      "ddmc_optionD": "Perform a type check before interpreting an object.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Default Credentials (CWE-1392)?\nA.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nD.  Perform a type check before interpreting an object.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-188 (Reverse Engineering)?\nA.  Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nB.  Monitor and control access to the configuration management system.\nC.  Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.\nD.  Implementation: Hide HTTP response header software information filed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-188 (Reverse Engineering)",
      "ddmc_optionA": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
      "ddmc_optionB": "Monitor and control access to the configuration management system.",
      "ddmc_optionC": "Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.",
      "ddmc_optionD": "Implementation: Hide HTTP response header software information filed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-188 (Reverse Engineering)?\nA.  Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nB.  Monitor and control access to the configuration management system.\nC.  Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.\nD.  Implementation: Hide HTTP response header software information filed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Executable Installer File Permissions Weakness (T1574.005)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Replacing old software on a computer system component.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Executable Installer File Permissions Weakness (T1574.005)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Replacing old software on a computer system component.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Replacing old software on a computer system component.",
      "prompts": [],
      "instruction": "How can you mitigate Executable Installer File Permissions Weakness (T1574.005)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Replacing old software on a computer system component.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect External Control of Assumed-Immutable Web Parameter (CWE-472)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "External Control of Assumed-Immutable Web Parameter (CWE-472)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect External Control of Assumed-Immutable Web Parameter (CWE-472)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1053.007 (Container Orchestration Job)?\nA.  Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows. The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citations: GitLab WakeOnLAN)\nB.  Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nD.  Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1053.007 (Container Orchestration Job)",
      "ddmc_optionA": "Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows. The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citations: GitLab WakeOnLAN)",
      "ddmc_optionB": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmc_optionC": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
      "ddmc_optionD": "Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.",
      "prompts": [],
      "instruction": "How can you detect T1053.007 (Container Orchestration Job)?\nA.  Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows. The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citations: GitLab WakeOnLAN)\nB.  Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nD.  Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)",
      "ddmc_optionA": "Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.",
      "ddmc_optionB": "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).",
      "ddmc_optionC": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "ddmc_optionD": "Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\nB.  Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.\nC.  Resolve all input to absolute or canonical representations before processing.\nD.  Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Access Control in Fabric Bridge (CWE-1317)",
      "ddmc_optionA": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_optionB": "Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.",
      "ddmc_optionC": "Resolve all input to absolute or canonical representations before processing.",
      "ddmc_optionD": "Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\nB.  Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.\nC.  Resolve all input to absolute or canonical representations before processing.\nD.  Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nB.  Resolve all URIs to absolute or canonical representations before processing.\nC.  Perform input validation on user data.\nD.  SEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Authorization Bypass Through User-Controlled Key (CWE-639)",
      "ddmc_optionA": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
      "ddmc_optionB": "Resolve all URIs to absolute or canonical representations before processing.",
      "ddmc_optionC": "Perform input validation on user data.",
      "ddmc_optionD": "SEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform input validation on user data.",
      "prompts": [],
      "instruction": "How can you mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nB.  Resolve all URIs to absolute or canonical representations before processing.\nC.  Perform input validation on user data.\nD.  SEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Forced Authentication (T1187)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Set and enforce secure password policies for accounts.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Authentication (T1187)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Set and enforce secure password policies for accounts.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Forced Authentication (T1187)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Set and enforce secure password policies for accounts.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1584.005 (Botnet)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1584.005 (Botnet)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1584.005 (Botnet)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Schema Poisoning (CAPEC-271)",
      "ddmc_optionA": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "ddmc_optionB": "Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.",
      "ddmc_optionC": "Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.",
      "ddmc_optionD": "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "prompts": [],
      "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Incorrect Register Defaults or Module Parameters (CWE-1221)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  If MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Incorrect Register Defaults or Module Parameters (CWE-1221)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "If MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation.",
      "ddmc_optionC": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionD": "During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.",
      "prompts": [],
      "instruction": "What is a method to mitigate Incorrect Register Defaults or Module Parameters (CWE-1221)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  If MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Regular Expression Exponential Blowup (CAPEC-492)?\nA.  On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).\nB.  Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.\nC.  Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program\nD.  Establish diversity among suppliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Regular Expression Exponential Blowup (CAPEC-492)",
      "ddmc_optionA": "On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).",
      "ddmc_optionB": "Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.",
      "ddmc_optionC": "Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program",
      "ddmc_optionD": "Establish diversity among suppliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.",
      "prompts": [],
      "instruction": "What is a method to mitigate Regular Expression Exponential Blowup (CAPEC-492)?\nA.  On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).\nB.  Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.\nC.  Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program\nD.  Establish diversity among suppliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)?\nA.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nB.  A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.\nC.  Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.\nD.  Include secure wear leveling algorithms and ensure they may not be bypassed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)",
      "ddmc_optionA": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
      "ddmc_optionB": "A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.",
      "ddmc_optionC": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.",
      "ddmc_optionD": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)?\nA.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nB.  A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.\nC.  Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.\nD.  Include secure wear leveling algorithms and ensure they may not be bypassed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Data Transfer Size Limits (T1030)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data Transfer Size Limits (T1030)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Data Transfer Size Limits (T1030)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Incorrect Check of Function Return Value (CWE-253)?\nA.  Ensure that certificates are checked for revoked status.\nB.  Properly check all functions which return a value.\nC.  Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Incorrect Check of Function Return Value (CWE-253)",
      "ddmc_optionA": "Ensure that certificates are checked for revoked status.",
      "ddmc_optionB": "Properly check all functions which return a value.",
      "ddmc_optionC": "Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Properly check all functions which return a value.",
      "prompts": [],
      "instruction": "How can you mitigate Incorrect Check of Function Return Value (CWE-253)?\nA.  Ensure that certificates are checked for revoked status.\nB.  Properly check all functions which return a value.\nC.  Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Time Discovery (T1124)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Time Discovery (T1124)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Issue a new credential to a user which supercedes their old credential.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect T1614 (System Location Discovery)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling <code> GetLocaleInfoW</code> to gather information. Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.(Citations: FBI Ragnar Locker 2020)\nB.  Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.\nC.  Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.\nD.  The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. . As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.(Citations: Microsoft SharePoint Logging)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1614 (System Location Discovery)",
      "ddmc_optionA": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling <code> GetLocaleInfoW</code> to gather information. Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.(Citations: FBI Ragnar Locker 2020)",
      "ddmc_optionB": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.",
      "ddmc_optionC": "Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.",
      "ddmc_optionD": "The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. . As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.(Citations: Microsoft SharePoint Logging)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling <code> GetLocaleInfoW</code> to gather information. Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.(Citations: FBI Ragnar Locker 2020)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect T1614 (System Location Discovery)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling <code> GetLocaleInfoW</code> to gather information. Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.(Citations: FBI Ragnar Locker 2020)\nB.  Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.\nC.  Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.\nD.  The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. . As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.(Citations: Microsoft SharePoint Logging)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)?\nA.  This kind of patch may not be feasible or implementable for all processors or all weaknesses.\nB.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nC.  Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.\nD.  A true random number generator should be implemented for cryptographic algorithms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)",
      "ddmc_optionA": "This kind of patch may not be feasible or implementable for all processors or all weaknesses.",
      "ddmc_optionB": "When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.",
      "ddmc_optionC": "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.",
      "ddmc_optionD": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)?\nA.  This kind of patch may not be feasible or implementable for all processors or all weaknesses.\nB.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nC.  Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.\nD.  A true random number generator should be implemented for cryptographic algorithms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-471 (Search Order Hijacking)?\nA.  FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.\nB.  Ensure that all user-supplied input is validated before use.\nC.  Design: Perform URL encoding\nD.  Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-471 (Search Order Hijacking)",
      "ddmc_optionA": "FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.",
      "ddmc_optionB": "Ensure that all user-supplied input is validated before use.",
      "ddmc_optionC": "Design: Perform URL encoding",
      "ddmc_optionD": "Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-471 (Search Order Hijacking)?\nA.  FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.\nB.  Ensure that all user-supplied input is validated before use.\nC.  Design: Perform URL encoding\nD.  Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)?\nA.  Do not store sensitive information in files which may be misinterpreted.\nB.  Prevention schemes mirror that of hard-coded password storage.\nC.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nD.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)",
      "ddmc_optionA": "Do not store sensitive information in files which may be misinterpreted.",
      "ddmc_optionB": "Prevention schemes mirror that of hard-coded password storage.",
      "ddmc_optionC": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
      "ddmc_optionD": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)?\nA.  Do not store sensitive information in files which may be misinterpreted.\nB.  Prevention schemes mirror that of hard-coded password storage.\nC.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nD.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Pass the Hash (T1550.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Pass the Hash (T1550.002)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionD": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Pass the Hash (T1550.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Screen Capture (T1113)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Passive physical link mapping only listens to network traffic as a means to map the physical layer.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Perform input validation for all content.\nB.  Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.\nC.  When using Bluetooth, set it to hidden or non-discoverable mode.\nD.  Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-125 (Flooding)",
      "ddmc_optionA": "Perform input validation for all content.",
      "ddmc_optionB": "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.",
      "ddmc_optionC": "When using Bluetooth, set it to hidden or non-discoverable mode.",
      "ddmc_optionD": "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Perform input validation for all content.\nB.  Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.\nC.  When using Bluetooth, set it to hidden or non-discoverable mode.\nD.  Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Handling of Missing Special Element (CWE-166)?\nA.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Enforce the use of strong mutual authentication mechanism between the two parties.\nC.  Implement the access control check first. Access should only be given to asset if agent is authorized.\nD.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Missing Special Element (CWE-166)",
      "ddmc_optionA": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "Enforce the use of strong mutual authentication mechanism between the two parties.",
      "ddmc_optionC": "Implement the access control check first. Access should only be given to asset if agent is authorized.",
      "ddmc_optionD": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Handling of Missing Special Element (CWE-166)?\nA.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Enforce the use of strong mutual authentication mechanism between the two parties.\nC.  Implement the access control check first. Access should only be given to asset if agent is authorized.\nD.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Blocking a lookup based on the query's domain name value.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking a lookup based on the query's domain name value.",
      "prompts": [],
      "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Password in Configuration File (CWE-260)?\nA.  Avoid storing passwords in easily accessible locations.\nB.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nC.  Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Password in Configuration File (CWE-260)",
      "ddmc_optionA": "Avoid storing passwords in easily accessible locations.",
      "ddmc_optionB": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_optionC": "Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Avoid storing passwords in easily accessible locations.",
      "prompts": [],
      "instruction": "What is a method to mitigate Password in Configuration File (CWE-260)?\nA.  Avoid storing passwords in easily accessible locations.\nB.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nC.  Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate RC Scripts (T1037.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Protect sensitive information with strong encryption.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "RC Scripts (T1037.004)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate RC Scripts (T1037.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Protect sensitive information with strong encryption.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Android Activity Hijack (CAPEC-501)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nB.  To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).\nC.  Implementation: Disable scripting languages such as JavaScript in browser\nD.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Android Activity Hijack (CAPEC-501)",
      "ddmc_optionA": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionB": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).",
      "ddmc_optionC": "Implementation: Disable scripting languages such as JavaScript in browser",
      "ddmc_optionD": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Android Activity Hijack (CAPEC-501)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nB.  To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).\nC.  Implementation: Disable scripting languages such as JavaScript in browser\nD.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis\nB.  Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis",
      "ddmc_optionB": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
      "prompts": [],
      "instruction": "What is a method to detect CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis\nB.  Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate clone() Method Without super.clone() (CWE-580)?\nA.  In some cases, you can eliminate the clone method altogether and use copy constructors.\nB.  Remove debug log files before deploying the application into production.\nC.  Protect log files against unauthorized read/write.\nD.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "clone() Method Without super.clone() (CWE-580)",
      "ddmc_optionA": "In some cases, you can eliminate the clone method altogether and use copy constructors.",
      "ddmc_optionB": "Remove debug log files before deploying the application into production.",
      "ddmc_optionC": "Protect log files against unauthorized read/write.",
      "ddmc_optionD": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "In some cases, you can eliminate the clone method altogether and use copy constructors.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate clone() Method Without super.clone() (CWE-580)?\nA.  In some cases, you can eliminate the clone method altogether and use copy constructors.\nB.  Remove debug log files before deploying the application into production.\nC.  Protect log files against unauthorized read/write.\nD.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Path Equivalence: '\\multiple\\\\internal\\backslash' (CWE-53)?\nA.  Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.\nB.  Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Equivalence: '\\multiple\\\\internal\\backslash' (CWE-53)",
      "ddmc_optionA": "Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.",
      "ddmc_optionB": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "How can you mitigate Path Equivalence: '\\multiple\\\\internal\\backslash' (CWE-53)?\nA.  Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.\nB.  Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate XQuery Injection (CAPEC-84)?\nA.  For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nB.  Design: Perform input allowlist validation on all XML input\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  Ensure immutable code or data is programmed into ROM or write-once memory.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "XQuery Injection (CAPEC-84)",
      "ddmc_optionA": "For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).",
      "ddmc_optionB": "Design: Perform input allowlist validation on all XML input",
      "ddmc_optionC": "Digitize documents and cryptographically sign them to verify authenticity.",
      "ddmc_optionD": "Ensure immutable code or data is programmed into ROM or write-once memory.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design: Perform input allowlist validation on all XML input",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate XQuery Injection (CAPEC-84)?\nA.  For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nB.  Design: Perform input allowlist validation on all XML input\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  Ensure immutable code or data is programmed into ROM or write-once memory.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Password Filter DLL (T1556.002)?\nA.  Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.(Citations: Clymb3r Function Hook Passwords Sept 2013)\nB.  Monitor for suspicious or unknown container images and pods in your environment. Deploy logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application pods to detect malicious activity at the cluster level. In Docker, the daemon log provides insight into remote API calls, including those that deploy containers. Logs for management services or applications used to deploy containers other than the native technologies themselves should also be monitored.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Password Filter DLL (T1556.002)",
      "ddmc_optionA": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.(Citations: Clymb3r Function Hook Passwords Sept 2013)",
      "ddmc_optionB": "Monitor for suspicious or unknown container images and pods in your environment. Deploy logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application pods to detect malicious activity at the cluster level. In Docker, the daemon log provides insight into remote API calls, including those that deploy containers. Logs for management services or applications used to deploy containers other than the native technologies themselves should also be monitored.",
      "ddmc_optionC": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.(Citations: Clymb3r Function Hook Passwords Sept 2013)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Password Filter DLL (T1556.002)?\nA.  Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.(Citations: Clymb3r Function Hook Passwords Sept 2013)\nB.  Monitor for suspicious or unknown container images and pods in your environment. Deploy logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application pods to detect malicious activity at the cluster level. In Docker, the daemon log provides insight into remote API calls, including those that deploy containers. Logs for management services or applications used to deploy containers other than the native technologies themselves should also be monitored.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nA.  Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.\nB.  Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Line Delimiters (CWE-144)",
      "ddmc_optionA": "Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.",
      "ddmc_optionB": "Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nA.  Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.\nB.  Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-684 (Incorrect Provision of Specified Functionality)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Ensure that your code strictly conforms to specifications.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-684 (Incorrect Provision of Specified Functionality)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Ensure that your code strictly conforms to specifications.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that your code strictly conforms to specifications.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-684 (Incorrect Provision of Specified Functionality)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Consider adhering to the following rules when allocating and managing an application's memory: Double check that the buffer is as large as specified. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space. If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Ensure that your code strictly conforms to specifications.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-470 (Expanding Control over the Operating System from the Database)?\nA.  Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.\nB.  Physically destroy memory and SIM cards for mobile devices not intended to be reused.\nC.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nD.  Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-470 (Expanding Control over the Operating System from the Database)",
      "ddmc_optionA": "Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.",
      "ddmc_optionB": "Physically destroy memory and SIM cards for mobile devices not intended to be reused.",
      "ddmc_optionC": "Ensure cryptographic elements have been sufficiently tested for weaknesses.",
      "ddmc_optionD": "Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-470 (Expanding Control over the Operating System from the Database)?\nA.  Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.\nB.  Physically destroy memory and SIM cards for mobile devices not intended to be reused.\nC.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nD.  Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect CWE-918 (Server-Side Request Forgery (SSRF))?\nA.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-918 (Server-Side Request Forgery (SSRF))",
      "ddmc_optionA": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect CWE-918 (Server-Side Request Forgery (SSRF))?\nA.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1562.009 (Safe Mode Boot)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1562.009 (Safe Mode Boot)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate T1562.009 (Safe Mode Boot)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption)?\nA.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nB.  Limit Content Provider permissions (read/write) as appropriate.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-323 (Reusing a Nonce, Key Pair in Encryption)",
      "ddmc_optionA": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "ddmc_optionB": "Limit Content Provider permissions (read/write) as appropriate.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption)?\nA.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nB.  Limit Content Provider permissions (read/write) as appropriate.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1597.002 (Purchase Technical Data)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Block users or groups from installing unapproved software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1597.002 (Purchase Technical Data)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Block users or groups from installing unapproved software.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate T1597.002 (Purchase Technical Data)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Block users or groups from installing unapproved software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Manipulate Registry Information (CAPEC-203)?\nA.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\nB.  Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.\nC.  Ensure deleted files are actually deleted.\nD.  Ensure browser sessions are regularly terminated and when their effective lifetime ends.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Manipulate Registry Information (CAPEC-203)",
      "ddmc_optionA": "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
      "ddmc_optionB": "Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.",
      "ddmc_optionC": "Ensure deleted files are actually deleted.",
      "ddmc_optionD": "Ensure browser sessions are regularly terminated and when their effective lifetime ends.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Manipulate Registry Information (CAPEC-203)?\nA.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\nB.  Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.\nC.  Ensure deleted files are actually deleted.\nD.  Ensure browser sessions are regularly terminated and when their effective lifetime ends.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate XML Flood (CAPEC-528)?\nA.  Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption\nB.  Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.\nC.  Implementation: Customizing HTTP error codes such as 404 or 500.\nD.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "XML Flood (CAPEC-528)",
      "ddmc_optionA": "Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption",
      "ddmc_optionB": "Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.",
      "ddmc_optionC": "Implementation: Customizing HTTP error codes such as 404 or 500.",
      "ddmc_optionD": "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
      "prompts": [],
      "instruction": "How can you mitigate XML Flood (CAPEC-528)?\nA.  Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption\nB.  Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.\nC.  Implementation: Customizing HTTP error codes such as 404 or 500.\nD.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of getlogin() in Multithreaded Application (CWE-558)?\nA.  Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nB.  Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.\nC.  Always verify the integrity of the software that is being installed.\nD.  Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of getlogin() in Multithreaded Application (CWE-558)",
      "ddmc_optionA": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
      "ddmc_optionB": "Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.",
      "ddmc_optionC": "Always verify the integrity of the software that is being installed.",
      "ddmc_optionD": "Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.",
      "prompts": [],
      "instruction": "How can you mitigate Use of getlogin() in Multithreaded Application (CWE-558)?\nA.  Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nB.  Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.\nC.  Always verify the integrity of the software that is being installed.\nD.  Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\nB.  Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Input Terminators (CWE-147)",
      "ddmc_optionA": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
      "ddmc_optionB": "Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\nB.  Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Intent Spoof (CAPEC-502)?\nA.  Prevent unknown or malicious software from loading through using an allowlist policy.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.\nD.  Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Intent Spoof (CAPEC-502)",
      "ddmc_optionA": "Prevent unknown or malicious software from loading through using an allowlist policy.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "ddmc_optionD": "Refer to the RFCs to safely decode URL.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "prompts": [],
      "instruction": "What is a method to mitigate Intent Spoof (CAPEC-502)?\nA.  Prevent unknown or malicious software from loading through using an allowlist policy.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.\nD.  Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1176 (Browser Extensions)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1176 (Browser Extensions)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate T1176 (Browser Extensions)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect CWE-535 (Exposure of Information Through Shell Error Message)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-535 (Exposure of Information Through Shell Error Message)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect CWE-535 (Exposure of Information Through Shell Error Message)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-499 (Serializable Class Containing Sensitive Data)?\nA.  Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.\nB.  Make sure to prevent serialization of your objects.\nC.  Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-499 (Serializable Class Containing Sensitive Data)",
      "ddmc_optionA": "Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.",
      "ddmc_optionB": "Make sure to prevent serialization of your objects.",
      "ddmc_optionC": "Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).",
      "ddmc_optionD": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Make sure to prevent serialization of your objects.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-499 (Serializable Class Containing Sensitive Data)?\nA.  Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.\nB.  Make sure to prevent serialization of your objects.\nC.  Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1033 (System Owner/User Discovery)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1033 (System Owner/User Discovery)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1033 (System Owner/User Discovery)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Network Trust Dependencies (T1590.003)",
      "ddmc_optionA": "Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "ddmc_optionB": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_optionD": "Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Using biological measures in order to authenticate a user.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Physical link mapping identifies and models the link connectivity of the network devices within a physical network.",
      "ddmc_optionC": "Using biological measures in order to authenticate a user.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Using biological measures in order to authenticate a user.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Data from Removable Media (T1025)?\nA.  The email removal technique deletes email files from system storage.\nB.  Employing file hash comparisons to detect known malware.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data from Removable Media (T1025)",
      "ddmc_optionA": "The email removal technique deletes email files from system storage.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Data from Removable Media (T1025)?\nA.  The email removal technique deletes email files from system storage.\nB.  Employing file hash comparisons to detect known malware.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1578.002 (Create Cloud Instance)?\nA.  The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)\nB.  Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>. These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citations: Apple Developer Doco Archive Run-Path, Wardle Dylib Hijack Vulnerable Apps, Github EmpireProject HijackScanner)\nC.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\nD.  Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1578.002 (Create Cloud Instance)",
      "ddmc_optionA": "The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)",
      "ddmc_optionB": "Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>. These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citations: Apple Developer Doco Archive Run-Path, Wardle Dylib Hijack Vulnerable Apps, Github EmpireProject HijackScanner)",
      "ddmc_optionC": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "ddmc_optionD": "Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)",
      "prompts": [],
      "instruction": "What is a method to detect T1578.002 (Create Cloud Instance)?\nA.  The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)\nB.  Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>. These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citations: Apple Developer Doco Archive Run-Path, Wardle Dylib Hijack Vulnerable Apps, Github EmpireProject HijackScanner)\nC.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\nD.  Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Services File Permissions Weakness (T1574.010)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Services File Permissions Weakness (T1574.010)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Service Discovery (T1007)?\nA.  Encrypting a file using a cryptographic key.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Service Discovery (T1007)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Service Discovery (T1007)?\nA.  Encrypting a file using a cryptographic key.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Application Window Discovery (T1010)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application Window Discovery (T1010)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Application Window Discovery (T1010)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-606 (Weakening of Cellular Encryption)?\nA.  Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.\nB.  Be mindful of your surroundings when discussing sensitive information in public areas.\nC.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nD.  Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-606 (Weakening of Cellular Encryption)",
      "ddmc_optionA": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.",
      "ddmc_optionB": "Be mindful of your surroundings when discussing sensitive information in public areas.",
      "ddmc_optionC": "Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.",
      "ddmc_optionD": "Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-606 (Weakening of Cellular Encryption)?\nA.  Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.\nB.  Be mindful of your surroundings when discussing sensitive information in public areas.\nC.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nD.  Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1505.005 (Terminal Services DLL)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nC.  Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)\nD.  Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1505.005 (Terminal Services DLL)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "ddmc_optionC": "Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)",
      "ddmc_optionD": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citations: University of Birmingham C2)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "prompts": [],
      "instruction": "How can you detect T1505.005 (Terminal Services DLL)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nC.  Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)\nD.  Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Assigning instead of Comparing (CWE-481)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Assigning instead of Comparing (CWE-481)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Assigning instead of Comparing (CWE-481)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Portable Executable Injection (T1055.002)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate Portable Executable Injection (T1055.002)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Firmware Not Updateable (CWE-1277)?\nA.  Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nB.  Implement the necessary functionality to allow the firmware to be updated.\nC.  Use industry standard APIs to synchronize your code.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Firmware Not Updateable (CWE-1277)",
      "ddmc_optionA": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.",
      "ddmc_optionB": "Implement the necessary functionality to allow the firmware to be updated.",
      "ddmc_optionC": "Use industry standard APIs to synchronize your code.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implement the necessary functionality to allow the firmware to be updated.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Firmware Not Updateable (CWE-1277)?\nA.  Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nB.  Implement the necessary functionality to allow the firmware to be updated.\nC.  Use industry standard APIs to synchronize your code.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-1070 (Serializable Data Element Containing non-Serializable Item Elements)?\nA.  Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.\nB.  Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nC.  Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.\nD.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1070 (Serializable Data Element Containing non-Serializable Item Elements)",
      "ddmc_optionA": "Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.",
      "ddmc_optionB": "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "ddmc_optionC": "Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.",
      "ddmc_optionD": "Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-1070 (Serializable Data Element Containing non-Serializable Item Elements)?\nA.  Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.\nB.  Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nC.  Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.\nD.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Sensitive Cookie in HTTPS Session Without 'Secure' Attribute (CWE-614)?\nA.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute (CWE-614)",
      "ddmc_optionA": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Sensitive Cookie in HTTPS Session Without 'Secure' Attribute (CWE-614)?\nA.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Session Fixation (CWE-384)?\nA.  For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.\nB.  For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.\nC.  Debugging information should not make its way into a production release.\nD.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Session Fixation (CWE-384)",
      "ddmc_optionA": "For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.",
      "ddmc_optionB": "For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.",
      "ddmc_optionC": "Debugging information should not make its way into a production release.",
      "ddmc_optionD": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.",
      "prompts": [],
      "instruction": "How can you mitigate Session Fixation (CWE-384)?\nA.  For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.\nB.  For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.\nC.  Debugging information should not make its way into a production release.\nD.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-71 (Using Unicode Encoding to Bypass Validation Logic)?\nA.  Design: Tunnel communications through a secure proxy\nB.  Monitor and control access to the configuration management system.\nC.  Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.\nD.  Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-71 (Using Unicode Encoding to Bypass Validation Logic)",
      "ddmc_optionA": "Design: Tunnel communications through a secure proxy",
      "ddmc_optionB": "Monitor and control access to the configuration management system.",
      "ddmc_optionC": "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.",
      "ddmc_optionD": "Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-71 (Using Unicode Encoding to Bypass Validation Logic)?\nA.  Design: Tunnel communications through a secure proxy\nB.  Monitor and control access to the configuration management system.\nC.  Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.\nD.  Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Restoring an entity's access to resources.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Embedded Malicious Code (CWE-506)?\nA.  Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.\nB.  Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.\nC.  Do not use the Class Loader when writing EJBs.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Embedded Malicious Code (CWE-506)",
      "ddmc_optionA": "Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.",
      "ddmc_optionB": "Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.",
      "ddmc_optionC": "Do not use the Class Loader when writing EJBs.",
      "ddmc_optionD": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Embedded Malicious Code (CWE-506)?\nA.  Do not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.\nB.  Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.\nC.  Do not use the Class Loader when writing EJBs.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)",
      "ddmc_optionA": "Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1055.002 (Portable Executable Injection)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1055.002 (Portable Executable Injection)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1055.002 (Portable Executable Injection)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Mobile Phishing (CAPEC-164)?\nA.  Implementation: use validation on both client and server side.\nB.  Backup device data before erasure to retain intellectual property and inside knowledge.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mobile Phishing (CAPEC-164)",
      "ddmc_optionA": "Implementation: use validation on both client and server side.",
      "ddmc_optionB": "Backup device data before erasure to retain intellectual property and inside knowledge.",
      "ddmc_optionC": "Protect environment variables against unauthorized read and write access.",
      "ddmc_optionD": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.",
      "prompts": [],
      "instruction": "What is a method to mitigate Mobile Phishing (CAPEC-164)?\nA.  Implementation: use validation on both client and server side.\nB.  Backup device data before erasure to retain intellectual property and inside knowledge.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Macro Symbols (CWE-152)",
      "ddmc_optionA": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionC": "Use a language that provides appropriate memory abstractions.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Fallback Channels (T1008)?\nA.  Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  <code>&lt;?php @eval($_POST['password']);&gt;</code> Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citations: Lee 2013, NSA Cyber Mitigating Web Shells, NSA Cyber Mitigating Web Shells, US-CERT Alert TA15-314A Web Shells)\nB.  Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\nC.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Fallback Channels (T1008)",
      "ddmc_optionA": "Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  <code>&lt;?php @eval($_POST['password']);&gt;</code> Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citations: Lee 2013, NSA Cyber Mitigating Web Shells, NSA Cyber Mitigating Web Shells, US-CERT Alert TA15-314A Web Shells)",
      "ddmc_optionB": "Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.",
      "ddmc_optionC": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)",
      "ddmc_optionD": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Fallback Channels (T1008)?\nA.  Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  <code>&lt;?php @eval($_POST['password']);&gt;</code> Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citations: Lee 2013, NSA Cyber Mitigating Web Shells, NSA Cyber Mitigating Web Shells, US-CERT Alert TA15-314A Web Shells)\nB.  Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\nC.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1205 (Traffic Signaling)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Modifying an application's configuration to reduce its attack surface.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1205 (Traffic Signaling)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Modifying an application's configuration to reduce its attack surface.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate T1205 (Traffic Signaling)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Modifying an application's configuration to reduce its attack surface.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  The process of temporarily disabling user accounts on a system or domain.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Agent (T1543.001)",
      "ddmc_optionA": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  The process of temporarily disabling user accounts on a system or domain.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring the data in a database.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Restoring the data in a database.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring the data in a database.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-467 (Cross Site Identification)?\nA.  Design: Enforce principle of least privilege\nB.  Encrypt and password-protect sensitive data.\nC.  Usage: Users should always explicitly log out from the social networking sites when done using them.\nD.  Only accept software updates from an official source.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-467 (Cross Site Identification)",
      "ddmc_optionA": "Design: Enforce principle of least privilege",
      "ddmc_optionB": "Encrypt and password-protect sensitive data.",
      "ddmc_optionC": "Usage: Users should always explicitly log out from the social networking sites when done using them.",
      "ddmc_optionD": "Only accept software updates from an official source.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Usage: Users should always explicitly log out from the social networking sites when done using them.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-467 (Cross Site Identification)?\nA.  Design: Enforce principle of least privilege\nB.  Encrypt and password-protect sensitive data.\nC.  Usage: Users should always explicitly log out from the social networking sites when done using them.\nD.  Only accept software updates from an official source.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Windows Credential Manager (T1555.004)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Windows Credential Manager (T1555.004)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "What is a method to mitigate Windows Credential Manager (T1555.004)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Unicode Encoding (CWE-176)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
      "ddmc_optionC": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmc_optionD": "Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1543.003 (Windows Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Restoring a file for an entity to access.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.003 (Windows Service)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1543.003 (Windows Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Restoring a file for an entity to access.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Time Discovery (T1124)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  Restoring a file for an entity to access.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Time Discovery (T1124)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  Restoring a file for an entity to access.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Following of a Certificate's Chain of Trust (CWE-296)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Search Order Hijacking (CAPEC-471)?\nA.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.\nB.  Design: Sign system DLLs so that unauthorized DLLs can be detected.\nC.  Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.\nD.  Ensure users are not reusing username/password combinations for multiple systems, applications, or services.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Search Order Hijacking (CAPEC-471)",
      "ddmc_optionA": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.",
      "ddmc_optionB": "Design: Sign system DLLs so that unauthorized DLLs can be detected.",
      "ddmc_optionC": "Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.",
      "ddmc_optionD": "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design: Sign system DLLs so that unauthorized DLLs can be detected.",
      "prompts": [],
      "instruction": "What is a method to mitigate Search Order Hijacking (CAPEC-471)?\nA.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.\nB.  Design: Sign system DLLs so that unauthorized DLLs can be detected.\nC.  Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.\nD.  Ensure users are not reusing username/password combinations for multiple systems, applications, or services.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Captured Tickets (Pass The Ticket) (CAPEC-645)",
      "ddmc_optionA": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.",
      "ddmc_optionB": "Enforce regular patching of software.",
      "ddmc_optionC": "Design: Enforce principle of least privilege",
      "ddmc_optionD": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Bootkit (T1542.003)?\nA.  Protect sensitive information with strong encryption.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bootkit (T1542.003)",
      "ddmc_optionA": "Protect sensitive information with strong encryption.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionD": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate Bootkit (T1542.003)?\nA.  Protect sensitive information with strong encryption.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Path Equivalence: '/./' (Single Dot Directory) (CWE-55)?\nA.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\nB.  Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Equivalence: '/./' (Single Dot Directory) (CWE-55)",
      "ddmc_optionA": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]",
      "ddmc_optionB": "Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "How can you mitigate Path Equivalence: '/./' (Single Dot Directory) (CWE-55)?\nA.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\nB.  Processor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Creation of Temporary File in Directory with Insecure Permissions (CWE-379)",
      "ddmc_optionA": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionC": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "ddmc_optionD": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
      "prompts": [],
      "instruction": "How can you mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Value Delimiters (CWE-142)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.\nD.  When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Value Delimiters (CWE-142)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
      "ddmc_optionC": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
      "ddmc_optionD": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Value Delimiters (CWE-142)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.\nD.  When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Proxy (T1090.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Not Using Password Aging (CWE-262)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Not Using Password Aging (CWE-262)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_optionD": "Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Not Using Password Aging (CWE-262)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-1239 (Improper Zeroization of Hardware Register)?\nA.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nB.  Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1239 (Improper Zeroization of Hardware Register)",
      "ddmc_optionA": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionB": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
      "ddmc_optionC": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionD": "Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-1239 (Improper Zeroization of Hardware Register)?\nA.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nB.  Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restricting a user account's access to resources.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restricting a user account's access to resources.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Uninitialized Variable (CWE-457)?\nA.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nB.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\nC.  Refactor your program so that you do not have to dynamically generate code.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Uninitialized Variable (CWE-457)",
      "ddmc_optionA": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
      "ddmc_optionB": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.",
      "ddmc_optionC": "Refactor your program so that you do not have to dynamically generate code.",
      "ddmc_optionD": "The choice could be made to use a language that is not susceptible to these issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "The choice could be made to use a language that is not susceptible to these issues.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Uninitialized Variable (CWE-457)?\nA.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nB.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\nC.  Refactor your program so that you do not have to dynamically generate code.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1053.005 (Scheduled Task)?\nA.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nB.  Employing file hash comparisons to detect known malware.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an entity's access to resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1053.005 (Scheduled Task)",
      "ddmc_optionA": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Restoring an entity's access to resources.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1053.005 (Scheduled Task)?\nA.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nB.  Employing file hash comparisons to detect known malware.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an entity's access to resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Double Free (CWE-415)?\nA.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nB.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Double Free (CWE-415)",
      "ddmc_optionA": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionB": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmc_optionC": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).",
      "ddmc_optionD": "Use a static analysis tool to find double free instances.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use a static analysis tool to find double free instances.",
      "prompts": [],
      "instruction": "What is a method to mitigate Double Free (CWE-415)?\nA.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nB.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1048 (Exfiltration Over Alternative Protocol)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Encrypting a file using a cryptographic key.\nC.  Restoring an software configuration.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1048 (Exfiltration Over Alternative Protocol)",
      "ddmc_optionA": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1048 (Exfiltration Over Alternative Protocol)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Encrypting a file using a cryptographic key.\nC.  Restoring an software configuration.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Application or System Exploitation (T1499.004)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application or System Exploitation (T1499.004)",
      "ddmc_optionA": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionB": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "What is a method to mitigate Application or System Exploitation (T1499.004)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmc_optionA": "By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.",
      "ddmc_optionD": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Web Shell (T1505.003)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Shell (T1505.003)",
      "ddmc_optionA": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate Web Shell (T1505.003)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)?\nA.  Protect access control list files.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Implement the validate() method and call super.validate() within that method.\nD.  Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)",
      "ddmc_optionA": "Protect access control list files.",
      "ddmc_optionB": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
      "ddmc_optionC": "Implement the validate() method and call super.validate() within that method.",
      "ddmc_optionD": "Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Protect access control list files.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)?\nA.  Protect access control list files.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Implement the validate() method and call super.validate() within that method.\nD.  Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  File eviction techniques evict files from system storage.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  File eviction techniques evict files from system storage.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Serializable Class Containing Sensitive Data (CWE-499)?\nA.  The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Serializable Class Containing Sensitive Data (CWE-499)",
      "ddmc_optionA": "The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Serializable Class Containing Sensitive Data (CWE-499)?\nA.  The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Forced Integer Overflow (CAPEC-92)?\nA.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nB.  Always do bound checking before consuming user input data.\nC.  Ensure deleted files are actually deleted.\nD.  Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Integer Overflow (CAPEC-92)",
      "ddmc_optionA": "Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.",
      "ddmc_optionB": "Always do bound checking before consuming user input data.",
      "ddmc_optionC": "Ensure deleted files are actually deleted.",
      "ddmc_optionD": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Always do bound checking before consuming user input data.",
      "prompts": [],
      "instruction": "How can you mitigate Forced Integer Overflow (CAPEC-92)?\nA.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nB.  Always do bound checking before consuming user input data.\nC.  Ensure deleted files are actually deleted.\nD.  Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Public cloneable() Method Without Final ('Object Hijack') (CWE-491)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Make the cloneable() method final.\nC.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nD.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Public cloneable() Method Without Final ('Object Hijack') (CWE-491)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "Make the cloneable() method final.",
      "ddmc_optionC": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionD": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Make the cloneable() method final.",
      "prompts": [],
      "instruction": "How can you mitigate Public cloneable() Method Without Final ('Object Hijack') (CWE-491)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Make the cloneable() method final.\nC.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nD.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-352 (Cross-Site Request Forgery (CSRF))?\nA.  Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-352 (Cross-Site Request Forgery (CSRF))",
      "ddmc_optionA": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.",
      "ddmc_optionB": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]",
      "prompts": [],
      "instruction": "How can you mitigate CWE-352 (Cross-Site Request Forgery (CSRF))?\nA.  Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)",
      "ddmc_optionA": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_optionB": "Use static analysis tools to spot return of the address of a stack variable.",
      "ddmc_optionC": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Use umask() with the correct argument.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nD.  Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Support for Integrity Check (CWE-353)",
      "ddmc_optionA": "Use umask() with the correct argument.",
      "ddmc_optionB": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "ddmc_optionC": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_optionD": "Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "prompts": [],
      "instruction": "What is a method to mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Use umask() with the correct argument.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nD.  Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Proc Memory (T1055.009)?\nA.  Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Artifacts and evidence of symmetric key exchange may be recoverable by analyzing network traffic or looking for hard-coded values within malware. If recovered, these keys can be used to decrypt network data from command and control channels.(Citations: University of Birmingham C2)\nC.  File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Proc Memory (T1055.009)",
      "ddmc_optionA": "Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity.",
      "ddmc_optionB": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Artifacts and evidence of symmetric key exchange may be recoverable by analyzing network traffic or looking for hard-coded values within malware. If recovered, these keys can be used to decrypt network data from command and control channels.(Citations: University of Birmingham C2)",
      "ddmc_optionC": "File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",
      "ddmc_optionD": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",
      "prompts": [],
      "instruction": "What is a method to detect Proc Memory (T1055.009)?\nA.  Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Artifacts and evidence of symmetric key exchange may be recoverable by analyzing network traffic or looking for hard-coded values within malware. If recovered, these keys can be used to decrypt network data from command and control channels.(Citations: University of Birmingham C2)\nC.  File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Permissive Regular Expression (CWE-625)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Permissive Regular Expression (CWE-625)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "ddmc_optionC": "When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.",
      "prompts": [],
      "instruction": "What is a method to mitigate Permissive Regular Expression (CWE-625)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Hard-coded Credentials (CWE-798)?\nA.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\nB.  Use the template engine's sandbox or restricted mode, if available.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nD.  Regularly wrap sub-expressions in parentheses, especially in security-critical code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Hard-coded Credentials (CWE-798)",
      "ddmc_optionA": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.",
      "ddmc_optionB": "Use the template engine's sandbox or restricted mode, if available.",
      "ddmc_optionC": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_optionD": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Hard-coded Credentials (CWE-798)?\nA.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\nB.  Use the template engine's sandbox or restricted mode, if available.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nD.  Regularly wrap sub-expressions in parentheses, especially in security-critical code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Restoring software to a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Restoring software to a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Restoring software to a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credentials in Registry (T1552.002)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Employing file hash comparisons to detect known malware.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credentials in Registry (T1552.002)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Credentials in Registry (T1552.002)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Employing file hash comparisons to detect known malware.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Network Boundary Bridging (T1599)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Set and enforce secure password policies for accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Boundary Bridging (T1599)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Set and enforce secure password policies for accounts.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Network Boundary Bridging (T1599)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Set and enforce secure password policies for accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing file hash comparisons to detect known malware.\nC.  Blocking the resolution of any subdomain of a specified domain name.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Blocking the resolution of any subdomain of a specified domain name.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing file hash comparisons to detect known malware.\nC.  Blocking the resolution of any subdomain of a specified domain name.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_optionC": "Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate DTD Injection (CAPEC-228)?\nA.  Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\nB.  Use a language or compiler that performs automatic bounds checking.\nC.  Perform output validation for all remote content.\nD.  Implementation: Use XML parsing tools that protect against DTD attacks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "DTD Injection (CAPEC-228)",
      "ddmc_optionA": "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
      "ddmc_optionB": "Use a language or compiler that performs automatic bounds checking.",
      "ddmc_optionC": "Perform output validation for all remote content.",
      "ddmc_optionD": "Implementation: Use XML parsing tools that protect against DTD attacks.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implementation: Use XML parsing tools that protect against DTD attacks.",
      "prompts": [],
      "instruction": "What is a method to mitigate DTD Injection (CAPEC-228)?\nA.  Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\nB.  Use a language or compiler that performs automatic bounds checking.\nC.  Perform output validation for all remote content.\nD.  Implementation: Use XML parsing tools that protect against DTD attacks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "ddmc_optionA": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "Block users or groups from installing unapproved software.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Block users or groups from installing unapproved software.",
      "prompts": [],
      "instruction": "How can you mitigate Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Container Orchestration Job (T1053.007)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Container Orchestration Job (T1053.007)",
      "ddmc_optionA": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Container Orchestration Job (T1053.007)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Code Repositories (T1213.003)?\nA.  Restoring software to a host.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The detection of an internal host relaying traffic between the internal network and the external network.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Code Repositories (T1213.003)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "What is a method to mitigate Code Repositories (T1213.003)?\nA.  Restoring software to a host.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The detection of an internal host relaying traffic between the internal network and the external network.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Missing Ability to Patch ROM Code (CWE-1310)?\nA.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nB.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nC.  Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.\nD.  Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Ability to Patch ROM Code (CWE-1310)",
      "ddmc_optionA": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionB": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
      "ddmc_optionC": "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.",
      "ddmc_optionD": "Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Missing Ability to Patch ROM Code (CWE-1310)?\nA.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nB.  Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nC.  Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.\nD.  Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1574.004 (Dylib Hijacking)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.004 (Dylib Hijacking)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1574.004 (Dylib Hijacking)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Choose a language that provides automatic memory management.\nB.  Merge common functionality into a single function and then call that function from across the entire code base.\nC.  Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-656 (Reliance on Security Through Obscurity)",
      "ddmc_optionA": "Choose a language that provides automatic memory management.",
      "ddmc_optionB": "Merge common functionality into a single function and then call that function from across the entire code base.",
      "ddmc_optionC": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Choose a language that provides automatic memory management.\nB.  Merge common functionality into a single function and then call that function from across the entire code base.\nC.  Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Obsolete Function (CWE-477)?\nA.  Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.\nB.  Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Obsolete Function (CWE-477)",
      "ddmc_optionA": "Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.",
      "ddmc_optionB": "Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Obsolete Function (CWE-477)?\nA.  Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.\nB.  Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-641 (Improper Restriction of Names for Files and Other Resources)",
      "ddmc_optionA": "Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.",
      "ddmc_optionB": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionC": "Do not allow users to control names of resources used on the server side.",
      "ddmc_optionD": "Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow users to control names of resources used on the server side.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  None. This attack happens offline.\nB.  Authentication attempts use credentials that have been used previously by the account in question.\nC.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nD.  Software being run on a system matches a file signature found in a malware database\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "None. This attack happens offline.",
      "ddmc_optionB": "Authentication attempts use credentials that have been used previously by the account in question.",
      "ddmc_optionC": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "ddmc_optionD": "Software being run on a system matches a file signature found in a malware database",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Authentication attempts use credentials that have been used previously by the account in question.",
      "prompts": [],
      "instruction": "How can you detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  None. This attack happens offline.\nB.  Authentication attempts use credentials that have been used previously by the account in question.\nC.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nD.  Software being run on a system matches a file signature found in a malware database\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Always verify and authenticate the source of the message.\nD.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Input Terminators (CWE-147)",
      "ddmc_optionA": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Always verify and authenticate the source of the message.",
      "ddmc_optionD": "In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Always verify and authenticate the source of the message.\nD.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1518.001 (Security Software Discovery)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1518.001 (Security Software Discovery)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1518.001 (Security Software Discovery)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Obsolete Function (CWE-477)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nD.  Consider seriously the security implications of using an obsolete function. Consider using alternate functions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Obsolete Function (CWE-477)",
      "ddmc_optionA": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
      "ddmc_optionB": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_optionC": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_optionD": "Consider seriously the security implications of using an obsolete function. Consider using alternate functions.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Consider seriously the security implications of using an obsolete function. Consider using alternate functions.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Obsolete Function (CWE-477)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nD.  Consider seriously the security implications of using an obsolete function. Consider using alternate functions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Social Media Accounts (T1586.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Protect sensitive information with strong encryption.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Social Media Accounts (T1586.001)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Social Media Accounts (T1586.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Protect sensitive information with strong encryption.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Infrastructure Discovery (T1580)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Infrastructure Discovery (T1580)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Infrastructure Discovery (T1580)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).\nB.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nC.  Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.\nD.  The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Creation of Temporary File in Directory with Insecure Permissions (CWE-379)",
      "ddmc_optionA": "Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).",
      "ddmc_optionB": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.",
      "ddmc_optionC": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
      "ddmc_optionD": "The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).\nB.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nC.  Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.\nD.  The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1548.001 (Setuid and Setgid)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Restoring an software configuration.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1548.001 (Setuid and Setgid)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1548.001 (Setuid and Setgid)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Restoring an software configuration.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Encrypting a file using a cryptographic key.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Encrypting a file using a cryptographic key.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Terminating a running application process on a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Terminating a running application process on a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Terminating a running application process on a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring software to a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring software to a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Threat Intel Vendors (T1597.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Threat Intel Vendors (T1597.001)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Threat Intel Vendors (T1597.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Fast Flux DNS (T1568.001)?\nA.  In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.\nB.  Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\nC.  Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.\nD.  Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Fast Flux DNS (T1568.001)",
      "ddmc_optionA": "In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.",
      "ddmc_optionB": "Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
      "ddmc_optionC": "Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.",
      "ddmc_optionD": "Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.",
      "prompts": [],
      "instruction": "What is a method to detect Fast Flux DNS (T1568.001)?\nA.  In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.\nB.  Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\nC.  Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.\nD.  Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Using kernel-level capabilities to isolate processes.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Using kernel-level capabilities to isolate processes.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Passing Mutable Objects to an Untrusted Method (CWE-374)?\nA.  In Windows environments, use proper access control for the associated device or device namespace. See References.\nB.  Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Pass in data which should not be altered as constant or immutable.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Passing Mutable Objects to an Untrusted Method (CWE-374)",
      "ddmc_optionA": "In Windows environments, use proper access control for the associated device or device namespace. See References.",
      "ddmc_optionB": "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.",
      "ddmc_optionC": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmc_optionD": "Pass in data which should not be altered as constant or immutable.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Pass in data which should not be altered as constant or immutable.",
      "prompts": [],
      "instruction": "What is a method to mitigate Passing Mutable Objects to an Untrusted Method (CWE-374)?\nA.  In Windows environments, use proper access control for the associated device or device namespace. See References.\nB.  Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Pass in data which should not be altered as constant or immutable.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Brute Force (T1110)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Brute Force (T1110)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "prompts": [],
      "instruction": "How can you mitigate Brute Force (T1110)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Encrypted Channel (T1573)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Encrypted Channel (T1573)",
      "ddmc_optionA": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)",
      "ddmc_optionB": "Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmc_optionC": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)",
      "ddmc_optionD": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)",
      "prompts": [],
      "instruction": "What is a method to detect Encrypted Channel (T1573)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Netsh Helper DLL (T1546.007)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "prompts": [],
      "instruction": "How can you mitigate Netsh Helper DLL (T1546.007)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Network Topology (T1590.004)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Topology (T1590.004)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionC": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Network Topology (T1590.004)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Restoring a user account's access to resources by unlocking a locked User Account.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CMSTP (T1218.003)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring a file for an entity to access.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "What is a method to mitigate CMSTP (T1218.003)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring a file for an entity to access.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Traffic Intercept (CAPEC-609)",
      "ddmc_optionA": "Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.",
      "ddmc_optionD": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1033 (System Owner/User Discovery)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1033 (System Owner/User Discovery)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate T1033 (System Owner/User Discovery)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Using kernel-level capabilities to isolate processes.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Analyzing database queries to detect SQL Injection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Analyzing database queries to detect SQL Injection.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Analyzing database queries to detect SQL Injection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Taint Shared Content (T1080)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restricting network traffic originating from any location.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Taint Shared Content (T1080)",
      "ddmc_optionA": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Deploying a network resource for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "How can you mitigate Taint Shared Content (T1080)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restricting network traffic originating from any location.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)?\nA.  Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)",
      "ddmc_optionA": "Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)?\nA.  Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Verification of Source of a Communication Channel (CWE-940)?\nA.  Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\nB.  Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.\nC.  Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.\nD.  An application must, at all times, keep track of network resources and meter their usage appropriately.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Verification of Source of a Communication Channel (CWE-940)",
      "ddmc_optionA": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.",
      "ddmc_optionB": "Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.",
      "ddmc_optionC": "Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.",
      "ddmc_optionD": "An application must, at all times, keep track of network resources and meter their usage appropriately.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Verification of Source of a Communication Channel (CWE-940)?\nA.  Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\nB.  Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.\nC.  Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.\nD.  An application must, at all times, keep track of network resources and meter their usage appropriately.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cross Site Tracing (CAPEC-107)?\nA.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nB.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\nC.  Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cross Site Tracing (CAPEC-107)",
      "ddmc_optionA": "Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.",
      "ddmc_optionB": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)",
      "ddmc_optionC": "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.",
      "ddmc_optionD": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cross Site Tracing (CAPEC-107)?\nA.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nB.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\nC.  Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1074.001 (Local Data Staging)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1074.001 (Local Data Staging)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Space after Filename (T1036.006)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exploitation for Privilege Escalation (T1068)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmc_optionA": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exploitation for Privilege Escalation (T1068)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Agent (T1543.001)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Disable or Modify System Firewall (T1562.004)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Restoring a file for an entity to access.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Disable or Modify System Firewall (T1562.004)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Disable or Modify System Firewall (T1562.004)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Restoring a file for an entity to access.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.\nB.  Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.\nC.  When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.\nD.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Security Version Number Mutable to Older Versions (CWE-1328)",
      "ddmc_optionA": "In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.",
      "ddmc_optionB": "Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.",
      "ddmc_optionC": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.",
      "ddmc_optionD": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.\nB.  Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.\nC.  When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.\nD.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Terminating a running application process on a computer system.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Scheduled Task (T1053.005)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Terminating a running application process on a computer system.",
      "ddmc_optionD": "Using a digital signature to authenticate a file before opening.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Terminating a running application process on a computer system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Terminating a running application process on a computer system.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nB.  Many incorrect login attempts are detected by the system.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Data is being transferred and/or removed from systems/applications within the network.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "ddmc_optionB": "Many incorrect login attempts are detected by the system.",
      "ddmc_optionC": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "ddmc_optionD": "Data is being transferred and/or removed from systems/applications within the network.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "prompts": [],
      "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nB.  Many incorrect login attempts are detected by the system.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Data is being transferred and/or removed from systems/applications within the network.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Insufficient Verification of Data Authenticity (CWE-345)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)\nD.  To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Insufficient Verification of Data Authenticity (CWE-345)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)",
      "ddmc_optionD": "To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Insufficient Verification of Data Authenticity (CWE-345)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)\nD.  To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Leveraging Race Conditions (CAPEC-26)?\nA.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nB.  Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.\nC.  Pay attention to concurrency problems related to the access of resources.\nD.  Ensure all input content that is delivered to client is sanitized against an acceptable content specification.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Leveraging Race Conditions (CAPEC-26)",
      "ddmc_optionA": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "ddmc_optionB": "Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.",
      "ddmc_optionC": "Pay attention to concurrency problems related to the access of resources.",
      "ddmc_optionD": "Ensure all input content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Pay attention to concurrency problems related to the access of resources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Leveraging Race Conditions (CAPEC-26)?\nA.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nB.  Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.\nC.  Pay attention to concurrency problems related to the access of resources.\nD.  Ensure all input content that is delivered to client is sanitized against an acceptable content specification.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Restoring a file for an entity to access.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting a user account's access to resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Restricting a user account's access to resources.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing changes in service binary files by comparing to a source of truth.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Restoring a file for an entity to access.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting a user account's access to resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cellular Broadcast Message Request (CAPEC-618)?\nA.  Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.\nB.  Frequent changing of mobile number.\nC.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nD.  Use static analysis tools to find race conditions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Broadcast Message Request (CAPEC-618)",
      "ddmc_optionA": "Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.",
      "ddmc_optionB": "Frequent changing of mobile number.",
      "ddmc_optionC": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
      "ddmc_optionD": "Use static analysis tools to find race conditions.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Frequent changing of mobile number.",
      "prompts": [],
      "instruction": "How can you mitigate Cellular Broadcast Message Request (CAPEC-618)?\nA.  Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.\nB.  Frequent changing of mobile number.\nC.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nD.  Use static analysis tools to find race conditions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Data Encrypted for Impact (T1486)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data Encrypted for Impact (T1486)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Data Encrypted for Impact (T1486)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spyware (CWE-512)?\nA.  Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.\nB.  Use spyware detection and removal software.\nC.  Refactor your code to avoid using reflection.\nD.  For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spyware (CWE-512)",
      "ddmc_optionA": "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.",
      "ddmc_optionB": "Use spyware detection and removal software.",
      "ddmc_optionC": "Refactor your code to avoid using reflection.",
      "ddmc_optionD": "For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use spyware detection and removal software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spyware (CWE-512)?\nA.  Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.\nB.  Use spyware detection and removal software.\nC.  Refactor your code to avoid using reflection.\nD.  For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1547.003 (Time Providers)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.003 (Time Providers)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1547.003 (Time Providers)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Inhibit System Recovery (T1490)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Inhibit System Recovery (T1490)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "prompts": [],
      "instruction": "How can you mitigate Inhibit System Recovery (T1490)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Rename System Utilities (T1036.003)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rename System Utilities (T1036.003)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "How can you mitigate Rename System Utilities (T1036.003)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Export of Android Application Components (CWE-926)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Export of Android Application Components (CWE-926)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Incorrect Regular Expression (CWE-185)?\nA.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nB.  Do not use \"_blank\" targets. However, this can affect the usability of the application.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Incorrect Regular Expression (CWE-185)",
      "ddmc_optionA": "When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.",
      "ddmc_optionB": "Do not use \"_blank\" targets. However, this can affect the usability of the application.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Incorrect Regular Expression (CWE-185)?\nA.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nB.  Do not use \"_blank\" targets. However, this can affect the usability of the application.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Trusted Relationship (T1199)?\nA.  Restoring a file for an entity to access.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Trusted Relationship (T1199)?\nA.  Restoring a file for an entity to access.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1574.004 (Dylib Hijacking)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Initiating a host's reboot sequence to terminate all running processes.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.004 (Dylib Hijacking)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1574.004 (Dylib Hijacking)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Initiating a host's reboot sequence to terminate all running processes.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate File and Directory Discovery (T1083)?\nA.  Restoring an software configuration.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Discovery (T1083)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate File and Directory Discovery (T1083)?\nA.  Restoring an software configuration.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Modifying system configuration to increase password strength.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)?\nA.  Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.\nB.  Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.\nC.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\nD.  Provide clear upper and lower bounds on the scale of any protocols designed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)",
      "ddmc_optionA": "Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.",
      "ddmc_optionB": "Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.",
      "ddmc_optionC": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "ddmc_optionD": "Provide clear upper and lower bounds on the scale of any protocols designed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "prompts": [],
      "instruction": "How can you mitigate Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)?\nA.  Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.\nB.  Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.\nC.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\nD.  Provide clear upper and lower bounds on the scale of any protocols designed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Mavinject (T1218.013)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  An authentication token created for the purposes of deceiving an adversary.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mavinject (T1218.013)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionC": "An authentication token created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Mavinject (T1218.013)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  An authentication token created for the purposes of deceiving an adversary.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionB": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "prompts": [],
      "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)?\nA.  Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means\nB.  Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.\nC.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\nD.  Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)",
      "ddmc_optionA": "Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means",
      "ddmc_optionB": "Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.",
      "ddmc_optionC": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "ddmc_optionD": "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)?\nA.  Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means\nB.  Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.\nC.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\nD.  Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Windows Service (T1543.003)?\nA.  Restoring the data in a database.\nB.  Restoring an software configuration.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Windows Service (T1543.003)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Windows Service (T1543.003)?\nA.  Restoring the data in a database.\nB.  Restoring an software configuration.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1499.003 (Application Exhaustion Flood)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1499.003 (Application Exhaustion Flood)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1499.003 (Application Exhaustion Flood)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Encrypting a hard disk partition to prevent cleartext access to a file system.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Encrypting a hard disk partition to prevent cleartext access to a file system.",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Encrypting a hard disk partition to prevent cleartext access to a file system.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Signature Spoofing by Key Recreation (CAPEC-485)?\nA.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nB.  Use multifactor authentication.\nC.  Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution\nD.  2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Signature Spoofing by Key Recreation (CAPEC-485)",
      "ddmc_optionA": "Ensure cryptographic elements have been sufficiently tested for weaknesses.",
      "ddmc_optionB": "Use multifactor authentication.",
      "ddmc_optionC": "Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution",
      "ddmc_optionD": "2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure cryptographic elements have been sufficiently tested for weaknesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate Signature Spoofing by Key Recreation (CAPEC-485)?\nA.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nB.  Use multifactor authentication.\nC.  Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution\nD.  2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Windows Admin Shares with Stolen Credentials (CAPEC-561)",
      "ddmc_optionA": "Enforce regular patching of software.",
      "ddmc_optionB": "Design: Enforce principle of least privilege.",
      "ddmc_optionC": "Do not allow accounts to be a local administrator on more than one system.",
      "ddmc_optionD": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow accounts to be a local administrator on more than one system.",
      "prompts": [],
      "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Replicating Malicious Code (Virus or Worm) (CWE-509)?\nA.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nB.  Perform input validation on user data.\nC.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\nD.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replicating Malicious Code (Virus or Worm) (CWE-509)",
      "ddmc_optionA": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.",
      "ddmc_optionB": "Perform input validation on user data.",
      "ddmc_optionC": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.",
      "ddmc_optionD": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.",
      "prompts": [],
      "instruction": "How can you mitigate Replicating Malicious Code (Virus or Worm) (CWE-509)?\nA.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nB.  Perform input validation on user data.\nC.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\nD.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an entity's access to resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmc_optionA": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "prompts": [],
      "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an entity's access to resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Clear Command History (T1070.003)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nD.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Command History (T1070.003)",
      "ddmc_optionA": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionB": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionC": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_optionD": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Clear Command History (T1070.003)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nD.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionD": "This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.",
      "prompts": [],
      "instruction": "What is a method to detect CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1558.001 (Golden Ticket)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.001 (Golden Ticket)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1558.001 (Golden Ticket)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Web Session Cookie (T1539)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Web Session Cookie (T1539)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Modifying an application's configuration to reduce its attack surface.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmc_optionA": "Modifying an application's configuration to reduce its attack surface.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Modifying an application's configuration to reduce its attack surface.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Double Free (CWE-415)?\nA.  Choose a language that provides automatic memory management.\nB.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.\nD.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Double Free (CWE-415)",
      "ddmc_optionA": "Choose a language that provides automatic memory management.",
      "ddmc_optionB": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
      "ddmc_optionC": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.",
      "ddmc_optionD": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Choose a language that provides automatic memory management.",
      "prompts": [],
      "instruction": "How can you mitigate Double Free (CWE-415)?\nA.  Choose a language that provides automatic memory management.\nB.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.\nD.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring the data in a database.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Proxy (T1090.002)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring the data in a database.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1218.002 (Control Panel)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1218.002 (Control Panel)",
      "ddmc_optionA": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionB": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "How can you mitigate T1218.002 (Control Panel)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transmitted Data Manipulation (T1565.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transmitted Data Manipulation (T1565.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Missing Release of Resource after Effective Lifetime (CWE-772)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.\nC.  It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.\nD.  Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Release of Resource after Effective Lifetime (CWE-772)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
      "ddmc_optionC": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.",
      "ddmc_optionD": "Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Missing Release of Resource after Effective Lifetime (CWE-772)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.\nC.  It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.\nD.  Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Vulnerability Scanning (T1595.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Vulnerability Scanning (T1595.002)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Vulnerability Scanning (T1595.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.",
      "ddmc_optionD": "Use a static analysis tool to find double free instances.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-253 (Incorrect Check of Function Return Value)?\nA.  Use static analysis tools to spot such issues in your code.\nB.  Use a language or compiler that uses exceptions and requires the catching of those exceptions.\nC.  If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\nD.  Ensure that proper authentication is included in the system design.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-253 (Incorrect Check of Function Return Value)",
      "ddmc_optionA": "Use static analysis tools to spot such issues in your code.",
      "ddmc_optionB": "Use a language or compiler that uses exceptions and requires the catching of those exceptions.",
      "ddmc_optionC": "If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.",
      "ddmc_optionD": "Ensure that proper authentication is included in the system design.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use a language or compiler that uses exceptions and requires the catching of those exceptions.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-253 (Incorrect Check of Function Return Value)?\nA.  Use static analysis tools to spot such issues in your code.\nB.  Use a language or compiler that uses exceptions and requires the catching of those exceptions.\nC.  If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\nD.  Ensure that proper authentication is included in the system design.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Issue a new credential to a user which supercedes their old credential.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionB": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Modifying system configuration to increase password strength.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Preventing execution of any address in a memory region other than the code segment.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Issue a new credential to a user which supercedes their old credential.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Set and enforce secure password policies for accounts.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transport Agent (T1505.002)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Set and enforce secure password policies for accounts.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Restricting a user account's access to resources.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Host Software Binary (T1554)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionC": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Restricting a user account's access to resources.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Data Encoding (T1132)?\nA.  On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nC.  Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the <code>ZwSetEaFile</code> and <code>ZwQueryEaFile</code> Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]</code>) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f. The Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir /r</code> command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream</code> parameter to interact with ADSs.  (Citations: Journey into IR ZeroAccess NTFS EA, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, SpectorOps Host-Based Jul 2017, Microsoft ADS Mar 2014, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, Symantec ADS May 2009, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014)\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Data Encoding (T1132)",
      "ddmc_optionA": "On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)",
      "ddmc_optionB": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_optionC": "Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the <code>ZwSetEaFile</code> and <code>ZwQueryEaFile</code> Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]</code>) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f. The Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir /r</code> command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream</code> parameter to interact with ADSs.  (Citations: Journey into IR ZeroAccess NTFS EA, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, SpectorOps Host-Based Jul 2017, Microsoft ADS Mar 2014, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, Symantec ADS May 2009, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014)",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "What is a method to detect Data Encoding (T1132)?\nA.  On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nC.  Forensic techniques exist to identify information stored in NTFS EA.  Monitor calls to the <code>ZwSetEaFile</code> and <code>ZwQueryEaFile</code> Windows API functions as well as binaries used to interact with EA,   and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]</code>) is commonly associated with ADSs.    For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f. The Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir /r</code> command can also be used to display ADSs.  Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream</code> parameter to interact with ADSs.  (Citations: Journey into IR ZeroAccess NTFS EA, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, SpectorOps Host-Based Jul 2017, Microsoft ADS Mar 2014, Oddvar Moe ADS1 Jan 2018, Oddvar Moe ADS2 Apr 2018, Symantec ADS May 2009, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014)\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1574.009 (Path Interception by Unquoted Path)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.009 (Path Interception by Unquoted Path)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionD": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1574.009 (Path Interception by Unquoted Path)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Time Providers (T1547.003)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Restoring an software configuration.\nC.  Restoring a file for an entity to access.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Time Providers (T1547.003)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate Time Providers (T1547.003)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Restoring an software configuration.\nC.  Restoring a file for an entity to access.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deployment of Wrong Handler (CWE-430)?\nA.  Protect the administrative/restricted functionality with a strong authentication mechanism.\nB.  Perform a type check before interpreting an object.\nC.  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\nD.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deployment of Wrong Handler (CWE-430)",
      "ddmc_optionA": "Protect the administrative/restricted functionality with a strong authentication mechanism.",
      "ddmc_optionB": "Perform a type check before interpreting an object.",
      "ddmc_optionC": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.",
      "ddmc_optionD": "Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Perform a type check before interpreting an object.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deployment of Wrong Handler (CWE-430)?\nA.  Protect the administrative/restricted functionality with a strong authentication mechanism.\nB.  Perform a type check before interpreting an object.\nC.  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\nD.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Blind SQL Injection (CAPEC-7)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Design: Enforce principle of least privilege\nC.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nD.  Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Blind SQL Injection (CAPEC-7)",
      "ddmc_optionA": "Minimize error/response output to only what is necessary for functional use or corrective language.",
      "ddmc_optionB": "Design: Enforce principle of least privilege",
      "ddmc_optionC": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)",
      "ddmc_optionD": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Blind SQL Injection (CAPEC-7)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Design: Enforce principle of least privilege\nC.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nD.  Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Employing file hash comparisons to detect known malware.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Employing file hash comparisons to detect known malware.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-668 (Key Negotiation of Bluetooth Attack (KNOB))?\nA.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Patch installed applications as soon as new updates become available.\nD.  Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-668 (Key Negotiation of Bluetooth Attack (KNOB))",
      "ddmc_optionA": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "ddmc_optionB": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
      "ddmc_optionC": "Patch installed applications as soon as new updates become available.",
      "ddmc_optionD": "Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-668 (Key Negotiation of Bluetooth Attack (KNOB))?\nA.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Patch installed applications as soon as new updates become available.\nD.  Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1056.001 (Keylogging)?\nA.  Analyzing email or instant message content to detect unauthorized activity.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1056.001 (Keylogging)",
      "ddmc_optionA": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate T1056.001 (Keylogging)?\nA.  Analyzing email or instant message content to detect unauthorized activity.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') (CWE-652)?\nA.  Remove dead code before deploying the application.\nB.  Use parameterized queries. This will help ensure separation between data plane and control plane.\nC.  Implicitly or explicitly add checks and mitigation for negative or over-shift values.\nD.  Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') (CWE-652)",
      "ddmc_optionA": "Remove dead code before deploying the application.",
      "ddmc_optionB": "Use parameterized queries. This will help ensure separation between data plane and control plane.",
      "ddmc_optionC": "Implicitly or explicitly add checks and mitigation for negative or over-shift values.",
      "ddmc_optionD": "Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use parameterized queries. This will help ensure separation between data plane and control plane.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Data within XQuery Expressions ('XQuery Injection') (CWE-652)?\nA.  Remove dead code before deploying the application.\nB.  Use parameterized queries. This will help ensure separation between data plane and control plane.\nC.  Implicitly or explicitly add checks and mitigation for negative or over-shift values.\nD.  Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Removing Important Client Functionality (CAPEC-207)?\nA.  Do not reuse local administrator account credentials across systems.\nB.  Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.\nC.  The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.\nD.  Design: Use obfuscation and other techniques to prevent reverse engineering the client code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Removing Important Client Functionality (CAPEC-207)",
      "ddmc_optionA": "Do not reuse local administrator account credentials across systems.",
      "ddmc_optionB": "Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.",
      "ddmc_optionC": "The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.",
      "ddmc_optionD": "Design: Use obfuscation and other techniques to prevent reverse engineering the client code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Use obfuscation and other techniques to prevent reverse engineering the client code.",
      "prompts": [],
      "instruction": "What is a method to mitigate Removing Important Client Functionality (CAPEC-207)?\nA.  Do not reuse local administrator account credentials across systems.\nB.  Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.\nC.  The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.\nD.  Design: Use obfuscation and other techniques to prevent reverse engineering the client code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unchecked Input for Loop Condition (CWE-606)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Do not use user-controlled data for loop conditions.\nC.  Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.\nD.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unchecked Input for Loop Condition (CWE-606)",
      "ddmc_optionA": "Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.",
      "ddmc_optionB": "Do not use user-controlled data for loop conditions.",
      "ddmc_optionC": "Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.",
      "ddmc_optionD": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not use user-controlled data for loop conditions.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unchecked Input for Loop Condition (CWE-606)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Do not use user-controlled data for loop conditions.\nC.  Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.\nD.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cloud Account (T1136.003)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Account (T1136.003)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cloud Account (T1136.003)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Cryptographically verifying firmware integrity.\nC.  Employing file hash comparisons to detect known malware.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Cryptographically verifying firmware integrity.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Cryptographically verifying firmware integrity.\nC.  Employing file hash comparisons to detect known malware.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Design for FPGA Maliciously Altered (CAPEC-674)?\nA.  Use a secret space that is well known and with no known patterns that may reduce functional size.\nB.  Implementation: Use SSL/TLS to protect cookie in transit\nC.  Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.\nD.  Conduct detailed vendor assessment before acquiring COTS hardware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Design for FPGA Maliciously Altered (CAPEC-674)",
      "ddmc_optionA": "Use a secret space that is well known and with no known patterns that may reduce functional size.",
      "ddmc_optionB": "Implementation: Use SSL/TLS to protect cookie in transit",
      "ddmc_optionC": "Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.",
      "ddmc_optionD": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Design for FPGA Maliciously Altered (CAPEC-674)?\nA.  Use a secret space that is well known and with no known patterns that may reduce functional size.\nB.  Implementation: Use SSL/TLS to protect cookie in transit\nC.  Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.\nD.  Conduct detailed vendor assessment before acquiring COTS hardware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Proc Memory (T1055.009)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Proc Memory (T1055.009)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate Proc Memory (T1055.009)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-638 (Not Using Complete Mediation)?\nA.  Use spyware detection and removal software.\nB.  Use PHP 4 or later.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-638 (Not Using Complete Mediation)",
      "ddmc_optionA": "Use spyware detection and removal software.",
      "ddmc_optionB": "Use PHP 4 or later.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use PHP 4 or later.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-638 (Not Using Complete Mediation)?\nA.  Use spyware detection and removal software.\nB.  Use PHP 4 or later.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1498 (Network Denial of Service)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1498 (Network Denial of Service)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "How can you mitigate T1498 (Network Denial of Service)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Absolute Path Traversal (CWE-36)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Absolute Path Traversal (CWE-36)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Absolute Path Traversal (CWE-36)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Executable Regular Expression Error (CWE-624)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Executable Regular Expression Error (CWE-624)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.",
      "prompts": [],
      "instruction": "What is a method to mitigate Executable Regular Expression Error (CWE-624)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Emond (T1546.014)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Emond (T1546.014)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "What is a method to mitigate Emond (T1546.014)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Ensure to keep up to date with security relevant updates to the persistence framework used within your application.\nB.  Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nC.  Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.\nD.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Contaminate Resource (CAPEC-548)",
      "ddmc_optionA": "Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
      "ddmc_optionB": "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
      "ddmc_optionC": "Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.",
      "ddmc_optionD": "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.",
      "prompts": [],
      "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Ensure to keep up to date with security relevant updates to the persistence framework used within your application.\nB.  Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nC.  Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.\nD.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1030 (Data Transfer Size Limits)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1030 (Data Transfer Size Limits)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1030 (Data Transfer Size Limits)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\nB.  Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].\nC.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nD.  Declare returned data which should not be altered as constant or immutable.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Script in an Error Message Web Page (CWE-81)",
      "ddmc_optionA": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
      "ddmc_optionB": "Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].",
      "ddmc_optionC": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionD": "Declare returned data which should not be altered as constant or immutable.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\nB.  Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].\nC.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nD.  Declare returned data which should not be altered as constant or immutable.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Downgrade Attack (T1562.010)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  File eviction techniques evict files from system storage.\nC.  System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Downgrade Attack (T1562.010)",
      "ddmc_optionA": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.",
      "prompts": [],
      "instruction": "How can you mitigate Downgrade Attack (T1562.010)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  File eviction techniques evict files from system storage.\nC.  System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Replication Through Removable Media (T1091)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replication Through Removable Media (T1091)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Replication Through Removable Media (T1091)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Credential API Hooking (T1056.004)?\nA.  Restoring a file for an entity to access.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential API Hooking (T1056.004)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionC": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Preventing execution of any address in a memory region other than the code segment.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Credential API Hooking (T1056.004)?\nA.  Restoring a file for an entity to access.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  Ensure that all user-supplied input is validated before use.\nB.  Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nC.  Implementation: Perform input validation for all remote content.\nD.  Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)",
      "ddmc_optionA": "Ensure that all user-supplied input is validated before use.",
      "ddmc_optionB": "Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.",
      "ddmc_optionC": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionD": "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  Ensure that all user-supplied input is validated before use.\nB.  Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nC.  Implementation: Perform input validation for all remote content.\nD.  Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-609 (Double-Checked Locking)?\nA.  Check return values to ensure locking operations are successful.\nB.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nC.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nD.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-609 (Double-Checked Locking)",
      "ddmc_optionA": "Check return values to ensure locking operations are successful.",
      "ddmc_optionB": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionC": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
      "ddmc_optionD": "In flat address space situations, never allow computing memory addresses as offsets from another memory address.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Check return values to ensure locking operations are successful.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-609 (Double-Checked Locking)?\nA.  Check return values to ensure locking operations are successful.\nB.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nC.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nD.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an software configuration.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an software configuration.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)?\nA.  Review security identifier decoders for design inconsistencies and common weaknesses.\nB.  Implementation: Check the integrity of the dynamically linked libraries before use them.\nC.  Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.\nD.  Require SSL for update channels and implement certificate transparency based verification.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)",
      "ddmc_optionA": "Review security identifier decoders for design inconsistencies and common weaknesses.",
      "ddmc_optionB": "Implementation: Check the integrity of the dynamically linked libraries before use them.",
      "ddmc_optionC": "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
      "ddmc_optionD": "Require SSL for update channels and implement certificate transparency based verification.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Review security identifier decoders for design inconsistencies and common weaknesses.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)?\nA.  Review security identifier decoders for design inconsistencies and common weaknesses.\nB.  Implementation: Check the integrity of the dynamically linked libraries before use them.\nC.  Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.\nD.  Require SSL for update channels and implement certificate transparency based verification.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Conduct detailed vendor assessment before acquiring COTS hardware.\nB.  Implementation: Use type conversions such as JDBC prepared statements.\nC.  Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables\nD.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Delimiters (CAPEC-15)",
      "ddmc_optionA": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "ddmc_optionB": "Implementation: Use type conversions such as JDBC prepared statements.",
      "ddmc_optionC": "Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables",
      "ddmc_optionD": "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implementation: Use type conversions such as JDBC prepared statements.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Conduct detailed vendor assessment before acquiring COTS hardware.\nB.  Implementation: Use type conversions such as JDBC prepared statements.\nC.  Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables\nD.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Incorrect Byte Ordering (CWE-198)?\nA.  Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.\nB.  Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Incorrect Byte Ordering (CWE-198)",
      "ddmc_optionA": "Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.",
      "ddmc_optionB": "Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.",
      "prompts": [],
      "instruction": "How can you detect Use of Incorrect Byte Ordering (CWE-198)?\nA.  Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.\nB.  Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Space after Filename (T1036.006)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Space after Filename (T1036.006)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Space after Filename (T1036.006)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1546.012 (Image File Execution Options Injection)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Issue a new credential to a user which supercedes their old credential.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1546.012 (Image File Execution Options Injection)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1546.012 (Image File Execution Options Injection)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Issue a new credential to a user which supercedes their old credential.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate User-Controlled Filename (CAPEC-73)?\nA.  Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.\nD.  Implementation: Perform input validation for all remote content, including remote and user-generated content\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "User-Controlled Filename (CAPEC-73)",
      "ddmc_optionA": "Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.",
      "ddmc_optionB": "Design: Use browser technologies that do not allow client side scripting.",
      "ddmc_optionC": "Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.",
      "ddmc_optionD": "Implementation: Perform input validation for all remote content, including remote and user-generated content",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design: Use browser technologies that do not allow client side scripting.",
      "prompts": [],
      "instruction": "How can you mitigate User-Controlled Filename (CAPEC-73)?\nA.  Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.\nD.  Implementation: Perform input validation for all remote content, including remote and user-generated content\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Employing file hash comparisons to detect known malware.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Employing file hash comparisons to detect known malware.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect BlueSmacking (CAPEC-666)?\nA.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nB.  Too many exceptions generated by the application as a result of malformed queries\nC.  Software being run on a system matches a file signature found in a malware database\nD.  Performance is degraded or halted by incoming L2CAP packets.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "BlueSmacking (CAPEC-666)",
      "ddmc_optionA": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "ddmc_optionB": "Too many exceptions generated by the application as a result of malformed queries",
      "ddmc_optionC": "Software being run on a system matches a file signature found in a malware database",
      "ddmc_optionD": "Performance is degraded or halted by incoming L2CAP packets.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Performance is degraded or halted by incoming L2CAP packets.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect BlueSmacking (CAPEC-666)?\nA.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nB.  Too many exceptions generated by the application as a result of malformed queries\nC.  Software being run on a system matches a file signature found in a malware database\nD.  Performance is degraded or halted by incoming L2CAP packets.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Data Encrypted for Impact (T1486)?\nA.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\nB.  Consider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges</code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges</code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\nC.  Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\nD.  Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Data Encrypted for Impact (T1486)",
      "ddmc_optionA": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).",
      "ddmc_optionB": "Consider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges</code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges</code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.",
      "ddmc_optionC": "Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.",
      "ddmc_optionD": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Data Encrypted for Impact (T1486)?\nA.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\nB.  Consider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges</code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges</code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\nC.  Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\nD.  Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  File eviction techniques evict files from system storage.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Storage Object Discovery (T1619)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  File eviction techniques evict files from system storage.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-251 (Local Code Inclusion)?\nA.  Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.\nB.  Implementation: Obfuscate server fields of HTTP response.\nC.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nD.  Implementation: Provide for network flow control and traffic shaping to control access to the resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-251 (Local Code Inclusion)",
      "ddmc_optionA": "Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.",
      "ddmc_optionB": "Implementation: Obfuscate server fields of HTTP response.",
      "ddmc_optionC": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
      "ddmc_optionD": "Implementation: Provide for network flow control and traffic shaping to control access to the resources.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-251 (Local Code Inclusion)?\nA.  Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.\nB.  Implementation: Obfuscate server fields of HTTP response.\nC.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nD.  Implementation: Provide for network flow control and traffic shaping to control access to the resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Data Staged (T1074)?\nA.  Monitor network traffic for suspicious/malicious behavior involving DHCP, such as changes in DNS and/or gateway parameters. Additionally, monitor Windows logs for Event IDs (EIDs) 1341, 1342, 1020 and 1063, which specify that the IP allocations are low or have run out; these EIDs may indicate a denial of service attack.(Citations: dhcp_serv_op_events, solution_monitor_dhcp_scopes)\nB.  Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used. A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)\nC.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.\nD.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious behaviors that could relate to post-compromise behavior. Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances. for known bad sequence of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>WriteProcessMemory()</code> and <code>NtQueryInformationProcess()</code> with the parameter set to <code>ProcessBasicInformation</code> may be used for this technique.(Citations: Lazarus APT January 2022)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Data Staged (T1074)",
      "ddmc_optionA": "Monitor network traffic for suspicious/malicious behavior involving DHCP, such as changes in DNS and/or gateway parameters. Additionally, monitor Windows logs for Event IDs (EIDs) 1341, 1342, 1020 and 1063, which specify that the IP allocations are low or have run out; these EIDs may indicate a denial of service attack.(Citations: dhcp_serv_op_events, solution_monitor_dhcp_scopes)",
      "ddmc_optionB": "Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used. A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)",
      "ddmc_optionC": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.",
      "ddmc_optionD": "Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious behaviors that could relate to post-compromise behavior. Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances. for known bad sequence of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>WriteProcessMemory()</code> and <code>NtQueryInformationProcess()</code> with the parameter set to <code>ProcessBasicInformation</code> may be used for this technique.(Citations: Lazarus APT January 2022)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.",
      "prompts": [],
      "instruction": "What is a method to detect Data Staged (T1074)?\nA.  Monitor network traffic for suspicious/malicious behavior involving DHCP, such as changes in DNS and/or gateway parameters. Additionally, monitor Windows logs for Event IDs (EIDs) 1341, 1342, 1020 and 1063, which specify that the IP allocations are low or have run out; these EIDs may indicate a denial of service attack.(Citations: dhcp_serv_op_events, solution_monitor_dhcp_scopes)\nB.  Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used. A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)\nC.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.\nD.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious behaviors that could relate to post-compromise behavior. Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances. for known bad sequence of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>WriteProcessMemory()</code> and <code>NtQueryInformationProcess()</code> with the parameter set to <code>ProcessBasicInformation</code> may be used for this technique.(Citations: Lazarus APT January 2022)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Multi-hop Proxy (T1090.003)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmc_optionA": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "prompts": [],
      "instruction": "What is a method to mitigate Multi-hop Proxy (T1090.003)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting system configuration modifications to a specific user or group of users.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Ptrace System Calls (T1055.008)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Ptrace System Calls (T1055.008)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "How can you mitigate Ptrace System Calls (T1055.008)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Network Flood (T1498.001)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Portable Executable Injection (T1055.002)?\nA.  Restoring an software configuration.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate Portable Executable Injection (T1055.002)?\nA.  Restoring an software configuration.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Web Cookies (T1606.001)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Cookies (T1606.001)",
      "ddmc_optionA": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "How can you mitigate Web Cookies (T1606.001)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-29 (Path Traversal: '\\..\\filename')?\nA.  Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Remove null bytes from all incoming strings.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-29 (Path Traversal: '\\..\\filename')",
      "ddmc_optionA": "Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Remove null bytes from all incoming strings.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-29 (Path Traversal: '\\..\\filename')?\nA.  Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Remove null bytes from all incoming strings.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.\nB.  Leverage antivirus tools to detect known malware\nC.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nD.  For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Install Malicious Extension (CAPEC-698)",
      "ddmc_optionA": "The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.",
      "ddmc_optionB": "Leverage antivirus tools to detect known malware",
      "ddmc_optionC": "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.",
      "ddmc_optionD": "For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.\nB.  Leverage antivirus tools to detect known malware\nC.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nD.  For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Serialized Data External Linking (CAPEC-201)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Configure the serialized data processor to only retrieve external entities from trusted sources.\nC.  Implementation: The victim should configure the browser to minimize active content from untrusted sources.\nD.  Enable at least AES Kerberos encryption for tickets.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serialized Data External Linking (CAPEC-201)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Configure the serialized data processor to only retrieve external entities from trusted sources.",
      "ddmc_optionC": "Implementation: The victim should configure the browser to minimize active content from untrusted sources.",
      "ddmc_optionD": "Enable at least AES Kerberos encryption for tickets.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configure the serialized data processor to only retrieve external entities from trusted sources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Serialized Data External Linking (CAPEC-201)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Configure the serialized data processor to only retrieve external entities from trusted sources.\nC.  Implementation: The victim should configure the browser to minimize active content from untrusted sources.\nD.  Enable at least AES Kerberos encryption for tickets.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Server Software Component (T1505)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server Software Component (T1505)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "What is a method to mitigate Server Software Component (T1505)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Rogue Domain Controller (T1207)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\nB.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\nC.  Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)",
      "ddmc_optionB": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)",
      "ddmc_optionC": "Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)",
      "prompts": [],
      "instruction": "What is a method to detect Rogue Domain Controller (T1207)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\nB.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\nC.  Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Exploitation of Thunderbolt Protection Flaws (CAPEC-665)?\nA.  An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.\nB.  The login attempts use passwords that have been used previously by the user account in question.\nC.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\nD.  Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Exploitation of Thunderbolt Protection Flaws (CAPEC-665)",
      "ddmc_optionA": "An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.",
      "ddmc_optionB": "The login attempts use passwords that have been used previously by the user account in question.",
      "ddmc_optionC": "Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.",
      "ddmc_optionD": "Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Exploitation of Thunderbolt Protection Flaws (CAPEC-665)?\nA.  An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.\nB.  The login attempts use passwords that have been used previously by the user account in question.\nC.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\nD.  Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-103 (Clickjacking)?\nA.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nB.  Verify software downloads and updates to ensure they have not been modified be adversaries\nC.  Turn off JavaScript, Flash and disable CSS.\nD.  Design: Utilize strict type, character, and encoding enforcement\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-103 (Clickjacking)",
      "ddmc_optionA": "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
      "ddmc_optionB": "Verify software downloads and updates to ensure they have not been modified be adversaries",
      "ddmc_optionC": "Turn off JavaScript, Flash and disable CSS.",
      "ddmc_optionD": "Design: Utilize strict type, character, and encoding enforcement",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Turn off JavaScript, Flash and disable CSS.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-103 (Clickjacking)?\nA.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nB.  Verify software downloads and updates to ensure they have not been modified be adversaries\nC.  Turn off JavaScript, Flash and disable CSS.\nD.  Design: Utilize strict type, character, and encoding enforcement\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Encrypting a file using a cryptographic key.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Encrypting a file using a cryptographic key.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nB.  Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\nC.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "ddmc_optionA": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)",
      "ddmc_optionB": "Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.",
      "ddmc_optionC": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "ddmc_optionD": "Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nB.  Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\nC.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007)?\nA.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nB.  To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.\nC.  Root of trust elements and memory should be part of architecture and design reviews.\nD.  If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007)",
      "ddmc_optionA": "A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).",
      "ddmc_optionB": "To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.",
      "ddmc_optionC": "Root of trust elements and memory should be part of architecture and design reviews.",
      "ddmc_optionD": "If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.",
      "prompts": [],
      "instruction": "What is a method to detect Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007)?\nA.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nB.  To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.\nC.  Root of trust elements and memory should be part of architecture and design reviews.\nD.  If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Code Repositories (T1213.003)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Code Repositories (T1213.003)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Code Repositories (T1213.003)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Process eviction techniques terminate or remove running process.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Restoring an entity's access to resources.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Process eviction techniques terminate or remove running process.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Restoring an entity's access to resources.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1095 (Non-Application Layer Protocol)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1095 (Non-Application Layer Protocol)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "prompts": [],
      "instruction": "How can you mitigate T1095 (Non-Application Layer Protocol)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Direct Network Flood (T1498.001)?\nA.  Restoring the data in a database.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Network Flood (T1498.001)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Direct Network Flood (T1498.001)?\nA.  Restoring the data in a database.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use of Default Credentials (CWE-1392)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nC.  For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest",
      "ddmc_optionC": "For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use of Default Credentials (CWE-1392)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nC.  For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remote Desktop Protocol (T1021.001)?\nA.  File eviction techniques evict files from system storage.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remote Desktop Protocol (T1021.001)?\nA.  File eviction techniques evict files from system storage.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Process eviction techniques terminate or remove running process.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "AppInit DLLs (T1546.010)",
      "ddmc_optionA": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Process eviction techniques terminate or remove running process.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Logon Script (Windows) (T1037.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Logon Script (Windows) (T1037.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Service Discovery (T1007)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Service Discovery (T1007)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate System Service Discovery (T1007)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Rogue Domain Controller (T1207)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Rogue Domain Controller (T1207)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1573.001 (Symmetric Cryptography)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Restricting network traffic originating from any location.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1573.001 (Symmetric Cryptography)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1573.001 (Symmetric Cryptography)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Restricting network traffic originating from any location.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Screen Capture (T1113)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Execution After Redirect (EAR) (CWE-698)?\nA.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.\nD.  Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Execution After Redirect (EAR) (CWE-698)",
      "ddmc_optionA": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
      "ddmc_optionB": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
      "ddmc_optionC": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.",
      "ddmc_optionD": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
      "prompts": [],
      "instruction": "How can you mitigate Execution After Redirect (EAR) (CWE-698)?\nA.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.\nD.  Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Insufficient Granularity of Access Control (CWE-1220)?\nA.  Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.\nB.  For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved. Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\nC.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Insufficient Granularity of Access Control (CWE-1220)",
      "ddmc_optionA": "Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.",
      "ddmc_optionB": "For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved. Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.",
      "ddmc_optionC": "Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.",
      "ddmc_optionD": "Force the administrator to change the credential upon installation.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.",
      "prompts": [],
      "instruction": "What is a method to mitigate Insufficient Granularity of Access Control (CWE-1220)?\nA.  Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.\nB.  For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved. Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\nC.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1538 (Cloud Service Dashboard)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1538 (Cloud Service Dashboard)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate T1538 (Cloud Service Dashboard)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1014 (Rootkit)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Cryptographically verifying firmware integrity.\nC.  File eviction techniques evict files from system storage.\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1014 (Rootkit)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Cryptographically verifying firmware integrity.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Cryptographically verifying firmware integrity.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1014 (Rootkit)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Cryptographically verifying firmware integrity.\nC.  File eviction techniques evict files from system storage.\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nA.  Apply blinding [REF-1219] or masking techniques in strategic areas.\nB.  Use non-predictable inputs for seed generation.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Always verify the length of the string unit character.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "ddmc_optionA": "Apply blinding [REF-1219] or masking techniques in strategic areas.",
      "ddmc_optionB": "Use non-predictable inputs for seed generation.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Always verify the length of the string unit character.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nA.  Apply blinding [REF-1219] or masking techniques in strategic areas.\nB.  Use non-predictable inputs for seed generation.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Always verify the length of the string unit character.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP\nC.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nD.  When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Authorization Bypass Through User-Controlled Key (CWE-639)",
      "ddmc_optionA": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP",
      "ddmc_optionC": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
      "ddmc_optionD": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP\nC.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nD.  When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Network Boundary Bridging (T1599)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Boundary Bridging (T1599)",
      "ddmc_optionA": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "What is a method to mitigate Network Boundary Bridging (T1599)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Systemd Timers (T1053.006)?\nA.  Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.\nB.  Systemd timer unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>~/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: <code>systemctl list-timers \u2013all</code>. Analyze the contents of corresponding <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citations: archlinux Systemd Timers Aug 2020)\nC.  Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as <code>bcdedit.exe -set TESTSIGNING ON</code>. Consider monitoring for modifications made to Registry keys associated with code signing policies, such as <code>HKCU\\Software\\Policies\\Microsoft\\Windows NT\\Driver Signing</code>. Modifications to the code signing policy of a system are likely to be rare.(Citations: Microsoft TESTSIGNING Feb 2021)\nD.  Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Systemd Timers (T1053.006)",
      "ddmc_optionA": "Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.",
      "ddmc_optionB": "Systemd timer unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>~/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: <code>systemctl list-timers \u2013all</code>. Analyze the contents of corresponding <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citations: archlinux Systemd Timers Aug 2020)",
      "ddmc_optionC": "Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as <code>bcdedit.exe -set TESTSIGNING ON</code>. Consider monitoring for modifications made to Registry keys associated with code signing policies, such as <code>HKCU\\Software\\Policies\\Microsoft\\Windows NT\\Driver Signing</code>. Modifications to the code signing policy of a system are likely to be rare.(Citations: Microsoft TESTSIGNING Feb 2021)",
      "ddmc_optionD": "Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Systemd timer unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>~/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: <code>systemctl list-timers \u2013all</code>. Analyze the contents of corresponding <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citations: archlinux Systemd Timers Aug 2020)",
      "prompts": [],
      "instruction": "What is a method to detect Systemd Timers (T1053.006)?\nA.  Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.\nB.  Systemd timer unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>~/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: <code>systemctl list-timers \u2013all</code>. Analyze the contents of corresponding <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citations: archlinux Systemd Timers Aug 2020)\nC.  Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as <code>bcdedit.exe -set TESTSIGNING ON</code>. Consider monitoring for modifications made to Registry keys associated with code signing policies, such as <code>HKCU\\Software\\Policies\\Microsoft\\Windows NT\\Driver Signing</code>. Modifications to the code signing policy of a system are likely to be rare.(Citations: Microsoft TESTSIGNING Feb 2021)\nD.  Monitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1222 (File and Directory Permissions Modification)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  Restoring an software configuration.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1222 (File and Directory Permissions Modification)",
      "ddmc_optionA": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1222 (File and Directory Permissions Modification)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  Restoring an software configuration.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate LSASS Driver (T1547.008)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rooting SIM Cards (CAPEC-614)?\nA.  Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.\nB.  Prevent adversary access to privileged accounts necessary to install rootkits.\nC.  Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\nD.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rooting SIM Cards (CAPEC-614)",
      "ddmc_optionA": "Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.",
      "ddmc_optionB": "Prevent adversary access to privileged accounts necessary to install rootkits.",
      "ddmc_optionC": "Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.",
      "ddmc_optionD": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "prompts": [],
      "instruction": "What is a method to mitigate Rooting SIM Cards (CAPEC-614)?\nA.  Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.\nB.  Prevent adversary access to privileged accounts necessary to install rootkits.\nC.  Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\nD.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Change default passwords by choosing strong passwords.\nB.  Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Design: Perform allowlist validation against a positive specification for command length, type, and parameters.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Delimiters (CAPEC-15)",
      "ddmc_optionA": "Change default passwords by choosing strong passwords.",
      "ddmc_optionB": "Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.",
      "ddmc_optionC": "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
      "ddmc_optionD": "Design: Perform allowlist validation against a positive specification for command length, type, and parameters.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Perform allowlist validation against a positive specification for command length, type, and parameters.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Change default passwords by choosing strong passwords.\nB.  Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Design: Perform allowlist validation against a positive specification for command length, type, and parameters.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution (CWE-1421)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.\nD.  In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution (CWE-1421)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.",
      "ddmc_optionD": "In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.",
      "prompts": [],
      "instruction": "How can you detect Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution (CWE-1421)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.\nD.  In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Blocking the resolution of any subdomain of a specified domain name.\nB.  Restoring a file for an entity to access.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Blocking the resolution of any subdomain of a specified domain name.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring a file for an entity to access.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Blocking the resolution of any subdomain of a specified domain name.\nB.  Restoring a file for an entity to access.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-426 (Untrusted Search Path)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-426 (Untrusted Search Path)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionC": "Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-426 (Untrusted Search Path)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Detects processes that modify, change, or replace their own code at runtime.\nB.  Employing file hash comparisons to detect known malware.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Replacing old software on a computer system component.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detects processes that modify, change, or replace their own code at runtime.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Detects processes that modify, change, or replace their own code at runtime.\nB.  Employing file hash comparisons to detect known malware.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Service (T1102)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1568.003 (DNS Calculation)?\nA.  Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.\nB.  Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.\nD.  Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Monitor for changes to files associated with system-level processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1568.003 (DNS Calculation)",
      "ddmc_optionA": "Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.",
      "ddmc_optionB": "Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).",
      "ddmc_optionC": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.",
      "ddmc_optionD": "Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Monitor for changes to files associated with system-level processes.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.",
      "prompts": [],
      "instruction": "What is a method to detect T1568.003 (DNS Calculation)?\nA.  Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.\nB.  Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.\nD.  Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Monitor for changes to files associated with system-level processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detects processes that modify, change, or replace their own code at runtime.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Agent (T1543.001)",
      "ddmc_optionA": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detects processes that modify, change, or replace their own code at runtime.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect ARP Cache Poisoning (T1557.002)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\nC.  Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.\nD.  Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "ARP Cache Poisoning (T1557.002)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
      "ddmc_optionC": "Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.",
      "ddmc_optionD": "Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.",
      "prompts": [],
      "instruction": "How can you detect ARP Cache Poisoning (T1557.002)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\nC.  Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.\nD.  Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Location Discovery (CAPEC-694)?\nA.  To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.\nB.  Utilize browsers that can warn users if URLs contain characters from different character sets.\nC.  Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.\nD.  Have a large pool of backup IPs built into the application and support proxy capability in the application.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Location Discovery (CAPEC-694)",
      "ddmc_optionA": "To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.",
      "ddmc_optionB": "Utilize browsers that can warn users if URLs contain characters from different character sets.",
      "ddmc_optionC": "Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.",
      "ddmc_optionD": "Have a large pool of backup IPs built into the application and support proxy capability in the application.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Location Discovery (CAPEC-694)?\nA.  To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.\nB.  Utilize browsers that can warn users if URLs contain characters from different character sets.\nC.  Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.\nD.  Have a large pool of backup IPs built into the application and support proxy capability in the application.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  A true random number generator should be specified for cryptographic algorithms.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Consider modifying your code to use non-blocking synchronization methods.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-412 (Unrestricted Externally Accessible Lock)",
      "ddmc_optionA": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_optionB": "A true random number generator should be specified for cryptographic algorithms.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Consider modifying your code to use non-blocking synchronization methods.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Consider modifying your code to use non-blocking synchronization methods.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  A true random number generator should be specified for cryptographic algorithms.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Consider modifying your code to use non-blocking synchronization methods.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate J2EE Bad Practices: Direct Use of Threads (CWE-383)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nC.  For EJB, use framework approaches for parallel execution, instead of using threads.\nD.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "J2EE Bad Practices: Direct Use of Threads (CWE-383)",
      "ddmc_optionA": "Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.",
      "ddmc_optionB": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionC": "For EJB, use framework approaches for parallel execution, instead of using threads.",
      "ddmc_optionD": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For EJB, use framework approaches for parallel execution, instead of using threads.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate J2EE Bad Practices: Direct Use of Threads (CWE-383)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nC.  For EJB, use framework approaches for parallel execution, instead of using threads.\nD.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Locking (CWE-667)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Locking (CWE-667)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Locking (CWE-667)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Stage Channels (T1104)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Lack of Administrator Control over Security (CWE-671)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Lack of Administrator Control over Security (CWE-671)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "ddmc_optionB": "Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Lack of Administrator Control over Security (CWE-671)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remote Code Inclusion (CAPEC-253)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\nC.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nD.  Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Code Inclusion (CAPEC-253)",
      "ddmc_optionA": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
      "ddmc_optionB": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
      "ddmc_optionC": "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
      "ddmc_optionD": "Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remote Code Inclusion (CAPEC-253)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\nC.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nD.  Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Protect sensitive information with strong encryption.\nD.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "prompts": [],
      "instruction": "How can you mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Protect sensitive information with strong encryption.\nD.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Encrypting a file using a cryptographic key.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Encrypting a file using a cryptographic key.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nB.  Do not reuse local administrator account credentials across systems.\nC.  Monitor system and domain logs for abnormal access.\nD.  Purchase potential TypoSquatted domains and forward to legitimate domain.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Captured Tickets (Pass The Ticket) (CAPEC-645)",
      "ddmc_optionA": "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.",
      "ddmc_optionB": "Do not reuse local administrator account credentials across systems.",
      "ddmc_optionC": "Monitor system and domain logs for abnormal access.",
      "ddmc_optionD": "Purchase potential TypoSquatted domains and forward to legitimate domain.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor system and domain logs for abnormal access.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nB.  Do not reuse local administrator account credentials across systems.\nC.  Monitor system and domain logs for abnormal access.\nD.  Purchase potential TypoSquatted domains and forward to legitimate domain.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Protections Against Hardware Overheating (CWE-1338)?\nA.  Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.\nB.  Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.\nC.  Dynamic tests should be performed to stress-test temperature controls.\nD.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Protections Against Hardware Overheating (CWE-1338)",
      "ddmc_optionA": "Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.",
      "ddmc_optionB": "Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.",
      "ddmc_optionC": "Dynamic tests should be performed to stress-test temperature controls.",
      "ddmc_optionD": "Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Dynamic tests should be performed to stress-test temperature controls.",
      "prompts": [],
      "instruction": "How can you detect Improper Protections Against Hardware Overheating (CWE-1338)?\nA.  Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.\nB.  Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.\nC.  Dynamic tests should be performed to stress-test temperature controls.\nD.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restricting network traffic originating from any location.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restricting network traffic originating from any location.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Restriction of Names for Files and Other Resources (CWE-641)?\nA.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nB.  Add an access control layer atop any unprotected interfaces for injecting errors.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\nD.  Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of Names for Files and Other Resources (CWE-641)",
      "ddmc_optionA": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
      "ddmc_optionB": "Add an access control layer atop any unprotected interfaces for injecting errors.",
      "ddmc_optionC": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
      "ddmc_optionD": "Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Restriction of Names for Files and Other Resources (CWE-641)?\nA.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nB.  Add an access control layer atop any unprotected interfaces for injecting errors.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\nD.  Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Clickjacking (CAPEC-103)?\nA.  Implementation: Kernel Direct Memory Access Protection\nB.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nC.  Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\nD.  Change default PIN passwords and always use one when connecting.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clickjacking (CAPEC-103)",
      "ddmc_optionA": "Implementation: Kernel Direct Memory Access Protection",
      "ddmc_optionB": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "ddmc_optionC": "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
      "ddmc_optionD": "Change default PIN passwords and always use one when connecting.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "prompts": [],
      "instruction": "What is a method to mitigate Clickjacking (CAPEC-103)?\nA.  Implementation: Kernel Direct Memory Access Protection\nB.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nC.  Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\nD.  Change default PIN passwords and always use one when connecting.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Target Programs with Elevated Privileges (CAPEC-69)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.\nC.  Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nD.  Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Target Programs with Elevated Privileges (CAPEC-69)",
      "ddmc_optionA": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionB": "The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.",
      "ddmc_optionC": "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
      "ddmc_optionD": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.",
      "prompts": [],
      "instruction": "What is a method to detect Target Programs with Elevated Privileges (CAPEC-69)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.\nC.  Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nD.  Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Manipulate Registry Information (CAPEC-203)?\nA.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\nB.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nC.  Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\nD.  Monitor traffic and resource usage and pay attention if resource exhaustion occurs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Manipulate Registry Information (CAPEC-203)",
      "ddmc_optionA": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
      "ddmc_optionB": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
      "ddmc_optionC": "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
      "ddmc_optionD": "Monitor traffic and resource usage and pay attention if resource exhaustion occurs.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Manipulate Registry Information (CAPEC-203)?\nA.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\nB.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nC.  Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\nD.  Monitor traffic and resource usage and pay attention if resource exhaustion occurs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Suspicious Comment (CWE-546)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Protect the core dump files from unauthorized access.\nC.  Software tools are capable of finding ADSs on your system.\nD.  Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Suspicious Comment (CWE-546)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Protect the core dump files from unauthorized access.",
      "ddmc_optionC": "Software tools are capable of finding ADSs on your system.",
      "ddmc_optionD": "Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Protect the core dump files from unauthorized access.",
      "prompts": [],
      "instruction": "How can you mitigate Suspicious Comment (CWE-546)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Protect the core dump files from unauthorized access.\nC.  Software tools are capable of finding ADSs on your system.\nD.  Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-Factor Authentication Interception (T1111)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Factor Authentication Interception (T1111)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-Factor Authentication Interception (T1111)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Sensitive Cookie with Improper SameSite Attribute (CWE-1275)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  For software, use Software Composition Analysis (SCA) tools, which automatically analyze products to identify third-party dependencies. Often, SCA tools can be used to link with known vulnerabilities in the dependencies that they detect. There are commercial and open-source alternatives, such as OWASP Dependency-Check [REF-1312]. Many languages or frameworks have package managers with similar capabilities, such as npm audit for JavaScript, pip-audit for Python, govulncheck for Go, and many others. Dynamic methods can detect loading of third-party components.\nD.  Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Sensitive Cookie with Improper SameSite Attribute (CWE-1275)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "For software, use Software Composition Analysis (SCA) tools, which automatically analyze products to identify third-party dependencies. Often, SCA tools can be used to link with known vulnerabilities in the dependencies that they detect. There are commercial and open-source alternatives, such as OWASP Dependency-Check [REF-1312]. Many languages or frameworks have package managers with similar capabilities, such as npm audit for JavaScript, pip-audit for Python, govulncheck for Go, and many others. Dynamic methods can detect loading of third-party components.",
      "ddmc_optionD": "Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Sensitive Cookie with Improper SameSite Attribute (CWE-1275)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  For software, use Software Composition Analysis (SCA) tools, which automatically analyze products to identify third-party dependencies. Often, SCA tools can be used to link with known vulnerabilities in the dependencies that they detect. There are commercial and open-source alternatives, such as OWASP Dependency-Check [REF-1312]. Many languages or frameworks have package managers with similar capabilities, such as npm audit for JavaScript, pip-audit for Python, govulncheck for Go, and many others. Dynamic methods can detect loading of third-party components.\nD.  Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of RSA Algorithm without OAEP (CWE-780)?\nA.  Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of RSA Algorithm without OAEP (CWE-780)",
      "ddmc_optionA": "Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionC": "Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Use of RSA Algorithm without OAEP (CWE-780)?\nA.  Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect External Control of Critical State Data (CWE-642)?\nA.  This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection\nC.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "External Control of Critical State Data (CWE-642)",
      "ddmc_optionA": "This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection",
      "ddmc_optionC": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect External Control of Critical State Data (CWE-642)?\nA.  This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection\nC.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Predictable Algorithm in Random Number Generator (CWE-1241)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  An application must make network resources available to a client commensurate with the client's access level.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Predictable Algorithm in Random Number Generator (CWE-1241)",
      "ddmc_optionA": "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.",
      "ddmc_optionB": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
      "ddmc_optionC": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_optionD": "An application must make network resources available to a client commensurate with the client's access level.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A true random number generator should be implemented for cryptographic algorithms.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Predictable Algorithm in Random Number Generator (CWE-1241)?\nA.  Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  An application must make network resources available to a client commensurate with the client's access level.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.\nB.  Always use explicit block delimitation and use static-analysis technologies to enforce this practice.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Support for Integrity Check (CWE-353)",
      "ddmc_optionA": "Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.",
      "ddmc_optionB": "Always use explicit block delimitation and use static-analysis technologies to enforce this practice.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.",
      "prompts": [],
      "instruction": "How can you mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.\nB.  Always use explicit block delimitation and use static-analysis technologies to enforce this practice.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Design: Enforce principle of least privilege\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Using Malicious Files (CAPEC-17)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.",
      "ddmc_optionC": "Protect environment variables against unauthorized read and write access.",
      "ddmc_optionD": "Design: Enforce principle of least privilege",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Enforce principle of least privilege",
      "prompts": [],
      "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Design: Enforce principle of least privilege\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1090.002 (External Proxy)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from any location.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1090.002 (External Proxy)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate T1090.002 (External Proxy)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Restricting network traffic originating from any location.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Cleartext Storage of Sensitive Information (CWE-312)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cleartext Storage of Sensitive Information (CWE-312)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Cleartext Storage of Sensitive Information (CWE-312)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nC.  Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of a One-Way Hash without a Salt (CWE-759)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
      "ddmc_optionC": "Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nC.  Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Missing Authentication for Critical Function (CWE-306)?\nA.  Use a tool that dynamically detects memory management problems, such as valgrind.\nB.  Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].\nD.  Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Authentication for Critical Function (CWE-306)",
      "ddmc_optionA": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmc_optionB": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_optionC": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].",
      "ddmc_optionD": "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].",
      "prompts": [],
      "instruction": "How can you mitigate Missing Authentication for Critical Function (CWE-306)?\nA.  Use a tool that dynamically detects memory management problems, such as valgrind.\nB.  Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].\nD.  Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Replace Binaries (CAPEC-642)?\nA.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\nB.  Design: Minimize switch and option functionality to only that necessary for correct function of the command.\nC.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nD.  Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replace Binaries (CAPEC-642)",
      "ddmc_optionA": "Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests",
      "ddmc_optionB": "Design: Minimize switch and option functionality to only that necessary for correct function of the command.",
      "ddmc_optionC": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "ddmc_optionD": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
      "prompts": [],
      "instruction": "What is a method to mitigate Replace Binaries (CAPEC-642)?\nA.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\nB.  Design: Minimize switch and option functionality to only that necessary for correct function of the command.\nC.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nD.  Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Port Monitors (T1547.010)?\nA.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nB.  Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Port Monitors (T1547.010)",
      "ddmc_optionA": "Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)",
      "ddmc_optionB": "Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.",
      "ddmc_optionC": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)",
      "prompts": [],
      "instruction": "How can you detect Port Monitors (T1547.010)?\nA.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nB.  Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Image File Execution Options Injection (T1546.012)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Mavinject (T1218.013)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mavinject (T1218.013)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "How can you mitigate Mavinject (T1218.013)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Bidirectional Communication (T1102.002)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bidirectional Communication (T1102.002)",
      "ddmc_optionA": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionB": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Bidirectional Communication (T1102.002)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restoring a file for an entity to access.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restoring a file for an entity to access.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') (CWE-96)?\nA.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Resolve all URIs to absolute or canonical representations before processing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') (CWE-96)",
      "ddmc_optionA": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Resolve all URIs to absolute or canonical representations before processing.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') (CWE-96)?\nA.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Resolve all URIs to absolute or canonical representations before processing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Race Condition within a Thread (CWE-366)?\nA.  Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.\nB.  Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.\nC.  Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.\nD.  The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Race Condition within a Thread (CWE-366)",
      "ddmc_optionA": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.",
      "ddmc_optionB": "Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.",
      "ddmc_optionC": "Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.",
      "ddmc_optionD": "The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.",
      "prompts": [],
      "instruction": "How can you mitigate Race Condition within a Thread (CWE-366)?\nA.  Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.\nB.  Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.\nC.  Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.\nD.  The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File eviction techniques evict files from system storage.\nC.  Suspending a running process on a computer system.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1568 (Dynamic Resolution)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Suspending a running process on a computer system.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File eviction techniques evict files from system storage.\nC.  Suspending a running process on a computer system.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Implement access-control checks in the bridge for both upstream and downstream transactions.\nB.  Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.\nC.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Access Control in Fabric Bridge (CWE-1317)",
      "ddmc_optionA": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_optionB": "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.",
      "ddmc_optionC": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Implement access-control checks in the bridge for both upstream and downstream transactions.\nB.  Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.\nC.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Controlling access to local computer system resources with kernel-level capabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Generation Algorithms (T1568.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Generation Algorithms (T1568.002)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionC": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Generation Algorithms (T1568.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Steal Application Access Token (T1528)?\nA.  Analyzing failed connections in a network to detect unauthorized activity.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmc_optionB": "Comparing the \"text\" or \"code\" memory segments to a source of truth.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Steal Application Access Token (T1528)?\nA.  Analyzing failed connections in a network to detect unauthorized activity.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transport Agent (T1505.002)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1011.001 (Exfiltration Over Bluetooth)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Output Neutralization for Logs (CWE-117)?\nA.  Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Output Neutralization for Logs (CWE-117)",
      "ddmc_optionA": "Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionD": "During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Output Neutralization for Logs (CWE-117)?\nA.  Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unused/Unsupported Cloud Regions (T1535)?\nA.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unused/Unsupported Cloud Regions (T1535)",
      "ddmc_optionA": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unused/Unsupported Cloud Regions (T1535)?\nA.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  File eviction techniques evict files from system storage.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Restricting network traffic originating from untrusted networks destined towards a private host or enclave.",
      "ddmc_optionB": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  File eviction techniques evict files from system storage.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking DNS queries that are deceptively similar to legitimate domain names.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Blocking DNS queries that are deceptively similar to legitimate domain names.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Software inventorying identifies and records the software items in the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking DNS queries that are deceptively similar to legitimate domain names.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Email Accounts (T1585.002)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\nB.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Email Accounts (T1585.002)",
      "ddmc_optionA": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.",
      "ddmc_optionB": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)",
      "ddmc_optionC": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "prompts": [],
      "instruction": "What is a method to detect Email Accounts (T1585.002)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\nB.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Steal Web Session Cookie (T1539)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Steal Web Session Cookie (T1539)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential API Hooking (T1056.004)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential API Hooking (T1056.004)",
      "ddmc_optionA": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "prompts": [],
      "instruction": "How can you mitigate Credential API Hooking (T1056.004)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cloud Service Dashboard (T1538)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  The process of temporarily disabling user accounts on a system or domain.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Service Dashboard (T1538)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Cloud Service Dashboard (T1538)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  The process of temporarily disabling user accounts on a system or domain.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect HTTP Response Splitting (CAPEC-34)?\nA.  Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.\nB.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nC.  You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "HTTP Response Splitting (CAPEC-34)",
      "ddmc_optionA": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.",
      "ddmc_optionB": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionC": "You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.",
      "ddmc_optionD": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.",
      "prompts": [],
      "instruction": "How can you detect HTTP Response Splitting (CAPEC-34)?\nA.  Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.\nB.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nC.  You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-529 (Malware-Directed Internal Reconnaissance)?\nA.  Implementation: Perform input validation for all remote content, including remote and user-generated content\nB.  Keep patches up to date by installing weekly or daily if possible.\nC.  Conduct detailed vendor assessment before acquiring COTS hardware.\nD.  Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-529 (Malware-Directed Internal Reconnaissance)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content, including remote and user-generated content",
      "ddmc_optionB": "Keep patches up to date by installing weekly or daily if possible.",
      "ddmc_optionC": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "ddmc_optionD": "Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Keep patches up to date by installing weekly or daily if possible.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-529 (Malware-Directed Internal Reconnaissance)?\nA.  Implementation: Perform input validation for all remote content, including remote and user-generated content\nB.  Keep patches up to date by installing weekly or daily if possible.\nC.  Conduct detailed vendor assessment before acquiring COTS hardware.\nD.  Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1007 (System Service Discovery)?\nA.  Restricting network traffic originating from any location.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Employing file hash comparisons to detect known malware.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1007 (System Service Discovery)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "prompts": [],
      "instruction": "How can you mitigate T1007 (System Service Discovery)?\nA.  Restricting network traffic originating from any location.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Employing file hash comparisons to detect known malware.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Password Policy Discovery (T1201)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Password Policy Discovery (T1201)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Password Policy Discovery (T1201)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Access of Memory Location Before Start of Buffer (CWE-786)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Access of Memory Location Before Start of Buffer (CWE-786)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "prompts": [],
      "instruction": "What is a method to detect Access of Memory Location Before Start of Buffer (CWE-786)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate MSBuild (T1127.001)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "MSBuild (T1127.001)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionC": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate MSBuild (T1127.001)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1003.001 (LSASS Memory)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1003.001 (LSASS Memory)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1003.001 (LSASS Memory)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Application Shimming (T1546.011)?\nA.  Set and enforce secure password policies for accounts.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application Shimming (T1546.011)",
      "ddmc_optionA": "Set and enforce secure password policies for accounts.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
      "ddmc_optionD": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
      "prompts": [],
      "instruction": "How can you mitigate Application Shimming (T1546.011)?\nA.  Set and enforce secure password policies for accounts.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Modifying system configuration to increase password strength.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Modifying system configuration to increase password strength.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Modifying system configuration to increase password strength.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Default Cryptographic Key (CWE-1394)?\nA.  Always set the secure attribute when the cookie should sent via HTTPS only.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nD.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Cryptographic Key (CWE-1394)",
      "ddmc_optionA": "Always set the secure attribute when the cookie should sent via HTTPS only.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.",
      "ddmc_optionD": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Default Cryptographic Key (CWE-1394)?\nA.  Always set the secure attribute when the cookie should sent via HTTPS only.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nD.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1543.004 (Launch Daemon)?\nA.  File eviction techniques evict files from system storage.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.004 (Launch Daemon)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1543.004 (Launch Daemon)?\nA.  File eviction techniques evict files from system storage.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nB.  When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system.\nD.  By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-656 (Reliance on Security Through Obscurity)",
      "ddmc_optionA": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionB": "When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.",
      "ddmc_optionC": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
      "ddmc_optionD": "By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nB.  When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system.\nD.  By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Critical Data Element Declared Public (CWE-766)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Critical Data Element Declared Public (CWE-766)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionC": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Critical Data Element Declared Public (CWE-766)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Security Software Discovery (T1518.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  The process of temporarily disabling user accounts on a system or domain.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Security Software Discovery (T1518.001)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Security Software Discovery (T1518.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  The process of temporarily disabling user accounts on a system or domain.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Path Interception by Search Order Hijacking (T1574.008)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Interception by Search Order Hijacking (T1574.008)",
      "ddmc_optionA": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Path Interception by Search Order Hijacking (T1574.008)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.",
      "ddmc_optionC": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Fronting (T1090.004)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Fronting (T1090.004)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Trusted Relationship (T1199)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restoring a file for an entity to access.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Trusted Relationship (T1199)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restoring a file for an entity to access.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Host Software Binary (T1554)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1586.003 (Cloud Accounts)?\nA.  Set and enforce secure password policies for accounts.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1586.003 (Cloud Accounts)",
      "ddmc_optionA": "Set and enforce secure password policies for accounts.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate T1586.003 (Cloud Accounts)?\nA.  Set and enforce secure password policies for accounts.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.\nB.  Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\nC.  Passively monitor cellular network connection for real-time threat detection and logging for manual review.\nD.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Rogue Base Station (CAPEC-617)",
      "ddmc_optionA": "Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.",
      "ddmc_optionB": "Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.",
      "ddmc_optionC": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "ddmc_optionD": "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "prompts": [],
      "instruction": "How can you mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.\nB.  Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\nC.  Passively monitor cellular network connection for real-time threat detection and logging for manual review.\nD.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect CAPEC-78 (Using Escaped Slashes in Alternate Encoding)?\nA.  Unicode encoded data is passed to APIs where it is not expected\nB.  Many incorrect login attempts are detected by the system.\nC.  An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.\nD.  Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CAPEC-78 (Using Escaped Slashes in Alternate Encoding)",
      "ddmc_optionA": "Unicode encoded data is passed to APIs where it is not expected",
      "ddmc_optionB": "Many incorrect login attempts are detected by the system.",
      "ddmc_optionC": "An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
      "ddmc_optionD": "Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
      "prompts": [],
      "instruction": "What is a method to detect CAPEC-78 (Using Escaped Slashes in Alternate Encoding)?\nA.  Unicode encoded data is passed to APIs where it is not expected\nB.  Many incorrect login attempts are detected by the system.\nC.  An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.\nD.  Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Restriction of XML External Entity Reference (CWE-611)?\nA.  Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.\nB.  Always test your code on any platform on which it is targeted to run on.\nC.  Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.\nD.  Many XML parsers and validators can be configured to disable external entity expansion.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of XML External Entity Reference (CWE-611)",
      "ddmc_optionA": "Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.",
      "ddmc_optionB": "Always test your code on any platform on which it is targeted to run on.",
      "ddmc_optionC": "Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.",
      "ddmc_optionD": "Many XML parsers and validators can be configured to disable external entity expansion.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Many XML parsers and validators can be configured to disable external entity expansion.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Restriction of XML External Entity Reference (CWE-611)?\nA.  Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.\nB.  Always test your code on any platform on which it is targeted to run on.\nC.  Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.\nD.  Many XML parsers and validators can be configured to disable external entity expansion.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1104 (Multi-Stage Channels)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1104 (Multi-Stage Channels)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1104 (Multi-Stage Channels)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Stage Channels (T1104)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate External Proxy (T1090.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Modifying system configuration to increase password strength.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Proxy (T1090.002)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Modifying system configuration to increase password strength.",
      "ddmc_optionD": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate External Proxy (T1090.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Modifying system configuration to increase password strength.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Monitoring the existence of or changes to Domain User Accounts.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Monitoring the existence of or changes to Domain User Accounts.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Monitoring the existence of or changes to Domain User Accounts.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Blocking a lookup based on the query's domain name value.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Blocking a lookup based on the query's domain name value.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Using kernel-level capabilities to isolate processes.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Blocking a lookup based on the query's domain name value.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-532 (Altered Installed BIOS)?\nA.  Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-532 (Altered Installed BIOS)",
      "ddmc_optionA": "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
      "ddmc_optionB": "Require SSL for update channels and implement certificate transparency based verification.",
      "ddmc_optionC": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionD": "Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Require SSL for update channels and implement certificate transparency based verification.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-532 (Altered Installed BIOS)?\nA.  Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Compromise Software Supply Chain (T1195.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Software Supply Chain (T1195.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform regular software updates to mitigate exploitation risk.",
      "prompts": [],
      "instruction": "What is a method to mitigate Compromise Software Supply Chain (T1195.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Terminating a running application process on a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Terminating a running application process on a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Terminating a running application process on a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Symmetric Cryptography (T1573.001)?\nA.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nB.  Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: TechNet Autoruns)\nC.  With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more . CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.(Citations: Data Driven Security DGA)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "ddmc_optionB": "Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: TechNet Autoruns)",
      "ddmc_optionC": "With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more . CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.(Citations: Data Driven Security DGA)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Symmetric Cryptography (T1573.001)?\nA.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nB.  Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: TechNet Autoruns)\nC.  With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more . CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.(Citations: Data Driven Security DGA)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1505 (Server Software Component)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1505 (Server Software Component)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionD": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1505 (Server Software Component)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Hidden Window (T1564.003)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Block users or groups from installing unapproved software.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hidden Window (T1564.003)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Block users or groups from installing unapproved software.",
      "ddmc_optionD": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block users or groups from installing unapproved software.",
      "prompts": [],
      "instruction": "What is a method to mitigate Hidden Window (T1564.003)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Block users or groups from installing unapproved software.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Golden Ticket (T1558.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Golden Ticket (T1558.001)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate Golden Ticket (T1558.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Confluence (T1213.001)?\nA.  Employing file hash comparisons to detect known malware.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Analyzing inbound network session or connection attempt volume.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Confluence (T1213.001)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Analyzing inbound network session or connection attempt volume.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Confluence (T1213.001)?\nA.  Employing file hash comparisons to detect known malware.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Analyzing inbound network session or connection attempt volume.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Check for Unusual or Exceptional Conditions (CWE-754)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Check for Unusual or Exceptional Conditions (CWE-754)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.",
      "ddmc_optionD": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Check for Unusual or Exceptional Conditions (CWE-754)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1055.005 (Thread Local Storage)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1055.005 (Thread Local Storage)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1055.005 (Thread Local Storage)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Session tokens for specific host\nB.  Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.\nC.  Ensure that all user-supplied input is validated before use.\nD.  Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Rogue Base Station (CAPEC-617)",
      "ddmc_optionA": "Session tokens for specific host",
      "ddmc_optionB": "Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.",
      "ddmc_optionC": "Ensure that all user-supplied input is validated before use.",
      "ddmc_optionD": "Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Session tokens for specific host\nB.  Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.\nC.  Ensure that all user-supplied input is validated before use.\nD.  Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1574.006 (Dynamic Linker Hijacking)?\nA.  Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. <code>-silent</code>, <code>-ignore-reboot</code>), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. <code>VBoxManage startvm $VM --type headless</code>). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. <code>VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"</code>). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.(Citations: Shadowbunny VM Defense Evasion, Shadowbunny VM Defense Evasion)\nB.  This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for Process Injection against browser applications.\nC.  Deleting Windows event logs (via native binaries , API functions , or PowerShell ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").(Citations: Microsoft wevtutil Oct 2017, Microsoft EventLog.Clear, Microsoft Clear-EventLog)\nD.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1574.006 (Dynamic Linker Hijacking)",
      "ddmc_optionA": "Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. <code>-silent</code>, <code>-ignore-reboot</code>), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. <code>VBoxManage startvm $VM --type headless</code>). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. <code>VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"</code>). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.(Citations: Shadowbunny VM Defense Evasion, Shadowbunny VM Defense Evasion)",
      "ddmc_optionB": "This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for Process Injection against browser applications.",
      "ddmc_optionC": "Deleting Windows event logs (via native binaries , API functions , or PowerShell ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").(Citations: Microsoft wevtutil Oct 2017, Microsoft EventLog.Clear, Microsoft Clear-EventLog)",
      "ddmc_optionD": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
      "prompts": [],
      "instruction": "What is a method to detect T1574.006 (Dynamic Linker Hijacking)?\nA.  Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. <code>-silent</code>, <code>-ignore-reboot</code>), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. <code>VBoxManage startvm $VM --type headless</code>). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. <code>VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"</code>). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.(Citations: Shadowbunny VM Defense Evasion, Shadowbunny VM Defense Evasion)\nB.  This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for Process Injection against browser applications.\nC.  Deleting Windows event logs (via native binaries , API functions , or PowerShell ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").(Citations: Microsoft wevtutil Oct 2017, Microsoft EventLog.Clear, Microsoft Clear-EventLog)\nD.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.\nB.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-412 (Unrestricted Externally Accessible Lock)",
      "ddmc_optionA": "Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.",
      "ddmc_optionB": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.\nB.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credentials in Registry (T1552.002)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Preventing execution of any address in a memory region other than the code segment.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credentials in Registry (T1552.002)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "How can you mitigate Credentials in Registry (T1552.002)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Preventing execution of any address in a memory region other than the code segment.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Obtain Capabilities (T1588)?\nA.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Obtain Capabilities (T1588)",
      "ddmc_optionA": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionB": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Obtain Capabilities (T1588)?\nA.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Output Neutralization for Logs (CWE-117)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Output Neutralization for Logs (CWE-117)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Output Neutralization for Logs (CWE-117)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  }
]