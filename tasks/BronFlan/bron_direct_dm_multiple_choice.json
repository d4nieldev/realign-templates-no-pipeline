[
  {
    "instruction": "What is a method to mitigate T1547.003 (Time Providers)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.003 (Time Providers)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1547.003 (Time Providers)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1574.006 (Dynamic Linker Hijacking)?\nA.  Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. <code>-silent</code>, <code>-ignore-reboot</code>), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. <code>VBoxManage startvm $VM --type headless</code>). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. <code>VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"</code>). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.(Citations: Shadowbunny VM Defense Evasion, Shadowbunny VM Defense Evasion)\nB.  This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for Process Injection against browser applications.\nC.  Deleting Windows event logs (via native binaries , API functions , or PowerShell ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").(Citations: Microsoft wevtutil Oct 2017, Microsoft EventLog.Clear, Microsoft Clear-EventLog)\nD.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1574.006 (Dynamic Linker Hijacking)",
      "ddmc_optionA": "Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. <code>-silent</code>, <code>-ignore-reboot</code>), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. <code>VBoxManage startvm $VM --type headless</code>). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. <code>VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"</code>). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.(Citations: Shadowbunny VM Defense Evasion, Shadowbunny VM Defense Evasion)",
      "ddmc_optionB": "This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for Process Injection against browser applications.",
      "ddmc_optionC": "Deleting Windows event logs (via native binaries , API functions , or PowerShell ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").(Citations: Microsoft wevtutil Oct 2017, Microsoft EventLog.Clear, Microsoft Clear-EventLog)",
      "ddmc_optionD": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
      "prompts": [],
      "instruction": "What is a method to detect T1574.006 (Dynamic Linker Hijacking)?\nA.  Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. <code>-silent</code>, <code>-ignore-reboot</code>), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. <code>VBoxManage startvm $VM --type headless</code>). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. <code>VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"</code>). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.(Citations: Shadowbunny VM Defense Evasion, Shadowbunny VM Defense Evasion)\nB.  This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for Process Injection against browser applications.\nC.  Deleting Windows event logs (via native binaries , API functions , or PowerShell ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").(Citations: Microsoft wevtutil Oct 2017, Microsoft EventLog.Clear, Microsoft Clear-EventLog)\nD.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nA.  Apply blinding [REF-1219] or masking techniques in strategic areas.\nB.  Use non-predictable inputs for seed generation.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Always verify the length of the string unit character.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "ddmc_optionA": "Apply blinding [REF-1219] or masking techniques in strategic areas.",
      "ddmc_optionB": "Use non-predictable inputs for seed generation.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Always verify the length of the string unit character.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nA.  Apply blinding [REF-1219] or masking techniques in strategic areas.\nB.  Use non-predictable inputs for seed generation.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Always verify the length of the string unit character.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  A true random number generator should be specified for cryptographic algorithms.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Consider modifying your code to use non-blocking synchronization methods.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-412 (Unrestricted Externally Accessible Lock)",
      "ddmc_optionA": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_optionB": "A true random number generator should be specified for cryptographic algorithms.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Consider modifying your code to use non-blocking synchronization methods.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Consider modifying your code to use non-blocking synchronization methods.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  A true random number generator should be specified for cryptographic algorithms.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Consider modifying your code to use non-blocking synchronization methods.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1055.005 (Thread Local Storage)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1055.005 (Thread Local Storage)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate T1055.005 (Thread Local Storage)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Stage Channels (T1104)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing a call stack for return addresses which point to unexpected memory locations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Analyzing a call stack for return addresses which point to unexpected memory locations.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing a call stack for return addresses which point to unexpected memory locations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Modify Registry (T1112)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Modify Registry (T1112)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "How can you mitigate Modify Registry (T1112)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Blind SQL Injection (CAPEC-7)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Design: Enforce principle of least privilege\nC.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nD.  Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Blind SQL Injection (CAPEC-7)",
      "ddmc_optionA": "Minimize error/response output to only what is necessary for functional use or corrective language.",
      "ddmc_optionB": "Design: Enforce principle of least privilege",
      "ddmc_optionC": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)",
      "ddmc_optionD": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Blind SQL Injection (CAPEC-7)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Design: Enforce principle of least privilege\nC.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nD.  Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Schema Poisoning (CAPEC-271)",
      "ddmc_optionA": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "ddmc_optionB": "Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.",
      "ddmc_optionC": "Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.",
      "ddmc_optionD": "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "prompts": [],
      "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1546.007 (Netsh Helper DLL)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an software configuration.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1546.007 (Netsh Helper DLL)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate T1546.007 (Netsh Helper DLL)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an software configuration.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1543.003 (Windows Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Restoring a file for an entity to access.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.003 (Windows Service)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1543.003 (Windows Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Restoring a file for an entity to access.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Using kernel-level capabilities to isolate processes.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use of Default Credentials (CWE-1392)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nC.  For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest",
      "ddmc_optionC": "For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use of Default Credentials (CWE-1392)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nC.  For commonly-used APIs and resource types, automated tools often have signatures that can spot this issue.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Msiexec (T1218.007)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Block users or groups from installing unapproved software.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Permissive Cross-domain Policy with Untrusted Domains (CWE-942)?\nA.  System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Permissive Cross-domain Policy with Untrusted Domains (CWE-942)",
      "ddmc_optionA": "System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.",
      "ddmc_optionB": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_optionC": "Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "prompts": [],
      "instruction": "How can you mitigate Permissive Cross-domain Policy with Untrusted Domains (CWE-942)?\nA.  System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.\nB.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nC.  Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Manipulate Registry Information (CAPEC-203)?\nA.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\nB.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nC.  Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\nD.  Monitor traffic and resource usage and pay attention if resource exhaustion occurs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Manipulate Registry Information (CAPEC-203)",
      "ddmc_optionA": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
      "ddmc_optionB": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
      "ddmc_optionC": "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
      "ddmc_optionD": "Monitor traffic and resource usage and pay attention if resource exhaustion occurs.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Manipulate Registry Information (CAPEC-203)?\nA.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\nB.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nC.  Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\nD.  Monitor traffic and resource usage and pay attention if resource exhaustion occurs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Pass the Hash (T1550.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Pass the Hash (T1550.002)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionD": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Pass the Hash (T1550.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Software inventorying identifies and records the software items in the organization's architecture.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Encrypting a file using a cryptographic key.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionB": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Software inventorying identifies and records the software items in the organization's architecture.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Encrypting a file using a cryptographic key.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionC": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionD": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1505 (Server Software Component)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1505 (Server Software Component)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionD": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1505 (Server Software Component)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Rogue Domain Controller (T1207)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\nB.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\nC.  Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)",
      "ddmc_optionB": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)",
      "ddmc_optionC": "Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)",
      "prompts": [],
      "instruction": "What is a method to detect Rogue Domain Controller (T1207)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\nB.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\nC.  Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cloud Accounts (T1078.004)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Accounts (T1078.004)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cloud Accounts (T1078.004)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  Use software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.\nB.  Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.\nD.  Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)",
      "ddmc_optionA": "Use software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.",
      "ddmc_optionB": "Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.",
      "ddmc_optionC": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.",
      "ddmc_optionD": "Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  Use software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.\nB.  Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.\nD.  Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Infrastructure Discovery (T1580)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Infrastructure Discovery (T1580)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Infrastructure Discovery (T1580)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1574.012 (COR_PROFILER)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Using kernel-level capabilities to isolate processes.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.012 (COR_PROFILER)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1574.012 (COR_PROFILER)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Using kernel-level capabilities to isolate processes.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-606 (Weakening of Cellular Encryption)?\nA.  Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.\nB.  Be mindful of your surroundings when discussing sensitive information in public areas.\nC.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nD.  Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-606 (Weakening of Cellular Encryption)",
      "ddmc_optionA": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.",
      "ddmc_optionB": "Be mindful of your surroundings when discussing sensitive information in public areas.",
      "ddmc_optionC": "Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.",
      "ddmc_optionD": "Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-606 (Weakening of Cellular Encryption)?\nA.  Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.\nB.  Be mindful of your surroundings when discussing sensitive information in public areas.\nC.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nD.  Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)?\nA.  Implementation: Implement email filtering solutions on mail server or on MTA, relay server.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)",
      "ddmc_optionA": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server.",
      "ddmc_optionB": "Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.",
      "ddmc_optionC": "Use secure functions not vulnerable to buffer overflow.",
      "ddmc_optionD": "Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server.",
      "prompts": [],
      "instruction": "How can you mitigate Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)?\nA.  Implementation: Implement email filtering solutions on mail server or on MTA, relay server.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1568.003 (DNS Calculation)?\nA.  Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.\nB.  Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.\nD.  Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Monitor for changes to files associated with system-level processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1568.003 (DNS Calculation)",
      "ddmc_optionA": "Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.",
      "ddmc_optionB": "Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).",
      "ddmc_optionC": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.",
      "ddmc_optionD": "Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Monitor for changes to files associated with system-level processes.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.",
      "prompts": [],
      "instruction": "What is a method to detect T1568.003 (DNS Calculation)?\nA.  Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.\nB.  Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.\nD.  Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Monitor for changes to files associated with system-level processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Scheduled Task (T1053.005)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Initiating a host's shutdown sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Code Repositories (T1213.003)?\nA.  Restoring software to a host.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The detection of an internal host relaying traffic between the internal network and the external network.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Code Repositories (T1213.003)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "What is a method to mitigate Code Repositories (T1213.003)?\nA.  Restoring software to a host.\nB.  Restoring the data in a database.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The detection of an internal host relaying traffic between the internal network and the external network.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Space after Filename (T1036.006)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Space after Filename (T1036.006)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Space after Filename (T1036.006)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1053.007 (Container Orchestration Job)?\nA.  Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows. The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citations: GitLab WakeOnLAN)\nB.  Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nD.  Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1053.007 (Container Orchestration Job)",
      "ddmc_optionA": "Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows. The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citations: GitLab WakeOnLAN)",
      "ddmc_optionB": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmc_optionC": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
      "ddmc_optionD": "Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.",
      "prompts": [],
      "instruction": "How can you detect T1053.007 (Container Orchestration Job)?\nA.  Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows. The Wake-on-LAN magic packet consists of 6 bytes of <code>FF</code> followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citations: GitLab WakeOnLAN)\nB.  Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nD.  Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Insufficient Verification of Data Authenticity (CWE-345)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)\nD.  To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Insufficient Verification of Data Authenticity (CWE-345)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)",
      "ddmc_optionD": "To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Insufficient Verification of Data Authenticity (CWE-345)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections)\nD.  To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1614 (System Location Discovery)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Employing file hash comparisons to detect known malware.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1614 (System Location Discovery)",
      "ddmc_optionA": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1614 (System Location Discovery)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Employing file hash comparisons to detect known malware.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Portable Executable Injection (T1055.002)?\nA.  Restoring an software configuration.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate Portable Executable Injection (T1055.002)?\nA.  Restoring an software configuration.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)?\nA.  This kind of patch may not be feasible or implementable for all processors or all weaknesses.\nB.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nC.  Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.\nD.  A true random number generator should be implemented for cryptographic algorithms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)",
      "ddmc_optionA": "This kind of patch may not be feasible or implementable for all processors or all weaknesses.",
      "ddmc_optionB": "When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.",
      "ddmc_optionC": "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.",
      "ddmc_optionD": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)?\nA.  This kind of patch may not be feasible or implementable for all processors or all weaknesses.\nB.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nC.  Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.\nD.  A true random number generator should be implemented for cryptographic algorithms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nB.  Resolve all URIs to absolute or canonical representations before processing.\nC.  Perform input validation on user data.\nD.  SEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Authorization Bypass Through User-Controlled Key (CWE-639)",
      "ddmc_optionA": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
      "ddmc_optionB": "Resolve all URIs to absolute or canonical representations before processing.",
      "ddmc_optionC": "Perform input validation on user data.",
      "ddmc_optionD": "SEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform input validation on user data.",
      "prompts": [],
      "instruction": "How can you mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nB.  Resolve all URIs to absolute or canonical representations before processing.\nC.  Perform input validation on user data.\nD.  SEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1218.003 (CMSTP)?\nA.  Encrypting a file using a cryptographic key.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1218.003 (CMSTP)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate T1218.003 (CMSTP)?\nA.  Encrypting a file using a cryptographic key.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Buffer Overflow via Parameter Expansion (CAPEC-47)?\nA.  Ensure Public Keys are signed by a Certificate Authority\nB.  Implementation: Server routines should be determined by content not determined by filename or file extension.\nC.  Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system\nD.  Avoid giving elevated privileges to developers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Buffer Overflow via Parameter Expansion (CAPEC-47)",
      "ddmc_optionA": "Ensure Public Keys are signed by a Certificate Authority",
      "ddmc_optionB": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "ddmc_optionC": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
      "ddmc_optionD": "Avoid giving elevated privileges to developers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Buffer Overflow via Parameter Expansion (CAPEC-47)?\nA.  Ensure Public Keys are signed by a Certificate Authority\nB.  Implementation: Server routines should be determined by content not determined by filename or file extension.\nC.  Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system\nD.  Avoid giving elevated privileges to developers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Encrypting a hard disk partition to prevent cleartext access to a file system.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Encrypting a hard disk partition to prevent cleartext access to a file system.",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Encrypting a hard disk partition to prevent cleartext access to a file system.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-251 (Local Code Inclusion)?\nA.  Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.\nB.  Implementation: Obfuscate server fields of HTTP response.\nC.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nD.  Implementation: Provide for network flow control and traffic shaping to control access to the resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-251 (Local Code Inclusion)",
      "ddmc_optionA": "Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.",
      "ddmc_optionB": "Implementation: Obfuscate server fields of HTTP response.",
      "ddmc_optionC": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
      "ddmc_optionD": "Implementation: Provide for network flow control and traffic shaping to control access to the resources.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-251 (Local Code Inclusion)?\nA.  Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.\nB.  Implementation: Obfuscate server fields of HTTP response.\nC.  Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.\nD.  Implementation: Provide for network flow control and traffic shaping to control access to the resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Restricting network traffic originating from any location.\nB.  Detects processes that modify, change, or replace their own code at runtime.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detects processes that modify, change, or replace their own code at runtime.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Restricting network traffic originating from any location.\nB.  Detects processes that modify, change, or replace their own code at runtime.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate SID-History Injection (T1134.005)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "SID-History Injection (T1134.005)",
      "ddmc_optionA": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "prompts": [],
      "instruction": "How can you mitigate SID-History Injection (T1134.005)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)?\nA.  Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.\nB.  Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.\nC.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\nD.  Provide clear upper and lower bounds on the scale of any protocols designed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)",
      "ddmc_optionA": "Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.",
      "ddmc_optionB": "Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.",
      "ddmc_optionC": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "ddmc_optionD": "Provide clear upper and lower bounds on the scale of any protocols designed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "prompts": [],
      "instruction": "How can you mitigate Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)?\nA.  Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.\nB.  Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.\nC.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\nD.  Provide clear upper and lower bounds on the scale of any protocols designed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Hidden Window (T1564.003)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Block users or groups from installing unapproved software.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hidden Window (T1564.003)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Block users or groups from installing unapproved software.",
      "ddmc_optionD": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block users or groups from installing unapproved software.",
      "prompts": [],
      "instruction": "What is a method to mitigate Hidden Window (T1564.003)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Block users or groups from installing unapproved software.\nD.  A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Web Service (T1102)?\nA.  Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citations: AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft 4768 TGT 2017)\nB.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update)\nC.  Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Web Service (T1102)",
      "ddmc_optionA": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citations: AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft 4768 TGT 2017)",
      "ddmc_optionB": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update)",
      "ddmc_optionC": "Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.",
      "ddmc_optionD": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "How can you detect Web Service (T1102)?\nA.  Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citations: AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft 4768 TGT 2017)\nB.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update)\nC.  Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File eviction techniques evict files from system storage.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File eviction techniques evict files from system storage.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File eviction techniques evict files from system storage.\nC.  Suspending a running process on a computer system.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1568 (Dynamic Resolution)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Suspending a running process on a computer system.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File eviction techniques evict files from system storage.\nC.  Suspending a running process on a computer system.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1033 (System Owner/User Discovery)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1033 (System Owner/User Discovery)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1033 (System Owner/User Discovery)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Handling of Missing Special Element (CWE-166)?\nA.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Enforce the use of strong mutual authentication mechanism between the two parties.\nC.  Implement the access control check first. Access should only be given to asset if agent is authorized.\nD.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Missing Special Element (CWE-166)",
      "ddmc_optionA": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "Enforce the use of strong mutual authentication mechanism between the two parties.",
      "ddmc_optionC": "Implement the access control check first. Access should only be given to asset if agent is authorized.",
      "ddmc_optionD": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Handling of Missing Special Element (CWE-166)?\nA.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Enforce the use of strong mutual authentication mechanism between the two parties.\nC.  Implement the access control check first. Access should only be given to asset if agent is authorized.\nD.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an entity's access to resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmc_optionA": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "prompts": [],
      "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an entity's access to resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Missing Authentication for Critical Function (CWE-306)?\nA.  Use a tool that dynamically detects memory management problems, such as valgrind.\nB.  Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].\nD.  Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Authentication for Critical Function (CWE-306)",
      "ddmc_optionA": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmc_optionB": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_optionC": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].",
      "ddmc_optionD": "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].",
      "prompts": [],
      "instruction": "How can you mitigate Missing Authentication for Critical Function (CWE-306)?\nA.  Use a tool that dynamically detects memory management problems, such as valgrind.\nB.  Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].\nD.  Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Covert Channel (CWE-514)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Covert Channel (CWE-514)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Covert Channel (CWE-514)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Fallback Channels (T1008)?\nA.  Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  <code>&lt;?php @eval($_POST['password']);&gt;</code> Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citations: Lee 2013, NSA Cyber Mitigating Web Shells, NSA Cyber Mitigating Web Shells, US-CERT Alert TA15-314A Web Shells)\nB.  Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\nC.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Fallback Channels (T1008)",
      "ddmc_optionA": "Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  <code>&lt;?php @eval($_POST['password']);&gt;</code> Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citations: Lee 2013, NSA Cyber Mitigating Web Shells, NSA Cyber Mitigating Web Shells, US-CERT Alert TA15-314A Web Shells)",
      "ddmc_optionB": "Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.",
      "ddmc_optionC": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)",
      "ddmc_optionD": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Fallback Channels (T1008)?\nA.  Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  <code>&lt;?php @eval($_POST['password']);&gt;</code> Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citations: Lee 2013, NSA Cyber Mitigating Web Shells, NSA Cyber Mitigating Web Shells, US-CERT Alert TA15-314A Web Shells)\nB.  Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\nC.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)?\nA.  Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.\nB.  This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.\nC.  Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\nD.  Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)",
      "ddmc_optionA": "Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.",
      "ddmc_optionB": "This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.",
      "ddmc_optionC": "Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.",
      "ddmc_optionD": "Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)",
      "prompts": [],
      "instruction": "What is a method to mitigate Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)?\nA.  Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.\nB.  This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.\nC.  Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\nD.  Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Data from Removable Media (T1025)?\nA.  The email removal technique deletes email files from system storage.\nB.  Employing file hash comparisons to detect known malware.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data from Removable Media (T1025)",
      "ddmc_optionA": "The email removal technique deletes email files from system storage.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Data from Removable Media (T1025)?\nA.  The email removal technique deletes email files from system storage.\nB.  Employing file hash comparisons to detect known malware.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1030 (Data Transfer Size Limits)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1030 (Data Transfer Size Limits)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1030 (Data Transfer Size Limits)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Employing file hash comparisons to detect known malware.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\nB.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\nC.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Following of a Certificate's Chain of Trust (CWE-296)",
      "ddmc_optionA": "For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.",
      "ddmc_optionB": "In flat address space situations, never allow computing memory addresses as offsets from another memory address.",
      "ddmc_optionC": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\nB.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\nC.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Service Discovery (T1007)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Service Discovery (T1007)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate System Service Discovery (T1007)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.\nB.  Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Do not expose administrative functionnality on the user UI.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)",
      "ddmc_optionA": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.",
      "ddmc_optionB": "Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.",
      "ddmc_optionC": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.",
      "ddmc_optionD": "Do not expose administrative functionnality on the user UI.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.\nB.  Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Do not expose administrative functionnality on the user UI.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Security Support Provider (T1547.005)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Encrypting a file using a cryptographic key.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Security Support Provider (T1547.005)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Security Support Provider (T1547.005)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Encrypting a file using a cryptographic key.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1548.001 (Setuid and Setgid)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1548.001 (Setuid and Setgid)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate T1548.001 (Setuid and Setgid)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Login Hook (T1037.002)?\nA.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nB.  Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Login Hook (T1037.002)",
      "ddmc_optionA": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionB": "Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Login Hook (T1037.002)?\nA.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nB.  Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Portable Executable Injection (T1055.002)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate Portable Executable Injection (T1055.002)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Image File Execution Options Injection (T1546.012)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Image File Execution Options Injection (T1546.012)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Web Session Cookie (T1539)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Web Session Cookie (T1539)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Application Window Discovery (T1010)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application Window Discovery (T1010)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Application Window Discovery (T1010)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Screensaver (T1546.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Screensaver (T1546.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "How can you mitigate Screensaver (T1546.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1137.002 (Office Test)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1137.002 (Office Test)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "How can you mitigate T1137.002 (Office Test)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Analyzing the resources accessed by a user to identify unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Multi-hop Proxy (T1090.003)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  The detection of an internal host relaying traffic between the internal network and the external network.\nC.  Process eviction techniques terminate or remove running process.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionC": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Multi-hop Proxy (T1090.003)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  The detection of an internal host relaying traffic between the internal network and the external network.\nC.  Process eviction techniques terminate or remove running process.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring the existence of or changes to Domain User Accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Monitoring the existence of or changes to Domain User Accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring the existence of or changes to Domain User Accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Clickjacking (CAPEC-103)?\nA.  Implementation: Kernel Direct Memory Access Protection\nB.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nC.  Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\nD.  Change default PIN passwords and always use one when connecting.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clickjacking (CAPEC-103)",
      "ddmc_optionA": "Implementation: Kernel Direct Memory Access Protection",
      "ddmc_optionB": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "ddmc_optionC": "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
      "ddmc_optionD": "Change default PIN passwords and always use one when connecting.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "prompts": [],
      "instruction": "What is a method to mitigate Clickjacking (CAPEC-103)?\nA.  Implementation: Kernel Direct Memory Access Protection\nB.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nC.  Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\nD.  Change default PIN passwords and always use one when connecting.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exploitation for Defense Evasion (T1211)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Restoring an software configuration.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmc_optionA": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "How can you mitigate Exploitation for Defense Evasion (T1211)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Restoring an software configuration.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Low-Level Functionality (CWE-695)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries. Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Low-Level Functionality (CWE-695)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionC": "Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries. Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Use of Low-Level Functionality (CWE-695)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries. Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Encrypting a file using a cryptographic key.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Restoring an entity's access to resources.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Physical link mapping identifies and models the link connectivity of the network devices within a physical network.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Encrypting a file using a cryptographic key.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Restoring an entity's access to resources.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Session Fixation (CWE-384)?\nA.  For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.\nB.  For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.\nC.  Debugging information should not make its way into a production release.\nD.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Session Fixation (CWE-384)",
      "ddmc_optionA": "For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.",
      "ddmc_optionB": "For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.",
      "ddmc_optionC": "Debugging information should not make its way into a production release.",
      "ddmc_optionD": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.",
      "prompts": [],
      "instruction": "How can you mitigate Session Fixation (CWE-384)?\nA.  For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.\nB.  For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.\nC.  Debugging information should not make its way into a production release.\nD.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Daemon (T1543.004)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Daemon (T1543.004)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1025 (Data from Removable Media)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1025 (Data from Removable Media)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1025 (Data from Removable Media)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.\nB.  Leverage antivirus tools to detect known malware\nC.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nD.  For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Install Malicious Extension (CAPEC-698)",
      "ddmc_optionA": "The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.",
      "ddmc_optionB": "Leverage antivirus tools to detect known malware",
      "ddmc_optionC": "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.",
      "ddmc_optionD": "For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.\nB.  Leverage antivirus tools to detect known malware\nC.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nD.  For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate DTD Injection (CAPEC-228)?\nA.  Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\nB.  Use a language or compiler that performs automatic bounds checking.\nC.  Perform output validation for all remote content.\nD.  Implementation: Use XML parsing tools that protect against DTD attacks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "DTD Injection (CAPEC-228)",
      "ddmc_optionA": "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
      "ddmc_optionB": "Use a language or compiler that performs automatic bounds checking.",
      "ddmc_optionC": "Perform output validation for all remote content.",
      "ddmc_optionD": "Implementation: Use XML parsing tools that protect against DTD attacks.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implementation: Use XML parsing tools that protect against DTD attacks.",
      "prompts": [],
      "instruction": "What is a method to mitigate DTD Injection (CAPEC-228)?\nA.  Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\nB.  Use a language or compiler that performs automatic bounds checking.\nC.  Perform output validation for all remote content.\nD.  Implementation: Use XML parsing tools that protect against DTD attacks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  File eviction techniques evict files from system storage.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Restricting network traffic originating from untrusted networks destined towards a private host or enclave.",
      "ddmc_optionB": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  File eviction techniques evict files from system storage.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Subvert Trust Controls (T1553)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Subvert Trust Controls (T1553)",
      "ddmc_optionA": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Subvert Trust Controls (T1553)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Free of Memory not on the Heap (CWE-590)?\nA.  Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.\nB.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nC.  Use a language that provides abstractions for memory allocation and deallocation.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Free of Memory not on the Heap (CWE-590)",
      "ddmc_optionA": "Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.",
      "ddmc_optionB": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionC": "Use a language that provides abstractions for memory allocation and deallocation.",
      "ddmc_optionD": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use a language that provides abstractions for memory allocation and deallocation.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Free of Memory not on the Heap (CWE-590)?\nA.  Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.\nB.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nC.  Use a language that provides abstractions for memory allocation and deallocation.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1087.003 (Email Account)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nB.  Asset management systems may help with the detection of computer systems or network devices that should not exist on a network. Endpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nD.  Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1087.003 (Email Account)",
      "ddmc_optionA": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionB": "Asset management systems may help with the detection of computer systems or network devices that should not exist on a network. Endpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports.",
      "ddmc_optionC": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_optionD": "Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "prompts": [],
      "instruction": "What is a method to detect T1087.003 (Email Account)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nB.  Asset management systems may help with the detection of computer systems or network devices that should not exist on a network. Endpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nD.  Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1011.001 (Exfiltration Over Bluetooth)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Phishing (CAPEC-98)?\nA.  You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.\nB.  Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nC.  None. This attack happens offline.\nD.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Phishing (CAPEC-98)",
      "ddmc_optionA": "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.",
      "ddmc_optionB": "Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
      "ddmc_optionC": "None. This attack happens offline.",
      "ddmc_optionD": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Phishing (CAPEC-98)?\nA.  You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.\nB.  Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nC.  None. This attack happens offline.\nD.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Omitted Break Statement in Switch (CWE-484)?\nA.  Force the administrator to change the credential upon installation.\nB.  Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.\nC.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\nD.  The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Omitted Break Statement in Switch (CWE-484)",
      "ddmc_optionA": "Force the administrator to change the credential upon installation.",
      "ddmc_optionB": "Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.",
      "ddmc_optionC": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
      "ddmc_optionD": "The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Omitted Break Statement in Switch (CWE-484)?\nA.  Force the administrator to change the credential upon installation.\nB.  Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.\nC.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\nD.  The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Forced Integer Overflow (CAPEC-92)?\nA.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nB.  Always do bound checking before consuming user input data.\nC.  Ensure deleted files are actually deleted.\nD.  Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Integer Overflow (CAPEC-92)",
      "ddmc_optionA": "Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.",
      "ddmc_optionB": "Always do bound checking before consuming user input data.",
      "ddmc_optionC": "Ensure deleted files are actually deleted.",
      "ddmc_optionD": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Always do bound checking before consuming user input data.",
      "prompts": [],
      "instruction": "How can you mitigate Forced Integer Overflow (CAPEC-92)?\nA.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nB.  Always do bound checking before consuming user input data.\nC.  Ensure deleted files are actually deleted.\nD.  Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1518.001 (Security Software Discovery)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1518.001 (Security Software Discovery)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1518.001 (Security Software Discovery)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1570 (Lateral Tool Transfer)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting network traffic originating from any location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1570 (Lateral Tool Transfer)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1570 (Lateral Tool Transfer)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting network traffic originating from any location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate File and Directory Discovery (T1083)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Discovery (T1083)",
      "ddmc_optionA": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate File and Directory Discovery (T1083)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)?\nA.  Protect access control list files.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Implement the validate() method and call super.validate() within that method.\nD.  Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)",
      "ddmc_optionA": "Protect access control list files.",
      "ddmc_optionB": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
      "ddmc_optionC": "Implement the validate() method and call super.validate() within that method.",
      "ddmc_optionD": "Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Protect access control list files.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)?\nA.  Protect access control list files.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Implement the validate() method and call super.validate() within that method.\nD.  Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Initiating a host's reboot sequence to terminate all running processes.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmc_optionA": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Initiating a host's reboot sequence to terminate all running processes.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Emulating instructions in a file looking for specific patterns.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nA.  Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.\nB.  Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Line Delimiters (CWE-144)",
      "ddmc_optionA": "Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.",
      "ddmc_optionB": "Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nA.  Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.\nB.  Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Bootkit (T1542.003)?\nA.  Protect sensitive information with strong encryption.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bootkit (T1542.003)",
      "ddmc_optionA": "Protect sensitive information with strong encryption.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionD": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate Bootkit (T1542.003)?\nA.  Protect sensitive information with strong encryption.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_optionC": "Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Protection for Outbound Error Messages and Alert Signals (CWE-1320)?\nA.  Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.\nB.  NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.\nC.  Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.\nD.  Do not use JNI calls if you don't trust the native library.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Protection for Outbound Error Messages and Alert Signals (CWE-1320)",
      "ddmc_optionA": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.",
      "ddmc_optionB": "NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.",
      "ddmc_optionC": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.",
      "ddmc_optionD": "Do not use JNI calls if you don't trust the native library.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Protection for Outbound Error Messages and Alert Signals (CWE-1320)?\nA.  Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.\nB.  NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.\nC.  Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.\nD.  Do not use JNI calls if you don't trust the native library.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Data Transfer Size Limits (T1030)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data Transfer Size Limits (T1030)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Data Transfer Size Limits (T1030)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Generation Algorithms (T1568.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Generation Algorithms (T1568.002)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionC": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Generation Algorithms (T1568.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)?\nA.  Leverage anti-virus products to detect and quarantine software with known virus.\nB.  Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.\nC.  Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.\nD.  Ensure that proper permissions on files and folders are enacted to limit accessibility.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)",
      "ddmc_optionA": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "ddmc_optionB": "Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.",
      "ddmc_optionC": "Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.",
      "ddmc_optionD": "Ensure that proper permissions on files and folders are enacted to limit accessibility.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "prompts": [],
      "instruction": "How can you mitigate Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)?\nA.  Leverage anti-virus products to detect and quarantine software with known virus.\nB.  Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.\nC.  Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.\nD.  Ensure that proper permissions on files and folders are enacted to limit accessibility.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Encrypting a file using a cryptographic key.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Analyzing a Container Image with respect to a set of policies.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Analyzing a Container Image with respect to a set of policies.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Encrypting a file using a cryptographic key.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Analyzing a Container Image with respect to a set of policies.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Limiting the transmission of a credential to a scoped set of relying parties.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionC": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Limiting the transmission of a credential to a scoped set of relying parties.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Local Data Staging (T1074.001)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  A one-time password is valid for only one user authentication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionD": "A one-time password is valid for only one user authentication.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "How can you mitigate Local Data Staging (T1074.001)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  A one-time password is valid for only one user authentication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  Ensure that all user-supplied input is validated before use.\nB.  Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nC.  Implementation: Perform input validation for all remote content.\nD.  Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)",
      "ddmc_optionA": "Ensure that all user-supplied input is validated before use.",
      "ddmc_optionB": "Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.",
      "ddmc_optionC": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionD": "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  Ensure that all user-supplied input is validated before use.\nB.  Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nC.  Implementation: Perform input validation for all remote content.\nD.  Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1207 (Rogue Domain Controller)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1207 (Rogue Domain Controller)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1207 (Rogue Domain Controller)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Output Neutralization for Logs (CWE-117)?\nA.  Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Output Neutralization for Logs (CWE-117)",
      "ddmc_optionA": "Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionD": "During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Output Neutralization for Logs (CWE-117)?\nA.  Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Encrypted Channel (T1573)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Encrypted Channel (T1573)",
      "ddmc_optionA": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)",
      "ddmc_optionB": "Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmc_optionC": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)",
      "ddmc_optionD": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)",
      "prompts": [],
      "instruction": "What is a method to detect Encrypted Channel (T1573)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1082 (System Information Discovery)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Employing file hash comparisons to detect known malware.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1082 (System Information Discovery)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1082 (System Information Discovery)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Employing file hash comparisons to detect known malware.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-698 (Install Malicious Extension)?\nA.  Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.\nB.  If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".\nC.  Configuration: Disable Java Script in the browser\nD.  Perform input validation for all remote content.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-698 (Install Malicious Extension)",
      "ddmc_optionA": "Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.",
      "ddmc_optionB": "If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".",
      "ddmc_optionC": "Configuration: Disable Java Script in the browser",
      "ddmc_optionD": "Perform input validation for all remote content.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-698 (Install Malicious Extension)?\nA.  Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.\nB.  If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".\nC.  Configuration: Disable Java Script in the browser\nD.  Perform input validation for all remote content.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1596.004 (CDNs)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nC.  In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: Analyzing CS Dec 2020)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1596.004 (CDNs)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
      "ddmc_optionC": "In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: Analyzing CS Dec 2020)",
      "ddmc_optionD": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "What is a method to detect T1596.004 (CDNs)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nC.  In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: Analyzing CS Dec 2020)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Ingress Tool Transfer (T1105)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as <code>services.msc</code> or <code>eventvwr.msc</code>. Invoking non-Microsoft .msc files may be an indicator of malicious activity.\nC.  Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours. When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Ingress Tool Transfer (T1105)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as <code>services.msc</code> or <code>eventvwr.msc</code>. Invoking non-Microsoft .msc files may be an indicator of malicious activity.",
      "ddmc_optionC": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours. When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Ingress Tool Transfer (T1105)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as <code>services.msc</code> or <code>eventvwr.msc</code>. Invoking non-Microsoft .msc files may be an indicator of malicious activity.\nC.  Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours. When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spyware (CWE-512)?\nA.  Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.\nB.  Use spyware detection and removal software.\nC.  Refactor your code to avoid using reflection.\nD.  For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spyware (CWE-512)",
      "ddmc_optionA": "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.",
      "ddmc_optionB": "Use spyware detection and removal software.",
      "ddmc_optionC": "Refactor your code to avoid using reflection.",
      "ddmc_optionD": "For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use spyware detection and removal software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spyware (CWE-512)?\nA.  Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.\nB.  Use spyware detection and removal software.\nC.  Refactor your code to avoid using reflection.\nD.  For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "prompts": [],
      "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  After downloading open-source software, ensure integrity values have not changed.\nB.  Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\nC.  Test security lock programming flow in both pre-silicon and post-silicon environments.\nD.  Design: Include \"hosts file\"/IP address in the application\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)",
      "ddmc_optionA": "After downloading open-source software, ensure integrity values have not changed.",
      "ddmc_optionB": "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
      "ddmc_optionC": "Test security lock programming flow in both pre-silicon and post-silicon environments.",
      "ddmc_optionD": "Design: Include \"hosts file\"/IP address in the application",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)?\nA.  After downloading open-source software, ensure integrity values have not changed.\nB.  Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\nC.  Test security lock programming flow in both pre-silicon and post-silicon environments.\nD.  Design: Include \"hosts file\"/IP address in the application\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Screen Capture (T1113)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.001 (Launch Agent)",
      "ddmc_optionA": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Double-Checked Locking (CWE-609)?\nA.  Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.\nB.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Double-Checked Locking (CWE-609)",
      "ddmc_optionA": "Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.",
      "ddmc_optionB": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.",
      "prompts": [],
      "instruction": "What is a method to mitigate Double-Checked Locking (CWE-609)?\nA.  Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.\nB.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nC.  Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of a One-Way Hash without a Salt (CWE-759)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
      "ddmc_optionC": "Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nC.  Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Threat Intel Vendors (T1597.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Threat Intel Vendors (T1597.001)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Threat Intel Vendors (T1597.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Social Media (T1593.001)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Social Media (T1593.001)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate Social Media (T1593.001)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Macro Symbols (CWE-152)",
      "ddmc_optionA": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionC": "Use a language that provides appropriate memory abstractions.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an software configuration.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an software configuration.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Execution After Redirect (EAR) (CWE-698)?\nA.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.\nD.  Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Execution After Redirect (EAR) (CWE-698)",
      "ddmc_optionA": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
      "ddmc_optionB": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
      "ddmc_optionC": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.",
      "ddmc_optionD": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
      "prompts": [],
      "instruction": "How can you mitigate Execution After Redirect (EAR) (CWE-698)?\nA.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.\nD.  Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cloud Account (T1136.003)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Account (T1136.003)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cloud Account (T1136.003)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Proc Memory (T1055.009)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Proc Memory (T1055.009)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate Proc Memory (T1055.009)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1090.003 (Multi-hop Proxy)?\nA.  Restricting network traffic originating from any location.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1090.003 (Multi-hop Proxy)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate T1090.003 (Multi-hop Proxy)?\nA.  Restricting network traffic originating from any location.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Traffic Signaling (T1205)?\nA.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Traffic Signaling (T1205)",
      "ddmc_optionA": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "What is a method to mitigate Traffic Signaling (T1205)?\nA.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate WebView Exposure (CAPEC-503)?\nA.  To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.\nB.  3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.\nC.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nD.  Design: Perform validation on email header data\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "WebView Exposure (CAPEC-503)",
      "ddmc_optionA": "To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.",
      "ddmc_optionB": "3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.",
      "ddmc_optionC": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
      "ddmc_optionD": "Design: Perform validation on email header data",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.",
      "prompts": [],
      "instruction": "How can you mitigate WebView Exposure (CAPEC-503)?\nA.  To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.\nB.  3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.\nC.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nD.  Design: Perform validation on email header data\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Expression is Always False (CWE-570)?\nA.  Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Expression is Always False (CWE-570)",
      "ddmc_optionA": "Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Expression is Always False (CWE-570)?\nA.  Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Controlling access to local computer system resources with kernel-level capabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CAPEC-653 (Use of Known Operating System Credentials)?\nA.  There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.\nB.  You receive a text message from an entity that you are not even a customer of prompting you to log into your account.\nC.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nD.  Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CAPEC-653 (Use of Known Operating System Credentials)",
      "ddmc_optionA": "There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.",
      "ddmc_optionB": "You receive a text message from an entity that you are not even a customer of prompting you to log into your account.",
      "ddmc_optionC": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionD": "Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "prompts": [],
      "instruction": "How can you detect CAPEC-653 (Use of Known Operating System Credentials)?\nA.  There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.\nB.  You receive a text message from an entity that you are not even a customer of prompting you to log into your account.\nC.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nD.  Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Analyzing failed connections in a network to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Audio Capture (T1123)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmc_optionD": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Analyzing failed connections in a network to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Reflective Code Loading (T1620)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Restricting network traffic originating from any location.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Reflective Code Loading (T1620)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Reflective Code Loading (T1620)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Restricting network traffic originating from any location.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Build Image on Host (T1612)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Build Image on Host (T1612)",
      "ddmc_optionA": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionD": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "prompts": [],
      "instruction": "What is a method to mitigate Build Image on Host (T1612)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Mavinject (T1218.013)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mavinject (T1218.013)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "How can you mitigate Mavinject (T1218.013)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.\nB.  Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\nC.  Passively monitor cellular network connection for real-time threat detection and logging for manual review.\nD.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Rogue Base Station (CAPEC-617)",
      "ddmc_optionA": "Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.",
      "ddmc_optionB": "Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.",
      "ddmc_optionC": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "ddmc_optionD": "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "prompts": [],
      "instruction": "How can you mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.\nB.  Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\nC.  Passively monitor cellular network connection for real-time threat detection and logging for manual review.\nD.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LNK Icon Smuggling (T1027.012)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use signatures or heuristics to detect malicious software.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LNK Icon Smuggling (T1027.012)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use signatures or heuristics to detect malicious software.",
      "prompts": [],
      "instruction": "How can you mitigate LNK Icon Smuggling (T1027.012)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use signatures or heuristics to detect malicious software.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1539 (Steal Web Session Cookie)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1539 (Steal Web Session Cookie)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1539 (Steal Web Session Cookie)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Dictionary-based Password Attack (CAPEC-16)?\nA.  Setup a session time out for the session IDs.\nB.  Configuration: front-end HTTP agents notice ambiguous requests.\nC.  A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.\nD.  Leverage multi-factor authentication for all authentication services.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dictionary-based Password Attack (CAPEC-16)",
      "ddmc_optionA": "Setup a session time out for the session IDs.",
      "ddmc_optionB": "Configuration: front-end HTTP agents notice ambiguous requests.",
      "ddmc_optionC": "A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.",
      "ddmc_optionD": "Leverage multi-factor authentication for all authentication services.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Leverage multi-factor authentication for all authentication services.",
      "prompts": [],
      "instruction": "How can you mitigate Dictionary-based Password Attack (CAPEC-16)?\nA.  Setup a session time out for the session IDs.\nB.  Configuration: front-end HTTP agents notice ambiguous requests.\nC.  A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.\nD.  Leverage multi-factor authentication for all authentication services.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Encrypting a file using a cryptographic key.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Encrypting a file using a cryptographic key.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate File and Directory Discovery (T1083)?\nA.  Restoring an software configuration.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Discovery (T1083)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate File and Directory Discovery (T1083)?\nA.  Restoring an software configuration.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Following of a Certificate's Chain of Trust (CWE-296)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1033 (System Owner/User Discovery)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1033 (System Owner/User Discovery)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate T1033 (System Owner/User Discovery)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of GET Request Method With Sensitive Query Strings (CWE-598)?\nA.  Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.\nB.  Both Equals() and Hashcode() should be defined.\nC.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\nD.  Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of GET Request Method With Sensitive Query Strings (CWE-598)",
      "ddmc_optionA": "Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.",
      "ddmc_optionB": "Both Equals() and Hashcode() should be defined.",
      "ddmc_optionC": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
      "ddmc_optionD": "Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Both Equals() and Hashcode() should be defined.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of GET Request Method With Sensitive Query Strings (CWE-598)?\nA.  Operating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.\nB.  Both Equals() and Hashcode() should be defined.\nC.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\nD.  Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Captured Tickets (Pass The Ticket) (CAPEC-645)",
      "ddmc_optionA": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.",
      "ddmc_optionB": "Enforce regular patching of software.",
      "ddmc_optionC": "Design: Enforce principle of least privilege",
      "ddmc_optionD": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Change default passwords by choosing strong passwords.\nB.  Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Design: Perform allowlist validation against a positive specification for command length, type, and parameters.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Delimiters (CAPEC-15)",
      "ddmc_optionA": "Change default passwords by choosing strong passwords.",
      "ddmc_optionB": "Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.",
      "ddmc_optionC": "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
      "ddmc_optionD": "Design: Perform allowlist validation against a positive specification for command length, type, and parameters.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Perform allowlist validation against a positive specification for command length, type, and parameters.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Change default passwords by choosing strong passwords.\nB.  Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Design: Perform allowlist validation against a positive specification for command length, type, and parameters.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP\nC.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nD.  When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Authorization Bypass Through User-Controlled Key (CWE-639)",
      "ddmc_optionA": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP",
      "ddmc_optionC": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
      "ddmc_optionD": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Authorization Bypass Through User-Controlled Key (CWE-639)?\nA.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP\nC.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nD.  When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Target Programs with Elevated Privileges (CAPEC-69)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.\nC.  Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nD.  Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Target Programs with Elevated Privileges (CAPEC-69)",
      "ddmc_optionA": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionB": "The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.",
      "ddmc_optionC": "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
      "ddmc_optionD": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.",
      "prompts": [],
      "instruction": "What is a method to detect Target Programs with Elevated Privileges (CAPEC-69)?\nA.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nB.  The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.\nC.  Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\nD.  Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Memory (T1003.001)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Suspending a running process on a computer system.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Memory (T1003.001)",
      "ddmc_optionA": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionB": "Suspending a running process on a computer system.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Memory (T1003.001)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Suspending a running process on a computer system.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Phishing (CAPEC-98)?\nA.  Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.\nB.  Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.\nC.  Leverage multi-factor authentication for all authentication services.\nD.  Implementation: Perform input validation for all remote content.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Phishing (CAPEC-98)",
      "ddmc_optionA": "Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.",
      "ddmc_optionB": "Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.",
      "ddmc_optionC": "Leverage multi-factor authentication for all authentication services.",
      "ddmc_optionD": "Implementation: Perform input validation for all remote content.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implementation: Perform input validation for all remote content.",
      "prompts": [],
      "instruction": "How can you mitigate Phishing (CAPEC-98)?\nA.  Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.\nB.  Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.\nC.  Leverage multi-factor authentication for all authentication services.\nD.  Implementation: Perform input validation for all remote content.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1053.005 (Scheduled Task)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1053.005 (Scheduled Task)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "prompts": [],
      "instruction": "How can you mitigate T1053.005 (Scheduled Task)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Time Discovery (T1124)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  Restoring a file for an entity to access.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Time Discovery (T1124)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  Restoring a file for an entity to access.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Reversible Encryption (T1556.005)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Reversible Encryption (T1556.005)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Reversible Encryption (T1556.005)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Leading Special Elements (CWE-160)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.",
      "ddmc_optionD": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Uninitialized Value on Reset for Registers Holding Security Settings (CWE-1271)?\nA.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.\nB.  All registers holding security-critical information should be set to a specific value on reset.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Uninitialized Value on Reset for Registers Holding Security Settings (CWE-1271)",
      "ddmc_optionA": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.",
      "ddmc_optionB": "All registers holding security-critical information should be set to a specific value on reset.",
      "ddmc_optionC": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "All registers holding security-critical information should be set to a specific value on reset.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Uninitialized Value on Reset for Registers Holding Security Settings (CWE-1271)?\nA.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.\nB.  All registers holding security-critical information should be set to a specific value on reset.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-462 (Duplicate Key in Associative List (Alist))?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.\nC.  Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-462 (Duplicate Key in Associative List (Alist))",
      "ddmc_optionA": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionB": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.",
      "ddmc_optionC": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
      "ddmc_optionD": "Force the administrator to change the credential upon installation.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-462 (Duplicate Key in Associative List (Alist))?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.\nC.  Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1565.001 (Stored Data Manipulation)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1565.001 (Stored Data Manipulation)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate T1565.001 (Stored Data Manipulation)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Network Boundary Bridging (T1599)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Set and enforce secure password policies for accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Boundary Bridging (T1599)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Set and enforce secure password policies for accounts.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Network Boundary Bridging (T1599)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Set and enforce secure password policies for accounts.\nC.  Set and enforce secure password policies for accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect External Control of Critical State Data (CWE-642)?\nA.  This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection\nC.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "External Control of Critical State Data (CWE-642)",
      "ddmc_optionA": "This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection",
      "ddmc_optionC": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect External Control of Critical State Data (CWE-642)?\nA.  This weakness can be found using automated dynamic analysis. Both emulation of a CPU with instruction skips, as well as RTL simulation of a CPU IP, can indicate parts of the code that are sensitive to faults due to instruction skips.\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies Generated Code Inspection\nC.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Conduct detailed vendor assessment before acquiring COTS hardware.\nB.  Implementation: Use type conversions such as JDBC prepared statements.\nC.  Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables\nD.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Delimiters (CAPEC-15)",
      "ddmc_optionA": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "ddmc_optionB": "Implementation: Use type conversions such as JDBC prepared statements.",
      "ddmc_optionC": "Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables",
      "ddmc_optionD": "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implementation: Use type conversions such as JDBC prepared statements.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Conduct detailed vendor assessment before acquiring COTS hardware.\nB.  Implementation: Use type conversions such as JDBC prepared statements.\nC.  Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables\nD.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Social Media Accounts (T1586.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Protect sensitive information with strong encryption.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Social Media Accounts (T1586.001)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Social Media Accounts (T1586.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Protect sensitive information with strong encryption.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Serialized Data with Nested Payloads (CAPEC-230)?\nA.  Include \"hosts file\"/IP address in the application.\nB.  Implementation: Upgrade phone lines. Note this may be prohibitively expensive\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Pick a robust implementation of the data parser.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serialized Data with Nested Payloads (CAPEC-230)",
      "ddmc_optionA": "Include \"hosts file\"/IP address in the application.",
      "ddmc_optionB": "Implementation: Upgrade phone lines. Note this may be prohibitively expensive",
      "ddmc_optionC": "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
      "ddmc_optionD": "Pick a robust implementation of the data parser.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Pick a robust implementation of the data parser.",
      "prompts": [],
      "instruction": "What is a method to mitigate Serialized Data with Nested Payloads (CAPEC-230)?\nA.  Include \"hosts file\"/IP address in the application.\nB.  Implementation: Upgrade phone lines. Note this may be prohibitively expensive\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Pick a robust implementation of the data parser.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionC": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect CWE-535 (Exposure of Information Through Shell Error Message)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-535 (Exposure of Information Through Shell Error Message)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect CWE-535 (Exposure of Information Through Shell Error Message)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transport Agent (T1505.002)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-1314 (Missing Write Protection for Parametric Data Values)?\nA.  For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.\nB.  Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.\nC.  Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.\nD.  In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1314 (Missing Write Protection for Parametric Data Values)",
      "ddmc_optionA": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
      "ddmc_optionB": "Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.",
      "ddmc_optionC": "Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.",
      "ddmc_optionD": "In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-1314 (Missing Write Protection for Parametric Data Values)?\nA.  For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.\nB.  Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.\nC.  Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.\nD.  In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate XQuery Injection (CAPEC-84)?\nA.  For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nB.  Design: Perform input allowlist validation on all XML input\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  Ensure immutable code or data is programmed into ROM or write-once memory.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "XQuery Injection (CAPEC-84)",
      "ddmc_optionA": "For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).",
      "ddmc_optionB": "Design: Perform input allowlist validation on all XML input",
      "ddmc_optionC": "Digitize documents and cryptographically sign them to verify authenticity.",
      "ddmc_optionD": "Ensure immutable code or data is programmed into ROM or write-once memory.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design: Perform input allowlist validation on all XML input",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate XQuery Injection (CAPEC-84)?\nA.  For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nB.  Design: Perform input allowlist validation on all XML input\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  Ensure immutable code or data is programmed into ROM or write-once memory.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Call to Thread run() instead of start() (CWE-572)?\nA.  During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Call to Thread run() instead of start() (CWE-572)",
      "ddmc_optionA": "During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Call to Thread run() instead of start() (CWE-572)?\nA.  During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1574.009 (Path Interception by Unquoted Path)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.009 (Path Interception by Unquoted Path)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionD": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1574.009 (Path Interception by Unquoted Path)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Return of Stack Variable Address (CWE-562)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Return of Stack Variable Address (CWE-562)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionD": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Return of Stack Variable Address (CWE-562)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Component Firmware (T1542.002)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Restrict the ability to modify certain hives or keys in the Windows Registry.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Component Firmware (T1542.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform regular software updates to mitigate exploitation risk.",
      "prompts": [],
      "instruction": "How can you mitigate Component Firmware (T1542.002)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Restrict the ability to modify certain hives or keys in the Windows Registry.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Duplicate Key in Associative List (Alist) (CWE-462)?\nA.  Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.\nB.  Use a hash table instead of an alist.\nC.  Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).\nD.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Duplicate Key in Associative List (Alist) (CWE-462)",
      "ddmc_optionA": "Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.",
      "ddmc_optionB": "Use a hash table instead of an alist.",
      "ddmc_optionC": "Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).",
      "ddmc_optionD": "By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use a hash table instead of an alist.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Duplicate Key in Associative List (Alist) (CWE-462)?\nA.  Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.\nB.  Use a hash table instead of an alist.\nC.  Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).\nD.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Process eviction techniques terminate or remove running process.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "AppInit DLLs (T1546.010)",
      "ddmc_optionA": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Process eviction techniques terminate or remove running process.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Lateral Tool Transfer (T1570)?\nA.  Issue a new credential to a user which supercedes their old credential.\nB.  Analyzing the resources accessed by a user to identify unauthorized activity.\nC.  Identifying and extracting files from network application protocols through the use of network stream reassembly software.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Lateral Tool Transfer (T1570)",
      "ddmc_optionA": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionB": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "ddmc_optionC": "Identifying and extracting files from network application protocols through the use of network stream reassembly software.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Identifying and extracting files from network application protocols through the use of network stream reassembly software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Lateral Tool Transfer (T1570)?\nA.  Issue a new credential to a user which supercedes their old credential.\nB.  Analyzing the resources accessed by a user to identify unauthorized activity.\nC.  Identifying and extracting files from network application protocols through the use of network stream reassembly software.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restricting network traffic originating from any location.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restricting network traffic originating from any location.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Internet Connection Discovery (T1016.001)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nB.  Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives.  Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended.(Citations: Github PowerSploit Ninjacopy)\nC.  Much of this takes place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Command and Control, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to check Internet connectivity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Internet Connection Discovery (T1016.001)",
      "ddmc_optionA": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionB": "Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives.  Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended.(Citations: Github PowerSploit Ninjacopy)",
      "ddmc_optionC": "Much of this takes place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Command and Control, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to check Internet connectivity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Command and Control, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to check Internet connectivity.",
      "prompts": [],
      "instruction": "What is a method to detect Internet Connection Discovery (T1016.001)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nB.  Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives.  Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended.(Citations: Github PowerSploit Ninjacopy)\nC.  Much of this takes place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Command and Control, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to check Internet connectivity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Return of Stack Variable Address (CWE-562)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Return of Stack Variable Address (CWE-562)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "prompts": [],
      "instruction": "How can you detect Return of Stack Variable Address (CWE-562)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Network Trust Dependencies (T1590.003)",
      "ddmc_optionA": "Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "ddmc_optionB": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_optionD": "Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Choose a language that provides automatic memory management.\nB.  Merge common functionality into a single function and then call that function from across the entire code base.\nC.  Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-656 (Reliance on Security Through Obscurity)",
      "ddmc_optionA": "Choose a language that provides automatic memory management.",
      "ddmc_optionB": "Merge common functionality into a single function and then call that function from across the entire code base.",
      "ddmc_optionC": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Choose a language that provides automatic memory management.\nB.  Merge common functionality into a single function and then call that function from across the entire code base.\nC.  Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Permission Groups Discovery (T1069)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Monitor container logs for commands and/or API calls related to listing permissions for pods and nodes, such as <code>kubectl auth can-i</code>.(Citations: K8s Authorization Overview)\nB.  Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded. Analyzing DLL exports and comparing to runtime arguments may be useful in uncovering obfuscated function calls.\nC.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nD.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Permission Groups Discovery (T1069)",
      "ddmc_optionA": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Monitor container logs for commands and/or API calls related to listing permissions for pods and nodes, such as <code>kubectl auth can-i</code>.(Citations: K8s Authorization Overview)",
      "ddmc_optionB": "Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded. Analyzing DLL exports and comparing to runtime arguments may be useful in uncovering obfuscated function calls.",
      "ddmc_optionC": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)",
      "ddmc_optionD": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Monitor container logs for commands and/or API calls related to listing permissions for pods and nodes, such as <code>kubectl auth can-i</code>.(Citations: K8s Authorization Overview)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Permission Groups Discovery (T1069)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Monitor container logs for commands and/or API calls related to listing permissions for pods and nodes, such as <code>kubectl auth can-i</code>.(Citations: K8s Authorization Overview)\nB.  Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded. Analyzing DLL exports and comparing to runtime arguments may be useful in uncovering obfuscated function calls.\nC.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nD.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Trusted Relationship (T1199)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate Trusted Relationship (T1199)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\nB.  Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.\nC.  Resolve all input to absolute or canonical representations before processing.\nD.  Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Access Control in Fabric Bridge (CWE-1317)",
      "ddmc_optionA": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_optionB": "Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.",
      "ddmc_optionC": "Resolve all input to absolute or canonical representations before processing.",
      "ddmc_optionD": "Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\nB.  Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.\nC.  Resolve all input to absolute or canonical representations before processing.\nD.  Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Reflection Amplification (T1498.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Reflection Amplification (T1498.002)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Reflection Amplification (T1498.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Upload a Web Shell to a Web Server (CAPEC-650)?\nA.  Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.\nB.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nC.  Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.\nD.  Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Upload a Web Shell to a Web Server (CAPEC-650)",
      "ddmc_optionA": "Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.",
      "ddmc_optionB": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
      "ddmc_optionC": "Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.",
      "ddmc_optionD": "Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist.",
      "prompts": [],
      "instruction": "What is a method to mitigate Upload a Web Shell to a Web Server (CAPEC-650)?\nA.  Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.\nB.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nC.  Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.\nD.  Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Identity Spoofing (CAPEC-151)?\nA.  Employ robust authentication processes (e.g., multi-factor authentication).\nB.  Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.\nC.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nD.  The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Identity Spoofing (CAPEC-151)",
      "ddmc_optionA": "Employ robust authentication processes (e.g., multi-factor authentication).",
      "ddmc_optionB": "Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.",
      "ddmc_optionC": "Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.",
      "ddmc_optionD": "The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employ robust authentication processes (e.g., multi-factor authentication).",
      "prompts": [],
      "instruction": "What is a method to mitigate Identity Spoofing (CAPEC-151)?\nA.  Employ robust authentication processes (e.g., multi-factor authentication).\nB.  Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.\nC.  Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nD.  The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unprotected Primary Channel (CWE-419)?\nA.  Do not expose administrative functionnality on the user UI.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unprotected Primary Channel (CWE-419)",
      "ddmc_optionA": "Do not expose administrative functionnality on the user UI.",
      "ddmc_optionB": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
      "ddmc_optionC": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmc_optionD": "Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Do not expose administrative functionnality on the user UI.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unprotected Primary Channel (CWE-419)?\nA.  Do not expose administrative functionnality on the user UI.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Mavinject (T1218.013)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  An authentication token created for the purposes of deceiving an adversary.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mavinject (T1218.013)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionC": "An authentication token created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Mavinject (T1218.013)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  An authentication token created for the purposes of deceiving an adversary.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Terminating a running application process on a computer system.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Terminating a running application process on a computer system.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "How can you mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Terminating a running application process on a computer system.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\nB.  Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].\nC.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nD.  Declare returned data which should not be altered as constant or immutable.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Script in an Error Message Web Page (CWE-81)",
      "ddmc_optionA": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
      "ddmc_optionB": "Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].",
      "ddmc_optionC": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionD": "Declare returned data which should not be altered as constant or immutable.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\nB.  Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].\nC.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nD.  Declare returned data which should not be altered as constant or immutable.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Storing Passwords in a Recoverable Format (CWE-257)?\nA.  Periodically review the privileges and their owners.\nB.  A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g., user id, app name) Depending on the threat model, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 800-63B [REF-1053] for further information on password requirements.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Use strong, non-reversible encryption to protect stored passwords.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Storing Passwords in a Recoverable Format (CWE-257)",
      "ddmc_optionA": "Periodically review the privileges and their owners.",
      "ddmc_optionB": "A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g., user id, app name) Depending on the threat model, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 800-63B [REF-1053] for further information on password requirements.",
      "ddmc_optionC": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.",
      "ddmc_optionD": "Use strong, non-reversible encryption to protect stored passwords.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use strong, non-reversible encryption to protect stored passwords.",
      "prompts": [],
      "instruction": "What is a method to mitigate Storing Passwords in a Recoverable Format (CWE-257)?\nA.  Periodically review the privileges and their owners.\nB.  A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g., user id, app name) Depending on the threat model, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 800-63B [REF-1053] for further information on password requirements.\nC.  Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nD.  Use strong, non-reversible encryption to protect stored passwords.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Perform input validation for all content.\nB.  Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.\nC.  When using Bluetooth, set it to hidden or non-discoverable mode.\nD.  Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-125 (Flooding)",
      "ddmc_optionA": "Perform input validation for all content.",
      "ddmc_optionB": "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.",
      "ddmc_optionC": "When using Bluetooth, set it to hidden or non-discoverable mode.",
      "ddmc_optionD": "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Perform input validation for all content.\nB.  Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.\nC.  When using Bluetooth, set it to hidden or non-discoverable mode.\nD.  Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nB.  Do not expose sensitive error information to the user.\nC.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nD.  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Shell in Externally Accessible Directory (CWE-553)",
      "ddmc_optionA": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices.",
      "ddmc_optionB": "Do not expose sensitive error information to the user.",
      "ddmc_optionC": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionD": "Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not expose sensitive error information to the user.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nB.  Do not expose sensitive error information to the user.\nC.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nD.  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Safe Mode Boot (T1562.009)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Safe Mode Boot (T1562.009)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate Safe Mode Boot (T1562.009)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Session Hijacking (CAPEC-593)?\nA.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nB.  Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.\nC.  Do not reuse local administrator account credentials across systems.\nD.  Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Session Hijacking (CAPEC-593)",
      "ddmc_optionA": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "ddmc_optionB": "Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.",
      "ddmc_optionC": "Do not reuse local administrator account credentials across systems.",
      "ddmc_optionD": "Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.",
      "prompts": [],
      "instruction": "How can you mitigate Session Hijacking (CAPEC-593)?\nA.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nB.  Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.\nC.  Do not reuse local administrator account credentials across systems.\nD.  Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)?\nA.  Protect mutable objects by making them private. Restrict access to the getter and setter as well.\nB.  Verify return values are correct and do not supply sensitive information about the system.\nC.  Avoid using vulnerable temp file functions.\nD.  If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)",
      "ddmc_optionA": "Protect mutable objects by making them private. Restrict access to the getter and setter as well.",
      "ddmc_optionB": "Verify return values are correct and do not supply sensitive information about the system.",
      "ddmc_optionC": "Avoid using vulnerable temp file functions.",
      "ddmc_optionD": "If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Verify return values are correct and do not supply sensitive information about the system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)?\nA.  Protect mutable objects by making them private. Restrict access to the getter and setter as well.\nB.  Verify return values are correct and do not supply sensitive information about the system.\nC.  Avoid using vulnerable temp file functions.\nD.  If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Never trust or rely any of the information in an Event for security.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)",
      "ddmc_optionA": "Never trust or rely any of the information in an Event for security.",
      "ddmc_optionB": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionC": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionD": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Never trust or rely any of the information in an Event for security.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect HTTP Request Splitting (CAPEC-105)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Too many false or invalid queries to the database, especially those caused by malformed input.\nC.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\nD.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "HTTP Request Splitting (CAPEC-105)",
      "ddmc_optionA": "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
      "ddmc_optionB": "Too many false or invalid queries to the database, especially those caused by malformed input.",
      "ddmc_optionC": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "ddmc_optionD": "Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "prompts": [],
      "instruction": "How can you detect HTTP Request Splitting (CAPEC-105)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Too many false or invalid queries to the database, especially those caused by malformed input.\nC.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\nD.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Services File Permissions Weakness (T1574.010)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Services File Permissions Weakness (T1574.010)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Query System for Information (CAPEC-54)?\nA.  Implementation: Disable scripting languages such as JavaScript in browser\nB.  Monitor system and domain logs for abnormal access.\nC.  Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.\nD.  Use a language or compiler that performs automatic bounds checking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Query System for Information (CAPEC-54)",
      "ddmc_optionA": "Implementation: Disable scripting languages such as JavaScript in browser",
      "ddmc_optionB": "Monitor system and domain logs for abnormal access.",
      "ddmc_optionC": "Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.",
      "ddmc_optionD": "Use a language or compiler that performs automatic bounds checking.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.",
      "prompts": [],
      "instruction": "How can you mitigate Query System for Information (CAPEC-54)?\nA.  Implementation: Disable scripting languages such as JavaScript in browser\nB.  Monitor system and domain logs for abnormal access.\nC.  Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.\nD.  Use a language or compiler that performs automatic bounds checking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].\nB.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  An application must, at all times, keep track of network resources and meter their usage appropriately.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Script in an Error Message Web Page (CWE-81)",
      "ddmc_optionA": "Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].",
      "ddmc_optionB": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
      "ddmc_optionC": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionD": "An application must, at all times, keep track of network resources and meter their usage appropriately.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].\nB.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  An application must, at all times, keep track of network resources and meter their usage appropriately.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.\nB.  Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.\nC.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nD.  Limit the amount of resources that are accessible to unprivileged users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Alternative Execution Due to Deceptive Filenames (CAPEC-635)",
      "ddmc_optionA": "Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.",
      "ddmc_optionB": "Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.",
      "ddmc_optionC": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionD": "Limit the amount of resources that are accessible to unprivileged users.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.\nB.  Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.\nC.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nD.  Limit the amount of resources that are accessible to unprivileged users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Restoring the data in a database.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Using a digital signature to authenticate a file before opening.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Restoring the data in a database.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Using a digital signature to authenticate a file before opening.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1547.008 (LSASS Driver)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  The process of temporarily disabling user accounts on a system or domain.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.008 (LSASS Driver)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1547.008 (LSASS Driver)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  The process of temporarily disabling user accounts on a system or domain.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Space after Filename (T1036.006)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Internal Proxy (T1090.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A one-time password is valid for only one user authentication.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Internal Proxy (T1090.001)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "A one-time password is valid for only one user authentication.",
      "ddmc_optionD": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Internal Proxy (T1090.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A one-time password is valid for only one user authentication.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1205 (Traffic Signaling)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Modifying an application's configuration to reduce its attack surface.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1205 (Traffic Signaling)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Modifying an application's configuration to reduce its attack surface.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate T1205 (Traffic Signaling)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Modifying an application's configuration to reduce its attack surface.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Stored Data Manipulation (T1565.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Stored Data Manipulation (T1565.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)",
      "ddmc_optionA": "Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Blocking a lookup based on the query's domain name value.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Blocking a lookup based on the query's domain name value.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Using kernel-level capabilities to isolate processes.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Blocking a lookup based on the query's domain name value.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Key Exchange without Entity Authentication (CWE-322)?\nA.  Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.\nB.  Ensure that proper authentication is included in the system design.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Key Exchange without Entity Authentication (CWE-322)",
      "ddmc_optionA": "Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.",
      "ddmc_optionB": "Ensure that proper authentication is included in the system design.",
      "ddmc_optionC": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.",
      "ddmc_optionD": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure that proper authentication is included in the system design.",
      "prompts": [],
      "instruction": "What is a method to mitigate Key Exchange without Entity Authentication (CWE-322)?\nA.  Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.\nB.  Ensure that proper authentication is included in the system design.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Absolute Path Traversal (CWE-36)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Absolute Path Traversal (CWE-36)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Absolute Path Traversal (CWE-36)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries. Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis\nB.  Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis",
      "ddmc_optionB": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
      "prompts": [],
      "instruction": "What is a method to detect CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Origin Analysis\nB.  Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Restriction of XML External Entity Reference (CWE-611)?\nA.  Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.\nB.  Always test your code on any platform on which it is targeted to run on.\nC.  Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.\nD.  Many XML parsers and validators can be configured to disable external entity expansion.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of XML External Entity Reference (CWE-611)",
      "ddmc_optionA": "Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.",
      "ddmc_optionB": "Always test your code on any platform on which it is targeted to run on.",
      "ddmc_optionC": "Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.",
      "ddmc_optionD": "Many XML parsers and validators can be configured to disable external entity expansion.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Many XML parsers and validators can be configured to disable external entity expansion.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Restriction of XML External Entity Reference (CWE-611)?\nA.  Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.\nB.  Always test your code on any platform on which it is targeted to run on.\nC.  Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.\nD.  Many XML parsers and validators can be configured to disable external entity expansion.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.",
      "prompts": [],
      "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hardware Additions (T1200)",
      "ddmc_optionA": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionB": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "prompts": [],
      "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect BlueSmacking (CAPEC-666)?\nA.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nB.  Too many exceptions generated by the application as a result of malformed queries\nC.  Software being run on a system matches a file signature found in a malware database\nD.  Performance is degraded or halted by incoming L2CAP packets.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "BlueSmacking (CAPEC-666)",
      "ddmc_optionA": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "ddmc_optionB": "Too many exceptions generated by the application as a result of malformed queries",
      "ddmc_optionC": "Software being run on a system matches a file signature found in a malware database",
      "ddmc_optionD": "Performance is degraded or halted by incoming L2CAP packets.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Performance is degraded or halted by incoming L2CAP packets.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect BlueSmacking (CAPEC-666)?\nA.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nB.  Too many exceptions generated by the application as a result of malformed queries\nC.  Software being run on a system matches a file signature found in a malware database\nD.  Performance is degraded or halted by incoming L2CAP packets.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-1070 (Serializable Data Element Containing non-Serializable Item Elements)?\nA.  Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.\nB.  Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nC.  Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.\nD.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1070 (Serializable Data Element Containing non-Serializable Item Elements)",
      "ddmc_optionA": "Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.",
      "ddmc_optionB": "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "ddmc_optionC": "Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.",
      "ddmc_optionD": "Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-1070 (Serializable Data Element Containing non-Serializable Item Elements)?\nA.  Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.\nB.  Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nC.  Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.\nD.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration over USB (T1052.001)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Encrypting a file using a cryptographic key.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration over USB (T1052.001)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration over USB (T1052.001)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Encrypting a file using a cryptographic key.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Clipboard Data (T1115)?\nA.  Access to the clipboard is a legitimate function of many applications on an operating system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.\nB.  Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nC.  Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.  Enable CryptoAPI v2 (CAPI) event logging  to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033).  Utilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing)  setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers:  * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust **Note:** As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using Regsvr32.  Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \u201cHide Microsoft Entries\u201d and \u201cHide Windows Entries\u201d are both deselected. (Citations: SpectorOps Subverting Trust Sept 2017, Entrust Enable CAPI2 Aug 2017, SpectorOps Subverting Trust Sept 2017, Microsoft Registry Auditing Aug 2016, Microsoft Audit Registry July 2012, SpectorOps Subverting Trust Sept 2017, SpectorOps Subverting Trust Sept 2017)\nD.  Container administration service activities and executed commands can be captured through logging of process execution with command-line arguments on the container and the underlying host. In Docker, the daemon log provides insight into events at the daemon and container service level. Kubernetes system component logs may also detect activities running in and out of containers in the cluster.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Clipboard Data (T1115)",
      "ddmc_optionA": "Access to the clipboard is a legitimate function of many applications on an operating system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.",
      "ddmc_optionB": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_optionC": "Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.  Enable CryptoAPI v2 (CAPI) event logging  to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033).  Utilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing)  setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers:  * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust **Note:** As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using Regsvr32.  Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \u201cHide Microsoft Entries\u201d and \u201cHide Windows Entries\u201d are both deselected. (Citations: SpectorOps Subverting Trust Sept 2017, Entrust Enable CAPI2 Aug 2017, SpectorOps Subverting Trust Sept 2017, Microsoft Registry Auditing Aug 2016, Microsoft Audit Registry July 2012, SpectorOps Subverting Trust Sept 2017, SpectorOps Subverting Trust Sept 2017)",
      "ddmc_optionD": "Container administration service activities and executed commands can be captured through logging of process execution with command-line arguments on the container and the underlying host. In Docker, the daemon log provides insight into events at the daemon and container service level. Kubernetes system component logs may also detect activities running in and out of containers in the cluster.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Access to the clipboard is a legitimate function of many applications on an operating system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.",
      "prompts": [],
      "instruction": "What is a method to detect Clipboard Data (T1115)?\nA.  Access to the clipboard is a legitimate function of many applications on an operating system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.\nB.  Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nC.  Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.  Enable CryptoAPI v2 (CAPI) event logging  to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033).  Utilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing)  setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers:  * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust **Note:** As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using Regsvr32.  Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \u201cHide Microsoft Entries\u201d and \u201cHide Windows Entries\u201d are both deselected. (Citations: SpectorOps Subverting Trust Sept 2017, Entrust Enable CAPI2 Aug 2017, SpectorOps Subverting Trust Sept 2017, Microsoft Registry Auditing Aug 2016, Microsoft Audit Registry July 2012, SpectorOps Subverting Trust Sept 2017, SpectorOps Subverting Trust Sept 2017)\nD.  Container administration service activities and executed commands can be captured through logging of process execution with command-line arguments on the container and the underlying host. In Docker, the daemon log provides insight into events at the daemon and container service level. Kubernetes system component logs may also detect activities running in and out of containers in the cluster.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Password in Configuration File (CWE-260)?\nA.  Avoid storing passwords in easily accessible locations.\nB.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nC.  Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Password in Configuration File (CWE-260)",
      "ddmc_optionA": "Avoid storing passwords in easily accessible locations.",
      "ddmc_optionB": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_optionC": "Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Avoid storing passwords in easily accessible locations.",
      "prompts": [],
      "instruction": "What is a method to mitigate Password in Configuration File (CWE-260)?\nA.  Avoid storing passwords in easily accessible locations.\nB.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nC.  Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Replace Binaries (CAPEC-642)?\nA.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\nB.  Design: Minimize switch and option functionality to only that necessary for correct function of the command.\nC.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nD.  Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replace Binaries (CAPEC-642)",
      "ddmc_optionA": "Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests",
      "ddmc_optionB": "Design: Minimize switch and option functionality to only that necessary for correct function of the command.",
      "ddmc_optionC": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "ddmc_optionD": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
      "prompts": [],
      "instruction": "What is a method to mitigate Replace Binaries (CAPEC-642)?\nA.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\nB.  Design: Minimize switch and option functionality to only that necessary for correct function of the command.\nC.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nD.  Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Relative Path Traversal (CWE-23)?\nA.  Use a hash table instead of an alist.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Relative Path Traversal (CWE-23)",
      "ddmc_optionA": "Use a hash table instead of an alist.",
      "ddmc_optionB": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
      "ddmc_optionC": "Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "prompts": [],
      "instruction": "How can you mitigate Relative Path Traversal (CWE-23)?\nA.  Use a hash table instead of an alist.\nB.  The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.\nC.  Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exposure of Sensitive System Information Due to Uncleared Debug Information (CWE-1258)?\nA.  Whenever debug mode is enabled, all registers containing sensitive assets must be cleared.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exposure of Sensitive System Information Due to Uncleared Debug Information (CWE-1258)",
      "ddmc_optionA": "Whenever debug mode is enabled, all registers containing sensitive assets must be cleared.",
      "ddmc_optionB": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Whenever debug mode is enabled, all registers containing sensitive assets must be cleared.",
      "prompts": [],
      "instruction": "How can you mitigate Exposure of Sensitive System Information Due to Uncleared Debug Information (CWE-1258)?\nA.  Whenever debug mode is enabled, all registers containing sensitive assets must be cleared.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Restoring software to a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Restoring software to a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1021.004 (SSH)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Restoring software to a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmc_optionA": "By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.",
      "ddmc_optionD": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  By blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect clone() Method Without super.clone() (CWE-580)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "clone() Method Without super.clone() (CWE-580)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect clone() Method Without super.clone() (CWE-580)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-274 (HTTP Verb Tampering)?\nA.  Design: Ensure that only legitimate HTTP verbs are allowed.\nB.  Password protect documents and make them read-only for unauthorized users.\nC.  Design: Perform validation on email header data\nD.  Design: Perform allowlist validation against a positive specification for command length, type, and parameters.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-274 (HTTP Verb Tampering)",
      "ddmc_optionA": "Design: Ensure that only legitimate HTTP verbs are allowed.",
      "ddmc_optionB": "Password protect documents and make them read-only for unauthorized users.",
      "ddmc_optionC": "Design: Perform validation on email header data",
      "ddmc_optionD": "Design: Perform allowlist validation against a positive specification for command length, type, and parameters.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Design: Ensure that only legitimate HTTP verbs are allowed.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-274 (HTTP Verb Tampering)?\nA.  Design: Ensure that only legitimate HTTP verbs are allowed.\nB.  Password protect documents and make them read-only for unauthorized users.\nC.  Design: Perform validation on email header data\nD.  Design: Perform allowlist validation against a positive specification for command length, type, and parameters.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Uninitialized Variable (CWE-457)?\nA.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nB.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\nC.  Refactor your program so that you do not have to dynamically generate code.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Uninitialized Variable (CWE-457)",
      "ddmc_optionA": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
      "ddmc_optionB": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.",
      "ddmc_optionC": "Refactor your program so that you do not have to dynamically generate code.",
      "ddmc_optionD": "The choice could be made to use a language that is not susceptible to these issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "The choice could be made to use a language that is not susceptible to these issues.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Uninitialized Variable (CWE-457)?\nA.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nB.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\nC.  Refactor your program so that you do not have to dynamically generate code.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Unprotected Transport of Credentials (CWE-523)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Unprotected Transport of Credentials (CWE-523)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Unprotected Transport of Credentials (CWE-523)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Restricting network traffic originating from any location.\nD.  Restoring the data in a database.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Restoring the data in a database.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring the data in a database.",
      "prompts": [],
      "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Restricting network traffic originating from any location.\nD.  Restoring the data in a database.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Serializable Class Containing Sensitive Data (CWE-499)?\nA.  Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.\nC.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nD.  When sensitive information is sent, use the POST method (e.g. registration form).\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serializable Class Containing Sensitive Data (CWE-499)",
      "ddmc_optionA": "Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.",
      "ddmc_optionC": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
      "ddmc_optionD": "When sensitive information is sent, use the POST method (e.g. registration form).",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
      "prompts": [],
      "instruction": "How can you mitigate Serializable Class Containing Sensitive Data (CWE-499)?\nA.  Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.\nC.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nD.  When sensitive information is sent, use the POST method (e.g. registration form).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dylib Hijacking (T1574.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Set and enforce secure password policies for accounts.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dylib Hijacking (T1574.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Set and enforce secure password policies for accounts.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1498.002 (Reflection Amplification)",
      "ddmc_optionA": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Attempt to Access Child of a Non-structure Pointer (CWE-588)?\nA.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nB.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\nC.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\nD.  Review of type casting operations can identify locations where incompatible types are cast.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Attempt to Access Child of a Non-structure Pointer (CWE-588)",
      "ddmc_optionA": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_optionB": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.",
      "ddmc_optionC": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]",
      "ddmc_optionD": "Review of type casting operations can identify locations where incompatible types are cast.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Review of type casting operations can identify locations where incompatible types are cast.",
      "prompts": [],
      "instruction": "What is a method to mitigate Attempt to Access Child of a Non-structure Pointer (CWE-588)?\nA.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nB.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\nC.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size. Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\nD.  Review of type casting operations can identify locations where incompatible types are cast.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Encrypting a file using a cryptographic key.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Encrypting a file using a cryptographic key.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Analyzing a call stack for return addresses which point to unexpected memory locations.\nD.  Active physical link mapping sends and receives network traffic as a means to map the physical layer.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Analyzing a call stack for return addresses which point to unexpected memory locations.",
      "ddmc_optionD": "Active physical link mapping sends and receives network traffic as a means to map the physical layer.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Analyzing a call stack for return addresses which point to unexpected memory locations.\nD.  Active physical link mapping sends and receives network traffic as a means to map the physical layer.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Lack of Administrator Control over Security (CWE-671)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Lack of Administrator Control over Security (CWE-671)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "ddmc_optionB": "Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Lack of Administrator Control over Security (CWE-671)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1528 (Steal Application Access Token)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Analysis of any system process startup configuration.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1528 (Steal Application Access Token)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Analysis of any system process startup configuration.",
      "ddmc_optionC": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1528 (Steal Application Access Token)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Analysis of any system process startup configuration.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.",
      "ddmc_optionD": "Use a static analysis tool to find double free instances.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Preventing execution of any address in a memory region other than the code segment.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1176 (Browser Extensions)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Preventing execution of any address in a memory region other than the code segment.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Security Version Number Mutable to Older Versions (CWE-1328)",
      "ddmc_optionA": "Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.",
      "prompts": [],
      "instruction": "What is a method to detect Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credentials in Registry (T1552.002)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Preventing execution of any address in a memory region other than the code segment.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credentials in Registry (T1552.002)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "How can you mitigate Credentials in Registry (T1552.002)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Preventing execution of any address in a memory region other than the code segment.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Not Using Complete Mediation (CWE-638)?\nA.  If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))\nB.  Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  With Struts, write all data from form beans with the bean's filter attribute set to true.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Not Using Complete Mediation (CWE-638)",
      "ddmc_optionA": "If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))",
      "ddmc_optionB": "Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Not Using Complete Mediation (CWE-638)?\nA.  If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))\nB.  Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  With Struts, write all data from form beans with the bean's filter attribute set to true.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1134.003 (Make and Impersonate Token)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1134.003 (Make and Impersonate Token)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1134.003 (Make and Impersonate Token)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Incorrect Check of Function Return Value (CWE-253)?\nA.  Ensure that certificates are checked for revoked status.\nB.  Properly check all functions which return a value.\nC.  Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Incorrect Check of Function Return Value (CWE-253)",
      "ddmc_optionA": "Ensure that certificates are checked for revoked status.",
      "ddmc_optionB": "Properly check all functions which return a value.",
      "ddmc_optionC": "Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Properly check all functions which return a value.",
      "prompts": [],
      "instruction": "How can you mitigate Incorrect Check of Function Return Value (CWE-253)?\nA.  Ensure that certificates are checked for revoked status.\nB.  Properly check all functions which return a value.\nC.  Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting system configuration modifications to a specific user or group of users.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transmitted Data Manipulation (T1565.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transmitted Data Manipulation (T1565.002)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1095 (Non-Application Layer Protocol)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1095 (Non-Application Layer Protocol)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "prompts": [],
      "instruction": "How can you mitigate T1095 (Non-Application Layer Protocol)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1573.001 (Symmetric Cryptography)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Restricting network traffic originating from any location.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1573.001 (Symmetric Cryptography)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1573.001 (Symmetric Cryptography)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Restricting network traffic originating from any location.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate COR_PROFILER (T1574.012)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate COR_PROFILER (T1574.012)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-509 (Replicating Malicious Code (Virus or Worm))?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-509 (Replicating Malicious Code (Virus or Worm))",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-509 (Replicating Malicious Code (Virus or Worm))?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Appropriate Post-Si tests should be carried out to ensure that residual confidential information is not left on parts leaving one facility for another facility.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Analyzing database queries to detect SQL Injection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Analyzing database queries to detect SQL Injection.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Analyzing database queries to detect SQL Injection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Terminating a running application process on a computer system.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Scheduled Task (T1053.005)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Terminating a running application process on a computer system.",
      "ddmc_optionD": "Using a digital signature to authenticate a file before opening.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Terminating a running application process on a computer system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Terminating a running application process on a computer system.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect HTTP Response Splitting (CAPEC-34)?\nA.  Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.\nB.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nC.  You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "HTTP Response Splitting (CAPEC-34)",
      "ddmc_optionA": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.",
      "ddmc_optionB": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionC": "You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.",
      "ddmc_optionD": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.",
      "prompts": [],
      "instruction": "How can you detect HTTP Response Splitting (CAPEC-34)?\nA.  Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.\nB.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nC.  You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Email Accounts (T1585.002)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\nB.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Email Accounts (T1585.002)",
      "ddmc_optionA": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.",
      "ddmc_optionB": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)",
      "ddmc_optionC": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "prompts": [],
      "instruction": "What is a method to detect Email Accounts (T1585.002)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\nB.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Ptrace System Calls (T1055.008)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Ptrace System Calls (T1055.008)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "How can you mitigate Ptrace System Calls (T1055.008)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detects processes that modify, change, or replace their own code at runtime.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Agent (T1543.001)",
      "ddmc_optionA": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detects processes that modify, change, or replace their own code at runtime.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use of NullPointerException Catch to Detect NULL Pointer Dereference (CWE-395)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes. When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference (CWE-395)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes. When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use of NullPointerException Catch to Detect NULL Pointer Dereference (CWE-395)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes. When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of RSA Algorithm without OAEP (CWE-780)?\nA.  Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of RSA Algorithm without OAEP (CWE-780)",
      "ddmc_optionA": "Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionC": "Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Use of RSA Algorithm without OAEP (CWE-780)?\nA.  Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nC.  Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Network Connections Discovery (T1049)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Network Connections Discovery (T1049)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "How can you mitigate System Network Connections Discovery (T1049)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\nB.  Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Input Terminators (CWE-147)",
      "ddmc_optionA": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
      "ddmc_optionB": "Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\nB.  Apply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Restoring a user account's access to resources by unlocking a locked User Account.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Employing file hash comparisons to detect known malware.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Employing file hash comparisons to detect known malware.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-609 (Double-Checked Locking)?\nA.  Check return values to ensure locking operations are successful.\nB.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nC.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nD.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-609 (Double-Checked Locking)",
      "ddmc_optionA": "Check return values to ensure locking operations are successful.",
      "ddmc_optionB": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionC": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
      "ddmc_optionD": "In flat address space situations, never allow computing memory addresses as offsets from another memory address.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Check return values to ensure locking operations are successful.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-609 (Double-Checked Locking)?\nA.  Check return values to ensure locking operations are successful.\nB.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nC.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nD.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Terminating a running application process on a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionC": "Terminating a running application process on a computer system.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Terminating a running application process on a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nB.  Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\nC.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "ddmc_optionA": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)",
      "ddmc_optionB": "Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.",
      "ddmc_optionC": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "ddmc_optionD": "Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nB.  Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\nC.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Portable Executable Injection (T1055.002)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.\nC.  Analyzing email or instant message content to detect unauthorized activity.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.",
      "ddmc_optionC": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Portable Executable Injection (T1055.002)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.\nC.  Analyzing email or instant message content to detect unauthorized activity.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Employing file hash comparisons to detect known malware.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Employing file hash comparisons to detect known malware.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Reliance on Cookies without Validation and Integrity Checking (CWE-565)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Reliance on Cookies without Validation and Integrity Checking (CWE-565)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Reliance on Cookies without Validation and Integrity Checking (CWE-565)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1568 (Dynamic Resolution)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate WHOIS (T1596.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent modification of environment variables by unauthorized users and groups.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "WHOIS (T1596.002)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Prevent modification of environment variables by unauthorized users and groups.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate WHOIS (T1596.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent modification of environment variables by unauthorized users and groups.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1074.001 (Local Data Staging)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)",
      "ddmc_optionA": "Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.",
      "ddmc_optionB": "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).",
      "ddmc_optionC": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "ddmc_optionD": "Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.\nB.  Avoid race conditions (CWE-362) during initialization routines.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Integer Overflow or Wraparound (CWE-190)",
      "ddmc_optionA": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.",
      "ddmc_optionB": "Avoid race conditions (CWE-362) during initialization routines.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
      "prompts": [],
      "instruction": "How can you mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.\nB.  Avoid race conditions (CWE-362) during initialization routines.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1564 (Hide Artifacts)?\nA.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1564 (Hide Artifacts)",
      "ddmc_optionA": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "prompts": [],
      "instruction": "How can you mitigate T1564 (Hide Artifacts)?\nA.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  A file created for the purposes of deceiving an adversary.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  A file created for the purposes of deceiving an adversary.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-481 (Assigning instead of Comparing)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-481 (Assigning instead of Comparing)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "ddmc_optionB": "This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-481 (Assigning instead of Comparing)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)?\nA.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nB.  A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.\nC.  Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.\nD.  Include secure wear leveling algorithms and ensure they may not be bypassed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)",
      "ddmc_optionA": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)",
      "ddmc_optionB": "A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.",
      "ddmc_optionC": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.",
      "ddmc_optionD": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)?\nA.  Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nB.  A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.\nC.  Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.\nD.  Include secure wear leveling algorithms and ensure they may not be bypassed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.\nC.  For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.\nD.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)",
      "ddmc_optionA": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionB": "When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.",
      "ddmc_optionC": "For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.",
      "ddmc_optionD": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.\nC.  For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.\nD.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nB.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nC.  Use an abstraction library to abstract away risky APIs. Not a complete solution.\nD.  Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Script in an Error Message Web Page (CWE-81)",
      "ddmc_optionA": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_optionB": "Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.",
      "ddmc_optionC": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
      "ddmc_optionD": "Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nB.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nC.  Use an abstraction library to abstract away risky APIs. Not a complete solution.\nD.  Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Debug Messages Revealing Unnecessary Information (CWE-1295)?\nA.  If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.\nB.  Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.\nD.  Alter the method of erasure, add protection of media, or destroy the media to protect the data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Debug Messages Revealing Unnecessary Information (CWE-1295)",
      "ddmc_optionA": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.",
      "ddmc_optionB": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.",
      "ddmc_optionC": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.",
      "ddmc_optionD": "Alter the method of erasure, add protection of media, or destroy the media to protect the data.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Debug Messages Revealing Unnecessary Information (CWE-1295)?\nA.  If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.\nB.  Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.\nC.  When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.\nD.  Alter the method of erasure, add protection of media, or destroy the media to protect the data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Password Filter DLL (T1556.002)?\nA.  Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.(Citations: Clymb3r Function Hook Passwords Sept 2013)\nB.  Monitor for suspicious or unknown container images and pods in your environment. Deploy logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application pods to detect malicious activity at the cluster level. In Docker, the daemon log provides insight into remote API calls, including those that deploy containers. Logs for management services or applications used to deploy containers other than the native technologies themselves should also be monitored.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Password Filter DLL (T1556.002)",
      "ddmc_optionA": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.(Citations: Clymb3r Function Hook Passwords Sept 2013)",
      "ddmc_optionB": "Monitor for suspicious or unknown container images and pods in your environment. Deploy logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application pods to detect malicious activity at the cluster level. In Docker, the daemon log provides insight into remote API calls, including those that deploy containers. Logs for management services or applications used to deploy containers other than the native technologies themselves should also be monitored.",
      "ddmc_optionC": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.(Citations: Clymb3r Function Hook Passwords Sept 2013)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Password Filter DLL (T1556.002)?\nA.  Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.(Citations: Clymb3r Function Hook Passwords Sept 2013)\nB.  Monitor for suspicious or unknown container images and pods in your environment. Deploy logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application pods to detect malicious activity at the cluster level. In Docker, the daemon log provides insight into remote API calls, including those that deploy containers. Logs for management services or applications used to deploy containers other than the native technologies themselves should also be monitored.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Authorization of Index Containing Sensitive Information (CWE-612)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Authorization of Index Containing Sensitive Information (CWE-612)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Authorization of Index Containing Sensitive Information (CWE-612)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Terminating a running application process on a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Terminating a running application process on a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Terminating a running application process on a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Archive via Utility (T1560.001)?\nA.  Replacing old software on a computer system component.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Replacing old software on a computer system component.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Archive via Utility (T1560.001)?\nA.  Replacing old software on a computer system component.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Serialized Data External Linking (CAPEC-201)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Configure the serialized data processor to only retrieve external entities from trusted sources.\nC.  Implementation: The victim should configure the browser to minimize active content from untrusted sources.\nD.  Enable at least AES Kerberos encryption for tickets.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serialized Data External Linking (CAPEC-201)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Configure the serialized data processor to only retrieve external entities from trusted sources.",
      "ddmc_optionC": "Implementation: The victim should configure the browser to minimize active content from untrusted sources.",
      "ddmc_optionD": "Enable at least AES Kerberos encryption for tickets.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configure the serialized data processor to only retrieve external entities from trusted sources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Serialized Data External Linking (CAPEC-201)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Configure the serialized data processor to only retrieve external entities from trusted sources.\nC.  Implementation: The victim should configure the browser to minimize active content from untrusted sources.\nD.  Enable at least AES Kerberos encryption for tickets.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Default Credentials (CWE-1392)?\nA.  Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.\nB.  Consider using encryption in the cache.\nC.  If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.\nD.  When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.",
      "ddmc_optionB": "Consider using encryption in the cache.",
      "ddmc_optionC": "If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.",
      "ddmc_optionD": "When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Default Credentials (CWE-1392)?\nA.  Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.\nB.  Consider using encryption in the cache.\nC.  If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.\nD.  When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Outlook Home Page (T1137.004)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Outlook Home Page (T1137.004)",
      "ddmc_optionA": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Perform regular software updates to mitigate exploitation risk.",
      "prompts": [],
      "instruction": "How can you mitigate Outlook Home Page (T1137.004)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.\nB.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-412 (Unrestricted Externally Accessible Lock)",
      "ddmc_optionA": "Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.",
      "ddmc_optionB": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-412 (Unrestricted Externally Accessible Lock)?\nA.  Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.\nB.  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate DNS (T1590.002)?\nA.  Protect sensitive information with strong encryption.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "DNS (T1590.002)",
      "ddmc_optionA": "Protect sensitive information with strong encryption.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate DNS (T1590.002)?\nA.  Protect sensitive information with strong encryption.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Insertion of Sensitive Information into Externally-Accessible File or Directory (CWE-538)?\nA.  Do not expose file and directory information to the user.\nB.  If an operation can throw an Exception, implement a handler for that specific exception.\nC.  If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Insertion of Sensitive Information into Externally-Accessible File or Directory (CWE-538)",
      "ddmc_optionA": "Do not expose file and directory information to the user.",
      "ddmc_optionB": "If an operation can throw an Exception, implement a handler for that specific exception.",
      "ddmc_optionC": "If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Do not expose file and directory information to the user.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Insertion of Sensitive Information into Externally-Accessible File or Directory (CWE-538)?\nA.  Do not expose file and directory information to the user.\nB.  If an operation can throw an Exception, implement a handler for that specific exception.\nC.  If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1123 (Audio Capture)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1123 (Audio Capture)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "How can you mitigate T1123 (Audio Capture)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Suspicious Comment (CWE-546)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Protect the core dump files from unauthorized access.\nC.  Software tools are capable of finding ADSs on your system.\nD.  Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Suspicious Comment (CWE-546)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Protect the core dump files from unauthorized access.",
      "ddmc_optionC": "Software tools are capable of finding ADSs on your system.",
      "ddmc_optionD": "Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Protect the core dump files from unauthorized access.",
      "prompts": [],
      "instruction": "How can you mitigate Suspicious Comment (CWE-546)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Protect the core dump files from unauthorized access.\nC.  Software tools are capable of finding ADSs on your system.\nD.  Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1547.008 (LSASS Driver)?\nA.  Restoring software to a host.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.008 (LSASS Driver)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionC": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring software to a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1547.008 (LSASS Driver)?\nA.  Restoring software to a host.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Cloud Service Dashboard (T1538)?\nA.  Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques. Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.\nB.  Consider monitoring for anomalous resolution changes for domain addresses. Efforts may need to be tailored to specific domains of interest as benign resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\nC.  Monitor interactions with images and containers by users to identify ones that are added or modified anomalously. In containerized environments, changes may be detectable by monitoring the Docker daemon logs or setting up and monitoring Kubernetes audit logs depending on registry configuration.\nD.  Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citations: AWS Console Sign-in Events)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cloud Service Dashboard (T1538)",
      "ddmc_optionA": "Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques. Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.",
      "ddmc_optionB": "Consider monitoring for anomalous resolution changes for domain addresses. Efforts may need to be tailored to specific domains of interest as benign resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.",
      "ddmc_optionC": "Monitor interactions with images and containers by users to identify ones that are added or modified anomalously. In containerized environments, changes may be detectable by monitoring the Docker daemon logs or setting up and monitoring Kubernetes audit logs depending on registry configuration.",
      "ddmc_optionD": "Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citations: AWS Console Sign-in Events)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citations: AWS Console Sign-in Events)",
      "prompts": [],
      "instruction": "What is a method to detect Cloud Service Dashboard (T1538)?\nA.  Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques. Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.\nB.  Consider monitoring for anomalous resolution changes for domain addresses. Efforts may need to be tailored to specific domains of interest as benign resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\nC.  Monitor interactions with images and containers by users to identify ones that are added or modified anomalously. In containerized environments, changes may be detectable by monitoring the Docker daemon logs or setting up and monitoring Kubernetes audit logs depending on registry configuration.\nD.  Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citations: AWS Console Sign-in Events)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-467 (Cross Site Identification)?\nA.  Design: Enforce principle of least privilege\nB.  Encrypt and password-protect sensitive data.\nC.  Usage: Users should always explicitly log out from the social networking sites when done using them.\nD.  Only accept software updates from an official source.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-467 (Cross Site Identification)",
      "ddmc_optionA": "Design: Enforce principle of least privilege",
      "ddmc_optionB": "Encrypt and password-protect sensitive data.",
      "ddmc_optionC": "Usage: Users should always explicitly log out from the social networking sites when done using them.",
      "ddmc_optionD": "Only accept software updates from an official source.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Usage: Users should always explicitly log out from the social networking sites when done using them.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-467 (Cross Site Identification)?\nA.  Design: Enforce principle of least privilege\nB.  Encrypt and password-protect sensitive data.\nC.  Usage: Users should always explicitly log out from the social networking sites when done using them.\nD.  Only accept software updates from an official source.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Network Boundary Bridging (T1599)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Boundary Bridging (T1599)",
      "ddmc_optionA": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "What is a method to mitigate Network Boundary Bridging (T1599)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cause Web Server Misclassification (CAPEC-11)?\nA.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nB.  Sign everything, including configuration files, XML files and packages.\nC.  Design: Use load balancing mechanisms\nD.  Implementation: Server routines should be determined by content not determined by filename or file extension.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cause Web Server Misclassification (CAPEC-11)",
      "ddmc_optionA": "Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.",
      "ddmc_optionB": "Sign everything, including configuration files, XML files and packages.",
      "ddmc_optionC": "Design: Use load balancing mechanisms",
      "ddmc_optionD": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cause Web Server Misclassification (CAPEC-11)?\nA.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nB.  Sign everything, including configuration files, XML files and packages.\nC.  Design: Use load balancing mechanisms\nD.  Implementation: Server routines should be determined by content not determined by filename or file extension.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate SQL Injection (CAPEC-66)?\nA.  Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.\nB.  Use strong access control such as two factor access control for administrative access to the switch\nC.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nD.  Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "SQL Injection (CAPEC-66)",
      "ddmc_optionA": "Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.",
      "ddmc_optionB": "Use strong access control such as two factor access control for administrative access to the switch",
      "ddmc_optionC": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
      "ddmc_optionD": "Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
      "prompts": [],
      "instruction": "How can you mitigate SQL Injection (CAPEC-66)?\nA.  Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.\nB.  Use strong access control such as two factor access control for administrative access to the switch\nC.  Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nD.  Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1578.002 (Create Cloud Instance)?\nA.  The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)\nB.  Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>. These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citations: Apple Developer Doco Archive Run-Path, Wardle Dylib Hijack Vulnerable Apps, Github EmpireProject HijackScanner)\nC.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\nD.  Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1578.002 (Create Cloud Instance)",
      "ddmc_optionA": "The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)",
      "ddmc_optionB": "Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>. These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citations: Apple Developer Doco Archive Run-Path, Wardle Dylib Hijack Vulnerable Apps, Github EmpireProject HijackScanner)",
      "ddmc_optionC": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "ddmc_optionD": "Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)",
      "prompts": [],
      "instruction": "What is a method to detect T1578.002 (Create Cloud Instance)?\nA.  The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity. In AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances</code> event, and in Azure the creation of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create</code> to create a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)\nB.  Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>. These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citations: Apple Developer Doco Archive Run-Path, Wardle Dylib Hijack Vulnerable Apps, Github EmpireProject HijackScanner)\nC.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\nD.  Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Hardware Design Specifications Are Altered (CAPEC-521)?\nA.  The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.\nB.  Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\nC.  Use mail.local\nD.  Monitor and control access to the configuration management system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hardware Design Specifications Are Altered (CAPEC-521)",
      "ddmc_optionA": "The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
      "ddmc_optionB": "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
      "ddmc_optionC": "Use mail.local",
      "ddmc_optionD": "Monitor and control access to the configuration management system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
      "prompts": [],
      "instruction": "How can you mitigate Hardware Design Specifications Are Altered (CAPEC-521)?\nA.  The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.\nB.  Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\nC.  Use mail.local\nD.  Monitor and control access to the configuration management system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Use umask() with the correct argument.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nD.  Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Support for Integrity Check (CWE-353)",
      "ddmc_optionA": "Use umask() with the correct argument.",
      "ddmc_optionB": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "ddmc_optionC": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_optionD": "Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "prompts": [],
      "instruction": "What is a method to mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Use umask() with the correct argument.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nD.  Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-125 (Flooding)",
      "ddmc_optionA": "Session tokens for specific host",
      "ddmc_optionB": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
      "ddmc_optionC": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionD": "Ensure that protocols have specific limits of scale configured.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that protocols have specific limits of scale configured.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Windows Admin Shares with Stolen Credentials (CAPEC-561)",
      "ddmc_optionA": "Enforce regular patching of software.",
      "ddmc_optionB": "Design: Enforce principle of least privilege.",
      "ddmc_optionC": "Do not allow accounts to be a local administrator on more than one system.",
      "ddmc_optionD": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow accounts to be a local administrator on more than one system.",
      "prompts": [],
      "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-499 (Serializable Class Containing Sensitive Data)?\nA.  Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.\nB.  Make sure to prevent serialization of your objects.\nC.  Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-499 (Serializable Class Containing Sensitive Data)",
      "ddmc_optionA": "Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.",
      "ddmc_optionB": "Make sure to prevent serialization of your objects.",
      "ddmc_optionC": "Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).",
      "ddmc_optionD": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Make sure to prevent serialization of your objects.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-499 (Serializable Class Containing Sensitive Data)?\nA.  Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.\nB.  Make sure to prevent serialization of your objects.\nC.  Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Expression is Always True (CWE-571)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Expression is Always True (CWE-571)",
      "ddmc_optionA": "Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Expression is Always True (CWE-571)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Network Sniffer Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Man-in-the-middle attack tool\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remanent Data Readable after Memory Erase (CWE-1330)?\nA.  Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.\nB.  Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.\nC.  Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\nD.  Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remanent Data Readable after Memory Erase (CWE-1330)",
      "ddmc_optionA": "Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.",
      "ddmc_optionB": "Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.",
      "ddmc_optionC": "Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.",
      "ddmc_optionD": "Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remanent Data Readable after Memory Erase (CWE-1330)?\nA.  Processor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.\nB.  Support for secure-erase commands that apply multiple cycles of overwriting memory with known patterns and of erasing actual content. Support for cryptographic erase in self-encrypting, memory devices. External, physical tools to erase memory such as ultraviolet-rays-based erase of Electrically erasable, programmable, read-only memory (EEPROM). Physical destruction of media device. This is done for repurposed or scrapped devices that are no longer in use.\nC.  Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\nD.  Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of getlogin() in Multithreaded Application (CWE-558)?\nA.  Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nB.  Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.\nC.  Always verify the integrity of the software that is being installed.\nD.  Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of getlogin() in Multithreaded Application (CWE-558)",
      "ddmc_optionA": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
      "ddmc_optionB": "Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.",
      "ddmc_optionC": "Always verify the integrity of the software that is being installed.",
      "ddmc_optionD": "Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.",
      "prompts": [],
      "instruction": "How can you mitigate Use of getlogin() in Multithreaded Application (CWE-558)?\nA.  Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nB.  Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.\nC.  Always verify the integrity of the software that is being installed.\nD.  Use control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nB.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\nC.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nD.  Implementation: Hide inner ordering of HTTP response header.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Alternative Execution Due to Deceptive Filenames (CAPEC-635)",
      "ddmc_optionA": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmc_optionB": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "ddmc_optionC": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "ddmc_optionD": "Implementation: Hide inner ordering of HTTP response header.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "prompts": [],
      "instruction": "What is a method to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nA.  Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nB.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\nC.  Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nD.  Implementation: Hide inner ordering of HTTP response header.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Public cloneable() Method Without Final ('Object Hijack') (CWE-491)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Make the cloneable() method final.\nC.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nD.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Public cloneable() Method Without Final ('Object Hijack') (CWE-491)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "Make the cloneable() method final.",
      "ddmc_optionC": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionD": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Make the cloneable() method final.",
      "prompts": [],
      "instruction": "How can you mitigate Public cloneable() Method Without Final ('Object Hijack') (CWE-491)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Make the cloneable() method final.\nC.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nD.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Suspending a running process on a computer system.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Suspending a running process on a computer system.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Suspending a running process on a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate System Owner/User Discovery (T1033)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Suspending a running process on a computer system.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Path Interception by Search Order Hijacking (T1574.008)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Interception by Search Order Hijacking (T1574.008)",
      "ddmc_optionA": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Path Interception by Search Order Hijacking (T1574.008)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Direct Network Flood (T1498.001)?\nA.  Restoring the data in a database.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Network Flood (T1498.001)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Direct Network Flood (T1498.001)?\nA.  Restoring the data in a database.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect At (T1053.002)?\nA.  Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the <code>atq</code> command and ensure IP addresses stored in the <code>SSH_CONNECTION</code> and <code>SSH_CLIENT</code> variables, machines that created the jobs, are trusted hosts. All at jobs are stored in <code>/var/spool/cron/atjobs/</code>. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns, rowland linux at 2019)\nB.  Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)\nC.  If infrastructure or patterns in malware have been previously identified, internet scanning may uncover when an adversary has staged malware to make it accessible for targeting. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle, such as User Execution or Ingress Tool Transfer.\nD.  Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "At (T1053.002)",
      "ddmc_optionA": "Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the <code>atq</code> command and ensure IP addresses stored in the <code>SSH_CONNECTION</code> and <code>SSH_CLIENT</code> variables, machines that created the jobs, are trusted hosts. All at jobs are stored in <code>/var/spool/cron/atjobs/</code>. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns, rowland linux at 2019)",
      "ddmc_optionB": "Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)",
      "ddmc_optionC": "If infrastructure or patterns in malware have been previously identified, internet scanning may uncover when an adversary has staged malware to make it accessible for targeting. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle, such as User Execution or Ingress Tool Transfer.",
      "ddmc_optionD": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the <code>atq</code> command and ensure IP addresses stored in the <code>SSH_CONNECTION</code> and <code>SSH_CLIENT</code> variables, machines that created the jobs, are trusted hosts. All at jobs are stored in <code>/var/spool/cron/atjobs/</code>. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns, rowland linux at 2019)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect At (T1053.002)?\nA.  Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the <code>atq</code> command and ensure IP addresses stored in the <code>SSH_CONNECTION</code> and <code>SSH_CLIENT</code> variables, machines that created the jobs, are trusted hosts. All at jobs are stored in <code>/var/spool/cron/atjobs/</code>. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns, rowland linux at 2019)\nB.  Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs. Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citations: AWS EBS Snapshot Sharing, Azure Blob Snapshots, Azure Shared Access Signature)\nC.  If infrastructure or patterns in malware have been previously identified, internet scanning may uncover when an adversary has staged malware to make it accessible for targeting. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle, such as User Execution or Ingress Tool Transfer.\nD.  Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Obtain Capabilities (T1588)?\nA.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Obtain Capabilities (T1588)",
      "ddmc_optionA": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionB": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Obtain Capabilities (T1588)?\nA.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1574.004 (Dylib Hijacking)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Initiating a host's reboot sequence to terminate all running processes.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.004 (Dylib Hijacking)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1574.004 (Dylib Hijacking)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Initiating a host's reboot sequence to terminate all running processes.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Server-generated Error Message Containing Sensitive Information (CWE-550)?\nA.  Appropriately filter or quote CRLF sequences in user-controlled input.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server-generated Error Message Containing Sensitive Information (CWE-550)",
      "ddmc_optionA": "Appropriately filter or quote CRLF sequences in user-controlled input.",
      "ddmc_optionB": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.",
      "prompts": [],
      "instruction": "How can you mitigate Server-generated Error Message Containing Sensitive Information (CWE-550)?\nA.  Appropriately filter or quote CRLF sequences in user-controlled input.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1003.001 (LSASS Memory)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1003.001 (LSASS Memory)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1003.001 (LSASS Memory)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nB.  Many incorrect login attempts are detected by the system.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Data is being transferred and/or removed from systems/applications within the network.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "ddmc_optionB": "Many incorrect login attempts are detected by the system.",
      "ddmc_optionC": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "ddmc_optionD": "Data is being transferred and/or removed from systems/applications within the network.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "prompts": [],
      "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\nB.  Many incorrect login attempts are detected by the system.\nC.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nD.  Data is being transferred and/or removed from systems/applications within the network.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect T1482 (Domain Trust Discovery)?\nA.  Forensic techniques exist to detect aspects of files that have had their timestamps modified.  It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.(Citations: WindowsIR Anti-Forensic Techniques)\nB.  Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with Domain Trust Discovery. Information may also be acquired through Windows system management tools such as PowerShell. The .NET method `GetAllTrustRelationships()` can be an indicator of Domain Trust Discovery.(Citations: Harmj0y Domain Trusts, Microsoft GetAllTrustRelationships)\nD.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1482 (Domain Trust Discovery)",
      "ddmc_optionA": "Forensic techniques exist to detect aspects of files that have had their timestamps modified.  It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.(Citations: WindowsIR Anti-Forensic Techniques)",
      "ddmc_optionB": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",
      "ddmc_optionC": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with Domain Trust Discovery. Information may also be acquired through Windows system management tools such as PowerShell. The .NET method `GetAllTrustRelationships()` can be an indicator of Domain Trust Discovery.(Citations: Harmj0y Domain Trusts, Microsoft GetAllTrustRelationships)",
      "ddmc_optionD": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with Domain Trust Discovery. Information may also be acquired through Windows system management tools such as PowerShell. The .NET method `GetAllTrustRelationships()` can be an indicator of Domain Trust Discovery.(Citations: Harmj0y Domain Trusts, Microsoft GetAllTrustRelationships)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect T1482 (Domain Trust Discovery)?\nA.  Forensic techniques exist to detect aspects of files that have had their timestamps modified.  It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.(Citations: WindowsIR Anti-Forensic Techniques)\nB.  Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with Domain Trust Discovery. Information may also be acquired through Windows system management tools such as PowerShell. The .NET method `GetAllTrustRelationships()` can be an indicator of Domain Trust Discovery.(Citations: Harmj0y Domain Trusts, Microsoft GetAllTrustRelationships)\nD.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)?\nA.  Implementation: Use SSL/TLS to protect cookie in transit\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.\nD.  Ensure that all user-supplied input is validated before use.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)",
      "ddmc_optionA": "Implementation: Use SSL/TLS to protect cookie in transit",
      "ddmc_optionB": "Require SSL for update channels and implement certificate transparency based verification.",
      "ddmc_optionC": "Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.",
      "ddmc_optionD": "Ensure that all user-supplied input is validated before use.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Use SSL/TLS to protect cookie in transit",
      "prompts": [],
      "instruction": "How can you mitigate Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)?\nA.  Implementation: Use SSL/TLS to protect cookie in transit\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.\nD.  Ensure that all user-supplied input is validated before use.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Multi-hop Proxy (T1090.003)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmc_optionA": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "prompts": [],
      "instruction": "What is a method to mitigate Multi-hop Proxy (T1090.003)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Restoring the data in a database.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionD": "Restoring the data in a database.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Restoring the data in a database.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Double Free (CWE-415)?\nA.  Choose a language that provides automatic memory management.\nB.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.\nD.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Double Free (CWE-415)",
      "ddmc_optionA": "Choose a language that provides automatic memory management.",
      "ddmc_optionB": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
      "ddmc_optionC": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.",
      "ddmc_optionD": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Choose a language that provides automatic memory management.",
      "prompts": [],
      "instruction": "How can you mitigate Double Free (CWE-415)?\nA.  Choose a language that provides automatic memory management.\nB.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nC.  Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.\nD.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Web Services (T1584.006)?\nA.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Services (T1584.006)",
      "ddmc_optionA": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Web Services (T1584.006)?\nA.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Mobile Phishing (CAPEC-164)?\nA.  Implementation: use validation on both client and server side.\nB.  Backup device data before erasure to retain intellectual property and inside knowledge.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mobile Phishing (CAPEC-164)",
      "ddmc_optionA": "Implementation: use validation on both client and server side.",
      "ddmc_optionB": "Backup device data before erasure to retain intellectual property and inside knowledge.",
      "ddmc_optionC": "Protect environment variables against unauthorized read and write access.",
      "ddmc_optionD": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.",
      "prompts": [],
      "instruction": "What is a method to mitigate Mobile Phishing (CAPEC-164)?\nA.  Implementation: use validation on both client and server side.\nB.  Backup device data before erasure to retain intellectual property and inside knowledge.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restricting a user account's access to resources.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restricting a user account's access to resources.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Restoring an entity's access to resources.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Restoring an entity's access to resources.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Restoring an entity's access to resources.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Browser in the Middle (BiTM) (CAPEC-701)?\nA.  Use the sendmail restricted shell program (smrsh)\nB.  Disable Bluetooth when not being used.\nC.  Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel\nD.  Use static analysis tools to find race conditions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Browser in the Middle (BiTM) (CAPEC-701)",
      "ddmc_optionA": "Use the sendmail restricted shell program (smrsh)",
      "ddmc_optionB": "Disable Bluetooth when not being used.",
      "ddmc_optionC": "Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel",
      "ddmc_optionD": "Use static analysis tools to find race conditions.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Browser in the Middle (BiTM) (CAPEC-701)?\nA.  Use the sendmail restricted shell program (smrsh)\nB.  Disable Bluetooth when not being used.\nC.  Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel\nD.  Use static analysis tools to find race conditions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Exploitation of Thunderbolt Protection Flaws (CAPEC-665)?\nA.  An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.\nB.  The login attempts use passwords that have been used previously by the user account in question.\nC.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\nD.  Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Exploitation of Thunderbolt Protection Flaws (CAPEC-665)",
      "ddmc_optionA": "An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.",
      "ddmc_optionB": "The login attempts use passwords that have been used previously by the user account in question.",
      "ddmc_optionC": "Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.",
      "ddmc_optionD": "Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Exploitation of Thunderbolt Protection Flaws (CAPEC-665)?\nA.  An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.\nB.  The login attempts use passwords that have been used previously by the user account in question.\nC.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\nD.  Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Regular Expression Exponential Blowup (CAPEC-492)?\nA.  On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).\nB.  Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.\nC.  Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program\nD.  Establish diversity among suppliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Regular Expression Exponential Blowup (CAPEC-492)",
      "ddmc_optionA": "On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).",
      "ddmc_optionB": "Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.",
      "ddmc_optionC": "Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program",
      "ddmc_optionD": "Establish diversity among suppliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.",
      "prompts": [],
      "instruction": "What is a method to mitigate Regular Expression Exponential Blowup (CAPEC-492)?\nA.  On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).\nB.  Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.\nC.  Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program\nD.  Establish diversity among suppliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Hard-coded Credentials (CWE-798)?\nA.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\nB.  Use the template engine's sandbox or restricted mode, if available.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nD.  Regularly wrap sub-expressions in parentheses, especially in security-critical code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Hard-coded Credentials (CWE-798)",
      "ddmc_optionA": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.",
      "ddmc_optionB": "Use the template engine's sandbox or restricted mode, if available.",
      "ddmc_optionC": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_optionD": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Hard-coded Credentials (CWE-798)?\nA.  Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\nB.  Use the template engine's sandbox or restricted mode, if available.\nC.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\nD.  Regularly wrap sub-expressions in parentheses, especially in security-critical code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Fingerprinting (CAPEC-224)?\nA.  One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.\nB.  Perform validation on canonical data.\nC.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\nD.  While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Fingerprinting (CAPEC-224)",
      "ddmc_optionA": "One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.",
      "ddmc_optionB": "Perform validation on canonical data.",
      "ddmc_optionC": "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
      "ddmc_optionD": "While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.",
      "prompts": [],
      "instruction": "How can you mitigate Fingerprinting (CAPEC-224)?\nA.  One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.\nB.  Perform validation on canonical data.\nC.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\nD.  While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Design: Enforce principle of least privilege\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Using Malicious Files (CAPEC-17)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.",
      "ddmc_optionC": "Protect environment variables against unauthorized read and write access.",
      "ddmc_optionD": "Design: Enforce principle of least privilege",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Enforce principle of least privilege",
      "prompts": [],
      "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Design: Enforce principle of least privilege\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Blocking Code in Single-threaded, Non-blocking Context (CWE-1322)?\nA.  Assign IP addresses that are not 0.0.0.0.\nB.  Do not store unnecessarily sensitive information in the cache.\nC.  If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).\nD.  For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Blocking Code in Single-threaded, Non-blocking Context (CWE-1322)",
      "ddmc_optionA": "Assign IP addresses that are not 0.0.0.0.",
      "ddmc_optionB": "Do not store unnecessarily sensitive information in the cache.",
      "ddmc_optionC": "If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).",
      "ddmc_optionD": "For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Blocking Code in Single-threaded, Non-blocking Context (CWE-1322)?\nA.  Assign IP addresses that are not 0.0.0.0.\nB.  Do not store unnecessarily sensitive information in the cache.\nC.  If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).\nD.  For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rooting SIM Cards (CAPEC-614)?\nA.  Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.\nB.  Prevent adversary access to privileged accounts necessary to install rootkits.\nC.  Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\nD.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rooting SIM Cards (CAPEC-614)",
      "ddmc_optionA": "Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.",
      "ddmc_optionB": "Prevent adversary access to privileged accounts necessary to install rootkits.",
      "ddmc_optionC": "Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.",
      "ddmc_optionD": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "prompts": [],
      "instruction": "What is a method to mitigate Rooting SIM Cards (CAPEC-614)?\nA.  Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.\nB.  Prevent adversary access to privileged accounts necessary to install rootkits.\nC.  Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\nD.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Design for FPGA Maliciously Altered (CAPEC-674)?\nA.  Use a secret space that is well known and with no known patterns that may reduce functional size.\nB.  Implementation: Use SSL/TLS to protect cookie in transit\nC.  Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.\nD.  Conduct detailed vendor assessment before acquiring COTS hardware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Design for FPGA Maliciously Altered (CAPEC-674)",
      "ddmc_optionA": "Use a secret space that is well known and with no known patterns that may reduce functional size.",
      "ddmc_optionB": "Implementation: Use SSL/TLS to protect cookie in transit",
      "ddmc_optionC": "Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.",
      "ddmc_optionD": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Design for FPGA Maliciously Altered (CAPEC-674)?\nA.  Use a secret space that is well known and with no known patterns that may reduce functional size.\nB.  Implementation: Use SSL/TLS to protect cookie in transit\nC.  Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.\nD.  Conduct detailed vendor assessment before acquiring COTS hardware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Traffic Signaling (T1205)?\nA.  Restricting network traffic originating from any location.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Traffic Signaling (T1205)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Traffic Signaling (T1205)?\nA.  Restricting network traffic originating from any location.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Restoring a file for an entity to access.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring a file for an entity to access.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Restoring a file for an entity to access.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1498.002 (Reflection Amplification)",
      "ddmc_optionA": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "How can you mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring the data in a database.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Restoring the data in a database.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring the data in a database.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-470 (Expanding Control over the Operating System from the Database)?\nA.  Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.\nB.  Physically destroy memory and SIM cards for mobile devices not intended to be reused.\nC.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nD.  Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-470 (Expanding Control over the Operating System from the Database)",
      "ddmc_optionA": "Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.",
      "ddmc_optionB": "Physically destroy memory and SIM cards for mobile devices not intended to be reused.",
      "ddmc_optionC": "Ensure cryptographic elements have been sufficiently tested for weaknesses.",
      "ddmc_optionD": "Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-470 (Expanding Control over the Operating System from the Database)?\nA.  Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.\nB.  Physically destroy memory and SIM cards for mobile devices not intended to be reused.\nC.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nD.  Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate File and Directory Discovery (T1083)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Discovery (T1083)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate File and Directory Discovery (T1083)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect T1001 (Data Obfuscation)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious. Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.\nC.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1001 (Data Obfuscation)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious. Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.",
      "ddmc_optionC": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect T1001 (Data Obfuscation)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious. Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.\nC.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1547.008 (LSASS Driver)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.008 (LSASS Driver)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.",
      "ddmc_optionC": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionD": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1547.008 (LSASS Driver)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nA.  Encrypting a file using a cryptographic key.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Encrypting a file using a cryptographic key.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1140 (Deobfuscate/Decode Files or Information)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nA.  Encrypting a file using a cryptographic key.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Encrypting a file using a cryptographic key.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1091 (Replication Through Removable Media)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1091 (Replication Through Removable Media)",
      "ddmc_optionA": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1091 (Replication Through Removable Media)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Shared Modules (T1129)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Shared Modules (T1129)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "How can you mitigate Shared Modules (T1129)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Filter Failure through Buffer Overflow (CAPEC-24)?\nA.  Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\nB.  Operational: Use OS-level preventative functionality. Not a complete solution.\nC.  Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.\nD.  Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Filter Failure through Buffer Overflow (CAPEC-24)",
      "ddmc_optionA": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
      "ddmc_optionB": "Operational: Use OS-level preventative functionality. Not a complete solution.",
      "ddmc_optionC": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
      "ddmc_optionD": "Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Filter Failure through Buffer Overflow (CAPEC-24)?\nA.  Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\nB.  Operational: Use OS-level preventative functionality. Not a complete solution.\nC.  Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.\nD.  Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-523 (Unprotected Transport of Credentials)?\nA.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\nB.  Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.\nC.  Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-523 (Unprotected Transport of Credentials)",
      "ddmc_optionA": "Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.",
      "ddmc_optionB": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.",
      "ddmc_optionC": "Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-523 (Unprotected Transport of Credentials)?\nA.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\nB.  Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.\nC.  Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1176 (Browser Extensions)",
      "ddmc_optionA": "System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.",
      "ddmc_optionB": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Software inventorying identifies and records the software items in the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1176 (Browser Extensions)?\nA.  System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Traffic Intercept (CAPEC-609)",
      "ddmc_optionA": "Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.",
      "ddmc_optionD": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Direct Network Flood (T1498.001)",
      "ddmc_optionA": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Direct Network Flood (T1498.001)?\nA.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Passive physical link mapping only listens to network traffic as a means to map the physical layer.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Cloud Accounts (T1586.003)?\nA.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nB.  Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.\nC.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cloud Accounts (T1586.003)",
      "ddmc_optionA": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)",
      "ddmc_optionB": "Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.",
      "ddmc_optionC": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "ddmc_optionD": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Cloud Accounts (T1586.003)?\nA.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host software information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nB.  Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.\nC.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nD.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during exfiltration (ex: Transfer Data to Cloud Account).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Privilege Abuse (CAPEC-122)?\nA.  Ensure digital certificates are protected and inaccessible by unauthorized uses.\nB.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\nC.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nD.  Properly validate the data (syntactically and semantically) before writing it to the database.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Privilege Abuse (CAPEC-122)",
      "ddmc_optionA": "Ensure digital certificates are protected and inaccessible by unauthorized uses.",
      "ddmc_optionB": "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
      "ddmc_optionC": "Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.",
      "ddmc_optionD": "Properly validate the data (syntactically and semantically) before writing it to the database.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Properly validate the data (syntactically and semantically) before writing it to the database.",
      "prompts": [],
      "instruction": "What is a method to mitigate Privilege Abuse (CAPEC-122)?\nA.  Ensure digital certificates are protected and inaccessible by unauthorized uses.\nB.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\nC.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nD.  Properly validate the data (syntactically and semantically) before writing it to the database.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Value Delimiters (CWE-142)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.\nD.  When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Value Delimiters (CWE-142)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
      "ddmc_optionC": "Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
      "ddmc_optionD": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Value Delimiters (CWE-142)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  If at all possible, use library calls rather than external processes to recreate the desired functionality.\nC.  Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.\nD.  When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points. One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Standard Encoding (T1132.002)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Encoding (T1132.002)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Standard Encoding (T1132.002)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Replication Through Removable Media (T1091)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replication Through Removable Media (T1091)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Replication Through Removable Media (T1091)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Code Repositories (T1213.003)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Code Repositories (T1213.003)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Code Repositories (T1213.003)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1078.004 (Cloud Accounts)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Using biological measures in order to authenticate a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1078.004 (Cloud Accounts)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Using biological measures in order to authenticate a user.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Using biological measures in order to authenticate a user.",
      "prompts": [],
      "instruction": "How can you mitigate T1078.004 (Cloud Accounts)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Using biological measures in order to authenticate a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Amplification (CAPEC-490)?\nA.  To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.\nB.  Session tokens for specific host\nC.  Hard Coded Alternate DNS server in applications\nD.  Design: Tunnel communications through a secure proxy\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Amplification (CAPEC-490)",
      "ddmc_optionA": "To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.",
      "ddmc_optionB": "Session tokens for specific host",
      "ddmc_optionC": "Hard Coded Alternate DNS server in applications",
      "ddmc_optionD": "Design: Tunnel communications through a secure proxy",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Amplification (CAPEC-490)?\nA.  To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.\nB.  Session tokens for specific host\nC.  Hard Coded Alternate DNS server in applications\nD.  Design: Tunnel communications through a secure proxy\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Blocking a lookup based on the query's domain name value.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking a lookup based on the query's domain name value.",
      "prompts": [],
      "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Not Using Password Aging (CWE-262)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Not Using Password Aging (CWE-262)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_optionD": "Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Not Using Password Aging (CWE-262)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Encrypting a file using a cryptographic key.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Encrypting a file using a cryptographic key.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nB.  Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\nC.  Implementation: Perform output validation for all remote content.\nD.  Implementation: Appropriately deal with error messages.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmc_optionA": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "ddmc_optionB": "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.",
      "ddmc_optionC": "Implementation: Perform output validation for all remote content.",
      "ddmc_optionD": "Implementation: Appropriately deal with error messages.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "prompts": [],
      "instruction": "How can you mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nB.  Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\nC.  Implementation: Perform output validation for all remote content.\nD.  Implementation: Appropriately deal with error messages.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cloud Storage Object Discovery (T1619)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Storage Object Discovery (T1619)",
      "ddmc_optionA": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cloud Storage Object Discovery (T1619)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Counterfeit Hardware Component Inserted During Product Assembly (CAPEC-520)?\nA.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\nB.  Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.\nC.  Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.\nD.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Counterfeit Hardware Component Inserted During Product Assembly (CAPEC-520)",
      "ddmc_optionA": "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
      "ddmc_optionB": "Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.",
      "ddmc_optionC": "Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.",
      "ddmc_optionD": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.",
      "prompts": [],
      "instruction": "How can you mitigate Counterfeit Hardware Component Inserted During Product Assembly (CAPEC-520)?\nA.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\nB.  Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.\nC.  Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.\nD.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.\nB.  Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.\nC.  Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.\nD.  In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)",
      "ddmc_optionA": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.",
      "ddmc_optionB": "Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.",
      "ddmc_optionC": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.",
      "ddmc_optionD": "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.\nB.  Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.\nC.  Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.\nD.  In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Password Policy Discovery (T1201)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Password Policy Discovery (T1201)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Password Policy Discovery (T1201)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Web Shell (T1505.003)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Shell (T1505.003)",
      "ddmc_optionA": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate Web Shell (T1505.003)?\nA.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1222 (File and Directory Permissions Modification)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  Restoring an software configuration.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1222 (File and Directory Permissions Modification)",
      "ddmc_optionA": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1222 (File and Directory Permissions Modification)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  Restoring an software configuration.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restricting network traffic originating from any location.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restricting network traffic originating from any location.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Default Credentials (CWE-1392)?\nA.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nD.  Perform a type check before interpreting an object.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
      "ddmc_optionD": "Perform a type check before interpreting an object.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Default Credentials (CWE-1392)?\nA.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nD.  Perform a type check before interpreting an object.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  The process of temporarily disabling user accounts on a system or domain.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Agent (T1543.001)",
      "ddmc_optionA": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  The process of temporarily disabling user accounts on a system or domain.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Employing file hash comparisons to detect known malware.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Protect sensitive information with strong encryption.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-hop Proxy (T1090.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-hop Proxy (T1090.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)",
      "ddmc_optionA": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_optionB": "Use static analysis tools to spot return of the address of a stack variable.",
      "ddmc_optionC": "A true random number generator should be implemented for cryptographic algorithms.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nA.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nB.  Use static analysis tools to spot return of the address of a stack variable.\nC.  A true random number generator should be implemented for cryptographic algorithms.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Storage Object Discovery (T1619)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Domain Accounts (T1078.002)?\nA.  Analyzing a Container Image with respect to a set of policies.\nB.  Restoring a user account's access to resources.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Analyzing a Container Image with respect to a set of policies.",
      "ddmc_optionB": "Restoring a user account's access to resources.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring a user account's access to resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Domain Accounts (T1078.002)?\nA.  Analyzing a Container Image with respect to a set of policies.\nB.  Restoring a user account's access to resources.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Screen Capture (T1113)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1566.003 (Spearphishing via Service)?\nA.  Analyzing the reputation of an identifier.\nB.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1566.003 (Spearphishing via Service)",
      "ddmc_optionA": "Analyzing the reputation of an identifier.",
      "ddmc_optionB": "Passive physical link mapping only listens to network traffic as a means to map the physical layer.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Analyzing the reputation of an identifier.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1566.003 (Spearphishing via Service)?\nA.  Analyzing the reputation of an identifier.\nB.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Analyzing email or instant message content to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionD": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Analyzing email or instant message content to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Credential API Hooking (T1056.004)?\nA.  Restoring a file for an entity to access.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential API Hooking (T1056.004)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionC": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Preventing execution of any address in a memory region other than the code segment.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Credential API Hooking (T1056.004)?\nA.  Restoring a file for an entity to access.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Employing file hash comparisons to detect known malware.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Employing file hash comparisons to detect known malware.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Screen Capture (T1113)?\nA.  Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.\nB.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host hardware information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nC.  Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citations: University of Birmingham C2)\nD.  Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement. Use of applications such as ARD may be legitimate depending on the environment and how it\u2019s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using these applications. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. In macOS, you can review logs for \"screensharingd\" and \"Authentication\" event messages. Monitor network connections regarding remote management (ports tcp:3283 and tcp:5900) and for remote login (port tcp:22).(Citations: Lockboxx ARD 2019, Apple Unified Log Analysis Remote Login and Screen Sharing)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Screen Capture (T1113)",
      "ddmc_optionA": "Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.",
      "ddmc_optionB": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host hardware information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)",
      "ddmc_optionC": "Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement. Use of applications such as ARD may be legitimate depending on the environment and how it\u2019s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using these applications. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. In macOS, you can review logs for \"screensharingd\" and \"Authentication\" event messages. Monitor network connections regarding remote management (ports tcp:3283 and tcp:5900) and for remote login (port tcp:22).(Citations: Lockboxx ARD 2019, Apple Unified Log Analysis Remote Login and Screen Sharing)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.",
      "prompts": [],
      "instruction": "What is a method to detect Screen Capture (T1113)?\nA.  Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.\nB.  Internet scanners may be used to look for patterns associated with malicious content designed to collect host hardware information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\nC.  Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citations: University of Birmingham C2)\nD.  Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement. Use of applications such as ARD may be legitimate depending on the environment and how it\u2019s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using these applications. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. In macOS, you can review logs for \"screensharingd\" and \"Authentication\" event messages. Monitor network connections regarding remote management (ports tcp:3283 and tcp:5900) and for remote login (port tcp:22).(Citations: Lockboxx ARD 2019, Apple Unified Log Analysis Remote Login and Screen Sharing)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use After Free (CWE-416)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use After Free (CWE-416)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious",
      "ddmc_optionD": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use After Free (CWE-416)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing file hash comparisons to detect known malware.\nC.  Blocking the resolution of any subdomain of a specified domain name.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Blocking the resolution of any subdomain of a specified domain name.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing file hash comparisons to detect known malware.\nC.  Blocking the resolution of any subdomain of a specified domain name.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Detects processes that modify, change, or replace their own code at runtime.\nB.  Employing file hash comparisons to detect known malware.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Replacing old software on a computer system component.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detects processes that modify, change, or replace their own code at runtime.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Detects processes that modify, change, or replace their own code at runtime.\nB.  Employing file hash comparisons to detect known malware.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Replacing old software on a computer system component.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  The practice of setting decoys in a production environment to entice interaction from attackers.\nC.  File eviction techniques evict files from system storage.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionB": "The practice of setting decoys in a production environment to entice interaction from attackers.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The practice of setting decoys in a production environment to entice interaction from attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  The practice of setting decoys in a production environment to entice interaction from attackers.\nC.  File eviction techniques evict files from system storage.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate AppInit DLLs (T1546.010)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "AppInit DLLs (T1546.010)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "What is a method to mitigate AppInit DLLs (T1546.010)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Implement access-control checks in the bridge for both upstream and downstream transactions.\nB.  Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.\nC.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Access Control in Fabric Bridge (CWE-1317)",
      "ddmc_optionA": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_optionB": "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.",
      "ddmc_optionC": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Implement access-control checks in the bridge for both upstream and downstream transactions.\nB.  Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.\nC.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Restoring a file for an entity to access.\nB.  Employing file hash comparisons to detect known malware.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Space after Filename (T1036.006)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Restoring a file for an entity to access.\nB.  Employing file hash comparisons to detect known malware.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1584.005 (Botnet)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1584.005 (Botnet)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1584.005 (Botnet)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use of Inherently Dangerous Function (CWE-242)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Inherently Dangerous Function (CWE-242)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use of Inherently Dangerous Function (CWE-242)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Gatekeeper Bypass (T1553.001)?\nA.  Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. Credential resources obtained through exploitation may be detectable in use if they are not normally used or seen.\nB.  Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.   Also monitor for network protocols  and other replication requests from IPs not associated with known domain controllers. Note: Domain controllers may not log replication requests originating from the default domain controller account.(Citations: Microsoft DRSR Dec 2017, Microsoft GetNCCChanges, Samba DRSUAPI, Microsoft DRSR Dec 2017, Microsoft NRPC Dec 2017, Microsoft SAMR, AdSecurity DCSync Sept 2015, Harmj0y DCSync Sept 2015)\nC.  The removal of the <code>com.apple.quarantine</code> flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as <code>xattr</code>. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Monitor software update frameworks that strip the <code>com.apple.quarantine</code> flag when performing updates. Review <code>false</code> values under the <code>LSFileQuarantineEnabled</code> entry in an application's <code>Info.plist</code> file (required by every application). <code>false</code> under <code>LSFileQuarantineEnabled</code> indicates that an application does not use the quarantine flag. Unsandboxed applications with an unspecified <code>LSFileQuarantineEnabled</code> entry will default to not setting the quarantine flag. QuarantineEvents is a SQLite database containing a list of all files assigned the <code>com.apple.quarantine</code> attribute, located at <code>~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2</code>. Each event contains the corresponding UUID, timestamp, application, Gatekeeper score, and decision if it was allowed.(Citations: TheEclecticLightCompany Quarantine and the flag)\nD.  Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Gatekeeper Bypass (T1553.001)",
      "ddmc_optionA": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. Credential resources obtained through exploitation may be detectable in use if they are not normally used or seen.",
      "ddmc_optionB": "Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.   Also monitor for network protocols  and other replication requests from IPs not associated with known domain controllers. Note: Domain controllers may not log replication requests originating from the default domain controller account.(Citations: Microsoft DRSR Dec 2017, Microsoft GetNCCChanges, Samba DRSUAPI, Microsoft DRSR Dec 2017, Microsoft NRPC Dec 2017, Microsoft SAMR, AdSecurity DCSync Sept 2015, Harmj0y DCSync Sept 2015)",
      "ddmc_optionC": "The removal of the <code>com.apple.quarantine</code> flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as <code>xattr</code>. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Monitor software update frameworks that strip the <code>com.apple.quarantine</code> flag when performing updates. Review <code>false</code> values under the <code>LSFileQuarantineEnabled</code> entry in an application's <code>Info.plist</code> file (required by every application). <code>false</code> under <code>LSFileQuarantineEnabled</code> indicates that an application does not use the quarantine flag. Unsandboxed applications with an unspecified <code>LSFileQuarantineEnabled</code> entry will default to not setting the quarantine flag. QuarantineEvents is a SQLite database containing a list of all files assigned the <code>com.apple.quarantine</code> attribute, located at <code>~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2</code>. Each event contains the corresponding UUID, timestamp, application, Gatekeeper score, and decision if it was allowed.(Citations: TheEclecticLightCompany Quarantine and the flag)",
      "ddmc_optionD": "Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The removal of the <code>com.apple.quarantine</code> flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as <code>xattr</code>. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Monitor software update frameworks that strip the <code>com.apple.quarantine</code> flag when performing updates. Review <code>false</code> values under the <code>LSFileQuarantineEnabled</code> entry in an application's <code>Info.plist</code> file (required by every application). <code>false</code> under <code>LSFileQuarantineEnabled</code> indicates that an application does not use the quarantine flag. Unsandboxed applications with an unspecified <code>LSFileQuarantineEnabled</code> entry will default to not setting the quarantine flag. QuarantineEvents is a SQLite database containing a list of all files assigned the <code>com.apple.quarantine</code> attribute, located at <code>~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2</code>. Each event contains the corresponding UUID, timestamp, application, Gatekeeper score, and decision if it was allowed.(Citations: TheEclecticLightCompany Quarantine and the flag)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Gatekeeper Bypass (T1553.001)?\nA.  Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. Credential resources obtained through exploitation may be detectable in use if they are not normally used or seen.\nB.  Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.   Also monitor for network protocols  and other replication requests from IPs not associated with known domain controllers. Note: Domain controllers may not log replication requests originating from the default domain controller account.(Citations: Microsoft DRSR Dec 2017, Microsoft GetNCCChanges, Samba DRSUAPI, Microsoft DRSR Dec 2017, Microsoft NRPC Dec 2017, Microsoft SAMR, AdSecurity DCSync Sept 2015, Harmj0y DCSync Sept 2015)\nC.  The removal of the <code>com.apple.quarantine</code> flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as <code>xattr</code>. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Monitor software update frameworks that strip the <code>com.apple.quarantine</code> flag when performing updates. Review <code>false</code> values under the <code>LSFileQuarantineEnabled</code> entry in an application's <code>Info.plist</code> file (required by every application). <code>false</code> under <code>LSFileQuarantineEnabled</code> indicates that an application does not use the quarantine flag. Unsandboxed applications with an unspecified <code>LSFileQuarantineEnabled</code> entry will default to not setting the quarantine flag. QuarantineEvents is a SQLite database containing a list of all files assigned the <code>com.apple.quarantine</code> attribute, located at <code>~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2</code>. Each event contains the corresponding UUID, timestamp, application, Gatekeeper score, and decision if it was allowed.(Citations: TheEclecticLightCompany Quarantine and the flag)\nD.  Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Using biological measures in order to authenticate a user.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Physical link mapping identifies and models the link connectivity of the network devices within a physical network.",
      "ddmc_optionC": "Using biological measures in order to authenticate a user.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Using biological measures in order to authenticate a user.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restoring the data in a database.\nC.  A Credential created for the purpose of deceiving an adversary.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restoring the data in a database.\nC.  A Credential created for the purpose of deceiving an adversary.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Double Free (CWE-415)?\nA.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nB.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Double Free (CWE-415)",
      "ddmc_optionA": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionB": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmc_optionC": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).",
      "ddmc_optionD": "Use a static analysis tool to find double free instances.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use a static analysis tool to find double free instances.",
      "prompts": [],
      "instruction": "What is a method to mitigate Double Free (CWE-415)?\nA.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nB.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Audio Capture (T1123)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Session tokens for specific host\nB.  Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.\nC.  Ensure that all user-supplied input is validated before use.\nD.  Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Rogue Base Station (CAPEC-617)",
      "ddmc_optionA": "Session tokens for specific host",
      "ddmc_optionB": "Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.",
      "ddmc_optionC": "Ensure that all user-supplied input is validated before use.",
      "ddmc_optionD": "Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Session tokens for specific host\nB.  Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.\nC.  Ensure that all user-supplied input is validated before use.\nD.  Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Rename System Utilities (T1036.003)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rename System Utilities (T1036.003)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "How can you mitigate Rename System Utilities (T1036.003)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]\nC.  Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Input Terminators (CWE-147)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]",
      "ddmc_optionC": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]\nC.  Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Wordlist Scanning (T1595.003)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Restrict the ability to modify certain hives or keys in the Windows Registry.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Wordlist Scanning (T1595.003)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate Wordlist Scanning (T1595.003)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Restrict the ability to modify certain hives or keys in the Windows Registry.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-477 (Signature Spoofing by Mixing Signed and Unsigned Content)?\nA.  Monitor system and domain logs for abnormal credential access.\nB.  Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.\nC.  When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.\nD.  Only download open-source software from reputable hosting sites or package managers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-477 (Signature Spoofing by Mixing Signed and Unsigned Content)",
      "ddmc_optionA": "Monitor system and domain logs for abnormal credential access.",
      "ddmc_optionB": "Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.",
      "ddmc_optionC": "When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.",
      "ddmc_optionD": "Only download open-source software from reputable hosting sites or package managers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-477 (Signature Spoofing by Mixing Signed and Unsigned Content)?\nA.  Monitor system and domain logs for abnormal credential access.\nB.  Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.\nC.  When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.\nD.  Only download open-source software from reputable hosting sites or package managers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect CAPEC-78 (Using Escaped Slashes in Alternate Encoding)?\nA.  Unicode encoded data is passed to APIs where it is not expected\nB.  Many incorrect login attempts are detected by the system.\nC.  An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.\nD.  Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CAPEC-78 (Using Escaped Slashes in Alternate Encoding)",
      "ddmc_optionA": "Unicode encoded data is passed to APIs where it is not expected",
      "ddmc_optionB": "Many incorrect login attempts are detected by the system.",
      "ddmc_optionC": "An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
      "ddmc_optionD": "Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
      "prompts": [],
      "instruction": "What is a method to detect CAPEC-78 (Using Escaped Slashes in Alternate Encoding)?\nA.  Unicode encoded data is passed to APIs where it is not expected\nB.  Many incorrect login attempts are detected by the system.\nC.  An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.\nD.  Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect T1614 (System Location Discovery)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling <code> GetLocaleInfoW</code> to gather information. Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.(Citations: FBI Ragnar Locker 2020)\nB.  Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.\nC.  Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.\nD.  The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. . As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.(Citations: Microsoft SharePoint Logging)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1614 (System Location Discovery)",
      "ddmc_optionA": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling <code> GetLocaleInfoW</code> to gather information. Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.(Citations: FBI Ragnar Locker 2020)",
      "ddmc_optionB": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.",
      "ddmc_optionC": "Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.",
      "ddmc_optionD": "The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. . As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.(Citations: Microsoft SharePoint Logging)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling <code> GetLocaleInfoW</code> to gather information. Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.(Citations: FBI Ragnar Locker 2020)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect T1614 (System Location Discovery)?\nA.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling <code> GetLocaleInfoW</code> to gather information. Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.(Citations: FBI Ragnar Locker 2020)\nB.  Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.\nC.  Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.\nD.  The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. . As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.(Citations: Microsoft SharePoint Logging)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restricting a user account's access to resources.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Operating system level mechanisms to prevent abusive input device exploitation.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Operating system level mechanisms to prevent abusive input device exploitation.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restricting a user account's access to resources.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Operating system level mechanisms to prevent abusive input device exploitation.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Export of Android Application Components (CWE-926)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Export of Android Application Components (CWE-926)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1574.004 (Dylib Hijacking)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.004 (Dylib Hijacking)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1574.004 (Dylib Hijacking)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Server Software Component (T1505)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server Software Component (T1505)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Server Software Component (T1505)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Memory (T1003.001)?\nA.  Restricting network traffic originating from any location.\nB.  Initiating a host's shutdown sequence to terminate all running processes.\nC.  Restoring an entity's access to resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Memory (T1003.001)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Initiating a host's shutdown sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Memory (T1003.001)?\nA.  Restricting network traffic originating from any location.\nB.  Initiating a host's shutdown sequence to terminate all running processes.\nC.  Restoring an entity's access to resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Access of Memory Location Before Start of Buffer (CWE-786)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Access of Memory Location Before Start of Buffer (CWE-786)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "prompts": [],
      "instruction": "What is a method to detect Access of Memory Location Before Start of Buffer (CWE-786)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Process Injection (T1055)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Process Injection (T1055)",
      "ddmc_optionA": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Process Injection (T1055)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1056.001 (Keylogging)?\nA.  Analyzing email or instant message content to detect unauthorized activity.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1056.001 (Keylogging)",
      "ddmc_optionA": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate T1056.001 (Keylogging)?\nA.  Analyzing email or instant message content to detect unauthorized activity.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Local Data Staging (T1074.001)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Local Data Staging (T1074.001)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Path Traversal: '\\..\\filename' (CWE-29)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Note that some template mechanisms provide built-in support for the appropriate encoding.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Traversal: '\\..\\filename' (CWE-29)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionB": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Note that some template mechanisms provide built-in support for the appropriate encoding.",
      "ddmc_optionC": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionD": "Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Path Traversal: '\\..\\filename' (CWE-29)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Note that some template mechanisms provide built-in support for the appropriate encoding.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-103 (Clickjacking)?\nA.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nB.  Verify software downloads and updates to ensure they have not been modified be adversaries\nC.  Turn off JavaScript, Flash and disable CSS.\nD.  Design: Utilize strict type, character, and encoding enforcement\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-103 (Clickjacking)",
      "ddmc_optionA": "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
      "ddmc_optionB": "Verify software downloads and updates to ensure they have not been modified be adversaries",
      "ddmc_optionC": "Turn off JavaScript, Flash and disable CSS.",
      "ddmc_optionD": "Design: Utilize strict type, character, and encoding enforcement",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Turn off JavaScript, Flash and disable CSS.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-103 (Clickjacking)?\nA.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nB.  Verify software downloads and updates to ensure they have not been modified be adversaries\nC.  Turn off JavaScript, Flash and disable CSS.\nD.  Design: Utilize strict type, character, and encoding enforcement\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Thread Local Storage (T1055.005)?\nA.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Thread Local Storage (T1055.005)",
      "ddmc_optionA": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "What is a method to mitigate Thread Local Storage (T1055.005)?\nA.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Check for Unusual or Exceptional Conditions (CWE-754)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Check for Unusual or Exceptional Conditions (CWE-754)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.",
      "ddmc_optionD": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Check for Unusual or Exceptional Conditions (CWE-754)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.\nD.  This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1021.001 (Remote Desktop Protocol)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.001 (Remote Desktop Protocol)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1021.001 (Remote Desktop Protocol)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Process eviction techniques terminate or remove running process.\nC.  Restricting network traffic originating from any location.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Process eviction techniques terminate or remove running process.\nC.  Restricting network traffic originating from any location.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Search Open Websites/Domains (T1593)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Monitor for changes to environment variables, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates. Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.  Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.(Citations: Autoruns for Windows)\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, Network Device CLI commands may also be used to gather system and network information with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Search Open Websites/Domains (T1593)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Monitor for changes to environment variables, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates. Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.  Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.(Citations: Autoruns for Windows)",
      "ddmc_optionC": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, Network Device CLI commands may also be used to gather system and network information with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "How can you detect Search Open Websites/Domains (T1593)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Monitor for changes to environment variables, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates. Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.  Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.(Citations: Autoruns for Windows)\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, Network Device CLI commands may also be used to gather system and network information with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Msiexec (T1218.007)",
      "ddmc_optionA": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-651 (Eavesdropping)?\nA.  Use secure functions not vulnerable to buffer overflow.\nB.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nC.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nD.  Design: Validate all log data before it is output\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-651 (Eavesdropping)",
      "ddmc_optionA": "Use secure functions not vulnerable to buffer overflow.",
      "ddmc_optionB": "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
      "ddmc_optionC": "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.",
      "ddmc_optionD": "Design: Validate all log data before it is output",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-651 (Eavesdropping)?\nA.  Use secure functions not vulnerable to buffer overflow.\nB.  Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\nC.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nD.  Design: Validate all log data before it is output\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)?\nA.  Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means\nB.  Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.\nC.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\nD.  Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)",
      "ddmc_optionA": "Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means",
      "ddmc_optionB": "Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.",
      "ddmc_optionC": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "ddmc_optionD": "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)?\nA.  Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means\nB.  Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.\nC.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\nD.  Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-551 (Modify Existing Service)?\nA.  Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.\nB.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nC.  Implementation: Perform input validation for all remote content.\nD.  Conduct rigorous threat assessments of suppliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-551 (Modify Existing Service)",
      "ddmc_optionA": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
      "ddmc_optionB": "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
      "ddmc_optionC": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionD": "Conduct rigorous threat assessments of suppliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-551 (Modify Existing Service)?\nA.  Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.\nB.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nC.  Implementation: Perform input validation for all remote content.\nD.  Conduct rigorous threat assessments of suppliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nB.  Do not reuse local administrator account credentials across systems.\nC.  Monitor system and domain logs for abnormal access.\nD.  Purchase potential TypoSquatted domains and forward to legitimate domain.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Captured Tickets (Pass The Ticket) (CAPEC-645)",
      "ddmc_optionA": "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.",
      "ddmc_optionB": "Do not reuse local administrator account credentials across systems.",
      "ddmc_optionC": "Monitor system and domain logs for abnormal access.",
      "ddmc_optionD": "Purchase potential TypoSquatted domains and forward to legitimate domain.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor system and domain logs for abnormal access.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nB.  Do not reuse local administrator account credentials across systems.\nC.  Monitor system and domain logs for abnormal access.\nD.  Purchase potential TypoSquatted domains and forward to legitimate domain.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-641 (Improper Restriction of Names for Files and Other Resources)",
      "ddmc_optionA": "Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.",
      "ddmc_optionB": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionC": "Do not allow users to control names of resources used on the server side.",
      "ddmc_optionD": "Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow users to control names of resources used on the server side.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1558.003 (Kerberoasting)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Protect sensitive information with strong encryption.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Protect sensitive information with strong encryption.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Protect sensitive information with strong encryption.",
      "prompts": [],
      "instruction": "How can you mitigate T1558.003 (Kerberoasting)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Protect sensitive information with strong encryption.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Restricting system configuration modifications to a specific user or group of users.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionC": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Restricting system configuration modifications to a specific user or group of users.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-623 (Compromising Emanations Attack)?\nA.  Authenticate all servers and perform redundant checks when using DNS hostnames.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Configuration: Disable PCIe tunneling to set Security Level to SL3\nD.  Design: Configure the access control correctly.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-623 (Compromising Emanations Attack)",
      "ddmc_optionA": "Authenticate all servers and perform redundant checks when using DNS hostnames.",
      "ddmc_optionB": "Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.",
      "ddmc_optionC": "Configuration: Disable PCIe tunneling to set Security Level to SL3",
      "ddmc_optionD": "Design: Configure the access control correctly.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Authenticate all servers and perform redundant checks when using DNS hostnames.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-623 (Compromising Emanations Attack)?\nA.  Authenticate all servers and perform redundant checks when using DNS hostnames.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Configuration: Disable PCIe tunneling to set Security Level to SL3\nD.  Design: Configure the access control correctly.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Multi-Stage Channels (T1104)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Stage Channels (T1104)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Multi-Stage Channels (T1104)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Safe Mode Boot (T1562.009)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Safe Mode Boot (T1562.009)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Safe Mode Boot (T1562.009)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Event Triggered Execution (T1546)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Event Triggered Execution (T1546)",
      "ddmc_optionA": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate Event Triggered Execution (T1546)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Encrypting a file using a cryptographic key.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Encrypting a file using a cryptographic key.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Forced Deadlock (CAPEC-25)?\nA.  Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.\nB.  Frequent changing of handset and retransmission device\nC.  For competing actions, use well-known libraries which implement synchronization.\nD.  Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Deadlock (CAPEC-25)",
      "ddmc_optionA": "Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.",
      "ddmc_optionB": "Frequent changing of handset and retransmission device",
      "ddmc_optionC": "For competing actions, use well-known libraries which implement synchronization.",
      "ddmc_optionD": "Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For competing actions, use well-known libraries which implement synchronization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Forced Deadlock (CAPEC-25)?\nA.  Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.\nB.  Frequent changing of handset and retransmission device\nC.  For competing actions, use well-known libraries which implement synchronization.\nD.  Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Exposure of Backup File to an Unauthorized Control Sphere (CWE-530)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Exposure of Backup File to an Unauthorized Control Sphere (CWE-530)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Exposure of Backup File to an Unauthorized Control Sphere (CWE-530)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Server Software Component (T1505)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server Software Component (T1505)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "What is a method to mitigate Server Software Component (T1505)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Path Equivalence: '\\multiple\\\\internal\\backslash' (CWE-53)?\nA.  Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.\nB.  Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Equivalence: '\\multiple\\\\internal\\backslash' (CWE-53)",
      "ddmc_optionA": "Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.",
      "ddmc_optionB": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "How can you mitigate Path Equivalence: '\\multiple\\\\internal\\backslash' (CWE-53)?\nA.  Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.\nB.  Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Restoring an entity's access to resources.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Executable Installer File Permissions Weakness (T1574.005)?\nA.  Consider analyzing code signing certificates for features that may be associated with the adversary and/or their developers, such as the thumbprint, algorithm used, validity period, common name, and certificate authority. Malware repositories can also be used to identify additional samples associated with the adversary and identify patterns an adversary has used in procuring code signing certificates. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as Code Signing or Install Root Certificate.\nB.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Monitor for changes to Registry values associated with Windows logon scrips, nameley <code>HKCU\\Environment\\UserInitMprLogonScript</code>. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Executable Installer File Permissions Weakness (T1574.005)",
      "ddmc_optionA": "Consider analyzing code signing certificates for features that may be associated with the adversary and/or their developers, such as the thumbprint, algorithm used, validity period, common name, and certificate authority. Malware repositories can also be used to identify additional samples associated with the adversary and identify patterns an adversary has used in procuring code signing certificates. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as Code Signing or Install Root Certificate.",
      "ddmc_optionB": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
      "ddmc_optionC": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Monitor for changes to Registry values associated with Windows logon scrips, nameley <code>HKCU\\Environment\\UserInitMprLogonScript</code>. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Executable Installer File Permissions Weakness (T1574.005)?\nA.  Consider analyzing code signing certificates for features that may be associated with the adversary and/or their developers, such as the thumbprint, algorithm used, validity period, common name, and certificate authority. Malware repositories can also be used to identify additional samples associated with the adversary and identify patterns an adversary has used in procuring code signing certificates. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as Code Signing or Install Root Certificate.\nB.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Monitor for changes to Registry values associated with Windows logon scrips, nameley <code>HKCU\\Environment\\UserInitMprLogonScript</code>. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1110.004 (Credential Stuffing)?\nA.  Detection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1110.004 (Credential Stuffing)",
      "ddmc_optionA": "Detection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.",
      "prompts": [],
      "instruction": "How can you mitigate T1110.004 (Credential Stuffing)?\nA.  Detection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  }
]