[
  {
    "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Not Using Input Validation Framework (CWE-554)?\nA.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "ASP.NET Misconfiguration: Not Using Input Validation Framework (CWE-554)",
      "ddmc_optionA": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate ASP.NET Misconfiguration: Not Using Input Validation Framework (CWE-554)?\nA.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: Phone number fields contain only valid characters in phone numbers Boolean values are only \"T\" or \"F\" Free-form strings are of a reasonable length and composition\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Replacing old software on a computer system component.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Replacing old software on a computer system component.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Replacing old software on a computer system component.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Replacing old software on a computer system component.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exploitation for Privilege Escalation (T1068)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmc_optionA": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exploitation for Privilege Escalation (T1068)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Domain Fronting (T1090.004)?\nA.  Determining if a URL is benign or malicious by analyzing the URL or its components.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an software configuration.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Determining if a URL is benign or malicious by analyzing the URL or its components.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Domain Fronting (T1090.004)?\nA.  Determining if a URL is benign or malicious by analyzing the URL or its components.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an software configuration.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Incomplete List of Disallowed Inputs (CWE-184)?\nA.  Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.\nB.  Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.\nC.  Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Incomplete List of Disallowed Inputs (CWE-184)",
      "ddmc_optionA": "Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.",
      "ddmc_optionB": "Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.",
      "ddmc_optionC": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Incomplete List of Disallowed Inputs (CWE-184)?\nA.  Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.\nB.  Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.\nC.  Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Safe Mode Boot (T1562.009)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Safe Mode Boot (T1562.009)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate Safe Mode Boot (T1562.009)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Output Neutralization for Logs (CWE-117)?\nA.  Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Output Neutralization for Logs (CWE-117)",
      "ddmc_optionA": "Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionD": "During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Output Neutralization for Logs (CWE-117)?\nA.  Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  During implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Terminating a running application process on a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Terminating a running application process on a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Terminating a running application process on a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Software inventorying identifies and records the software items in the organization's architecture.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Encrypting a file using a cryptographic key.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionB": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Software inventorying identifies and records the software items in the organization's architecture.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Encrypting a file using a cryptographic key.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)?\nA.  Implementation: Implement email filtering solutions on mail server or on MTA, relay server.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)",
      "ddmc_optionA": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server.",
      "ddmc_optionB": "Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.",
      "ddmc_optionC": "Use secure functions not vulnerable to buffer overflow.",
      "ddmc_optionD": "Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server.",
      "prompts": [],
      "instruction": "How can you mitigate Using Meta-characters in E-mail Headers to Inject Malicious Payloads (CAPEC-41)?\nA.  Implementation: Implement email filtering solutions on mail server or on MTA, relay server.\nB.  Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.\nC.  Use secure functions not vulnerable to buffer overflow.\nD.  Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Indicator Blocking (T1562.006)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Indicator Blocking (T1562.006)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Indicator Blocking (T1562.006)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  File eviction techniques evict files from system storage.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Restricting network traffic originating from untrusted networks destined towards a private host or enclave.",
      "ddmc_optionB": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  File eviction techniques evict files from system storage.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Lack of Administrator Control over Security (CWE-671)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Lack of Administrator Control over Security (CWE-671)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "ddmc_optionB": "Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Lack of Administrator Control over Security (CWE-671)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1014 (Rootkit)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Cryptographically verifying firmware integrity.\nC.  File eviction techniques evict files from system storage.\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1014 (Rootkit)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Cryptographically verifying firmware integrity.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Cryptographically verifying firmware integrity.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1014 (Rootkit)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Cryptographically verifying firmware integrity.\nC.  File eviction techniques evict files from system storage.\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1574.009 (Path Interception by Unquoted Path)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.009 (Path Interception by Unquoted Path)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionD": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1574.009 (Path Interception by Unquoted Path)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nD.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an entity's access to resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmc_optionA": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "prompts": [],
      "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an entity's access to resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Security Version Number Mutable to Older Versions (CWE-1328)",
      "ddmc_optionA": "Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.",
      "prompts": [],
      "instruction": "What is a method to detect Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Mutability of stored security version numbers and programming with older firmware images should be part of automated testing.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Missing Release of Resource after Effective Lifetime (CWE-772)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.\nC.  It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.\nD.  Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Release of Resource after Effective Lifetime (CWE-772)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
      "ddmc_optionC": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.",
      "ddmc_optionD": "Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Missing Release of Resource after Effective Lifetime (CWE-772)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.\nC.  It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.\nD.  Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Domain Accounts (T1078.002)?\nA.  Analyzing a Container Image with respect to a set of policies.\nB.  Restoring a user account's access to resources.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Analyzing a Container Image with respect to a set of policies.",
      "ddmc_optionB": "Restoring a user account's access to resources.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring a user account's access to resources.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Domain Accounts (T1078.002)?\nA.  Analyzing a Container Image with respect to a set of policies.\nB.  Restoring a user account's access to resources.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Network Trust Dependencies (T1590.003)",
      "ddmc_optionA": "Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "ddmc_optionB": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).",
      "ddmc_optionD": "Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "What is a method to detect Network Trust Dependencies (T1590.003)?\nA.  Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\nD.  Monitor processes and command-line arguments to see if critical processes are terminated or stop running. Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links. Alterations to the service binary path or the service startup type changed to disabled may be suspicious. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citations: Talos Olympic Destroyer 2018)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Using biological measures in order to authenticate a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Using biological measures in order to authenticate a user.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Using biological measures in order to authenticate a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Restoring a file for an entity to access.\nB.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Space after Filename (T1036.006)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring a file for an entity to access.",
      "prompts": [],
      "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Restoring a file for an entity to access.\nB.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Forced Authentication (T1187)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Set and enforce secure password policies for accounts.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Authentication (T1187)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Set and enforce secure password policies for accounts.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Forced Authentication (T1187)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Set and enforce secure password policies for accounts.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Signal Handler Use of a Non-reentrant Function (CWE-479)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Signal Handler Use of a Non-reentrant Function (CWE-479)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionC": "For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Signal Handler Use of a Non-reentrant Function (CWE-479)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  For hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Compiled HTML File (T1218.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nD.  Analyzing the properties of file create system call invocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionD": "Analyzing the properties of file create system call invocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the properties of file create system call invocations.",
      "prompts": [],
      "instruction": "How can you mitigate Compiled HTML File (T1218.001)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nD.  Analyzing the properties of file create system call invocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1033 (System Owner/User Discovery)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1033 (System Owner/User Discovery)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1033 (System Owner/User Discovery)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Encrypting a file using a cryptographic key.\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Network Connections Discovery (T1049)?\nA.  Modifying system configuration to increase password strength.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Network Connections Discovery (T1049)",
      "ddmc_optionA": "Modifying system configuration to increase password strength.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.",
      "ddmc_optionD": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate System Network Connections Discovery (T1049)?\nA.  Modifying system configuration to increase password strength.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Leveraging Race Conditions (CAPEC-26)?\nA.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nB.  Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.\nC.  Pay attention to concurrency problems related to the access of resources.\nD.  Ensure all input content that is delivered to client is sanitized against an acceptable content specification.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Leveraging Race Conditions (CAPEC-26)",
      "ddmc_optionA": "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "ddmc_optionB": "Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.",
      "ddmc_optionC": "Pay attention to concurrency problems related to the access of resources.",
      "ddmc_optionD": "Ensure all input content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Pay attention to concurrency problems related to the access of resources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Leveraging Race Conditions (CAPEC-26)?\nA.  If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nB.  Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.\nC.  Pay attention to concurrency problems related to the access of resources.\nD.  Ensure all input content that is delivered to client is sanitized against an acceptable content specification.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Captured Tickets (Pass The Ticket) (CAPEC-645)",
      "ddmc_optionA": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.",
      "ddmc_optionB": "Enforce regular patching of software.",
      "ddmc_optionC": "Design: Enforce principle of least privilege",
      "ddmc_optionD": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Captured Tickets (Pass The Ticket) (CAPEC-645)?\nA.  Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.\nB.  Enforce regular patching of software.\nC.  Design: Enforce principle of least privilege\nD.  Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate J2EE Bad Practices: Direct Use of Threads (CWE-383)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nC.  For EJB, use framework approaches for parallel execution, instead of using threads.\nD.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "J2EE Bad Practices: Direct Use of Threads (CWE-383)",
      "ddmc_optionA": "Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.",
      "ddmc_optionB": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionC": "For EJB, use framework approaches for parallel execution, instead of using threads.",
      "ddmc_optionD": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For EJB, use framework approaches for parallel execution, instead of using threads.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate J2EE Bad Practices: Direct Use of Threads (CWE-383)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nC.  For EJB, use framework approaches for parallel execution, instead of using threads.\nD.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spyware (CWE-512)?\nA.  Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.\nB.  Use spyware detection and removal software.\nC.  Refactor your code to avoid using reflection.\nD.  For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spyware (CWE-512)",
      "ddmc_optionA": "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.",
      "ddmc_optionB": "Use spyware detection and removal software.",
      "ddmc_optionC": "Refactor your code to avoid using reflection.",
      "ddmc_optionD": "For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use spyware detection and removal software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spyware (CWE-512)?\nA.  Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.\nB.  Use spyware detection and removal software.\nC.  Refactor your code to avoid using reflection.\nD.  For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Serializable Class Containing Sensitive Data (CWE-499)?\nA.  Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.\nC.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nD.  When sensitive information is sent, use the POST method (e.g. registration form).\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serializable Class Containing Sensitive Data (CWE-499)",
      "ddmc_optionA": "Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.",
      "ddmc_optionC": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
      "ddmc_optionD": "When sensitive information is sent, use the POST method (e.g. registration form).",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.",
      "prompts": [],
      "instruction": "How can you mitigate Serializable Class Containing Sensitive Data (CWE-499)?\nA.  Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.\nC.  In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nD.  When sensitive information is sent, use the POST method (e.g. registration form).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Reliance on Cookies without Validation and Integrity Checking (CWE-565)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Reliance on Cookies without Validation and Integrity Checking (CWE-565)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Reliance on Cookies without Validation and Integrity Checking (CWE-565)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Cost effective for partial coverage: Formal Methods / Correct-By-Construction\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary / Bytecode Quality Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1134.003 (Make and Impersonate Token)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1134.003 (Make and Impersonate Token)",
      "ddmc_optionA": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionB": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1134.003 (Make and Impersonate Token)?\nA.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nB.  Perform regular software updates to mitigate exploitation risk.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing changes in service binary files by comparing to a source of truth.",
      "prompts": [],
      "instruction": "How can you mitigate Services File Permissions Weakness (T1574.010)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Analyzing changes in service binary files by comparing to a source of truth.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Time Discovery (T1124)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Time Discovery (T1124)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Exploitation of Thunderbolt Protection Flaws (CAPEC-665)?\nA.  An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.\nB.  The login attempts use passwords that have been used previously by the user account in question.\nC.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\nD.  Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Exploitation of Thunderbolt Protection Flaws (CAPEC-665)",
      "ddmc_optionA": "An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.",
      "ddmc_optionB": "The login attempts use passwords that have been used previously by the user account in question.",
      "ddmc_optionC": "Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.",
      "ddmc_optionD": "Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Exploitation of Thunderbolt Protection Flaws (CAPEC-665)?\nA.  An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.\nB.  The login attempts use passwords that have been used previously by the user account in question.\nC.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\nD.  Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restricting network traffic originating from any location.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Restricting network traffic originating from any location.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate External Proxy (T1090.002)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Proxy (T1090.002)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "How can you mitigate External Proxy (T1090.002)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.\nB.  Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\nC.  Passively monitor cellular network connection for real-time threat detection and logging for manual review.\nD.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Rogue Base Station (CAPEC-617)",
      "ddmc_optionA": "Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.",
      "ddmc_optionB": "Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.",
      "ddmc_optionC": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "ddmc_optionD": "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "prompts": [],
      "instruction": "How can you mitigate Cellular Rogue Base Station (CAPEC-617)?\nA.  Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.\nB.  Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\nC.  Passively monitor cellular network connection for real-time threat detection and logging for manual review.\nD.  Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Subvert Trust Controls (T1553)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Subvert Trust Controls (T1553)",
      "ddmc_optionA": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Subvert Trust Controls (T1553)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  Emulating instructions in a file looking for specific patterns.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1176 (Browser Extensions)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1176 (Browser Extensions)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate T1176 (Browser Extensions)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Local Data Staging (T1074.001)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Local Data Staging (T1074.001)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Accounts (T1078.002)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  File eviction techniques evict files from system storage.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Accounts (T1078.002)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  File eviction techniques evict files from system storage.\nC.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Data Transfer Size Limits (T1030)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data Transfer Size Limits (T1030)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Data Transfer Size Limits (T1030)?\nA.  Encrypting a file using a cryptographic key.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.",
      "ddmc_optionC": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection') (CWE-95)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nC.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detecting any suspicious changes to files in a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring a file for an entity to access.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detects processes that modify, change, or replace their own code at runtime.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Agent (T1543.001)",
      "ddmc_optionA": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Agent (T1543.001)?\nA.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Detects processes that modify, change, or replace their own code at runtime.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Filter Failure through Buffer Overflow (CAPEC-24)?\nA.  Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\nB.  Operational: Use OS-level preventative functionality. Not a complete solution.\nC.  Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.\nD.  Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Filter Failure through Buffer Overflow (CAPEC-24)",
      "ddmc_optionA": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
      "ddmc_optionB": "Operational: Use OS-level preventative functionality. Not a complete solution.",
      "ddmc_optionC": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
      "ddmc_optionD": "Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Filter Failure through Buffer Overflow (CAPEC-24)?\nA.  Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\nB.  Operational: Use OS-level preventative functionality. Not a complete solution.\nC.  Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.\nD.  Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1090.003 (Multi-hop Proxy)?\nA.  Restricting network traffic originating from any location.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1090.003 (Multi-hop Proxy)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate T1090.003 (Multi-hop Proxy)?\nA.  Restricting network traffic originating from any location.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1568 (Dynamic Resolution)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1568 (Dynamic Resolution)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-551 (Modify Existing Service)?\nA.  Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.\nB.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nC.  Implementation: Perform input validation for all remote content.\nD.  Conduct rigorous threat assessments of suppliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-551 (Modify Existing Service)",
      "ddmc_optionA": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
      "ddmc_optionB": "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
      "ddmc_optionC": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionD": "Conduct rigorous threat assessments of suppliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-551 (Modify Existing Service)?\nA.  Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.\nB.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nC.  Implementation: Perform input validation for all remote content.\nD.  Conduct rigorous threat assessments of suppliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1011.001 (Exfiltration Over Bluetooth)",
      "ddmc_optionA": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate T1011.001 (Exfiltration Over Bluetooth)?\nA.  Perform regular software updates to mitigate exploitation risk.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-532 (Altered Installed BIOS)?\nA.  Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-532 (Altered Installed BIOS)",
      "ddmc_optionA": "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
      "ddmc_optionB": "Require SSL for update channels and implement certificate transparency based verification.",
      "ddmc_optionC": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionD": "Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Require SSL for update channels and implement certificate transparency based verification.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-532 (Altered Installed BIOS)?\nA.  Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\nB.  Require SSL for update channels and implement certificate transparency based verification.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Omitted Break Statement in Switch (CWE-484)?\nA.  Force the administrator to change the credential upon installation.\nB.  Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.\nC.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\nD.  The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Omitted Break Statement in Switch (CWE-484)",
      "ddmc_optionA": "Force the administrator to change the credential upon installation.",
      "ddmc_optionB": "Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.",
      "ddmc_optionC": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
      "ddmc_optionD": "The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Omitted Break Statement in Switch (CWE-484)?\nA.  Force the administrator to change the credential upon installation.\nB.  Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.\nC.  Programming languages and supporting technologies might be chosen which are not subject to these issues.\nD.  The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Default Credentials (CWE-1392)?\nA.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nD.  Perform a type check before interpreting an object.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
      "ddmc_optionD": "Perform a type check before interpreting an object.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Default Credentials (CWE-1392)?\nA.  Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nD.  Perform a type check before interpreting an object.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Using biological measures in order to authenticate a user.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Physical link mapping identifies and models the link connectivity of the network devices within a physical network.",
      "ddmc_optionC": "Using biological measures in order to authenticate a user.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rogue Domain Controller (T1207)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Physical link mapping identifies and models the link connectivity of the network devices within a physical network.\nC.  Using biological measures in order to authenticate a user.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Use of Incorrect Byte Ordering (CWE-198)?\nA.  Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.\nB.  Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Incorrect Byte Ordering (CWE-198)",
      "ddmc_optionA": "Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.",
      "ddmc_optionB": "Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.",
      "prompts": [],
      "instruction": "How can you detect Use of Incorrect Byte Ordering (CWE-198)?\nA.  Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.\nB.  Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Influence Perception of Authority (CAPEC-421)?\nA.  Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.\nB.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Influence Perception of Authority (CAPEC-421)",
      "ddmc_optionA": "Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.",
      "ddmc_optionB": "Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.",
      "ddmc_optionC": "Digitize documents and cryptographically sign them to verify authenticity.",
      "ddmc_optionD": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "prompts": [],
      "instruction": "How can you mitigate Influence Perception of Authority (CAPEC-421)?\nA.  Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.\nB.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\nC.  Digitize documents and cryptographically sign them to verify authenticity.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rooting SIM Cards (CAPEC-614)?\nA.  Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.\nB.  Prevent adversary access to privileged accounts necessary to install rootkits.\nC.  Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\nD.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rooting SIM Cards (CAPEC-614)",
      "ddmc_optionA": "Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.",
      "ddmc_optionB": "Prevent adversary access to privileged accounts necessary to install rootkits.",
      "ddmc_optionC": "Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.",
      "ddmc_optionD": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "prompts": [],
      "instruction": "What is a method to mitigate Rooting SIM Cards (CAPEC-614)?\nA.  Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.\nB.  Prevent adversary access to privileged accounts necessary to install rootkits.\nC.  Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\nD.  Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Accounts (T1078.002)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Accounts (T1078.002)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Using biological measures in order to authenticate a user.\nD.  Process eviction techniques terminate or remove running process.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Using biological measures in order to authenticate a user.",
      "ddmc_optionD": "Process eviction techniques terminate or remove running process.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Process eviction techniques terminate or remove running process.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Using biological measures in order to authenticate a user.\nD.  Process eviction techniques terminate or remove running process.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Modifying system configuration to increase password strength.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Modifying system configuration to increase password strength.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Modifying system configuration to increase password strength.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Archive via Utility (T1560.001)?\nA.  Replacing old software on a computer system component.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Replacing old software on a computer system component.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Archive via Utility (T1560.001)?\nA.  Replacing old software on a computer system component.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Emulating instructions in a file looking for specific patterns.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1091 (Replication Through Removable Media)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1091 (Replication Through Removable Media)",
      "ddmc_optionA": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1091 (Replication Through Removable Media)?\nA.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Blocking a lookup based on the query's domain name value.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking a lookup based on the query's domain name value.",
      "prompts": [],
      "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking a lookup based on the query's domain name value.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Set and enforce secure password policies for accounts.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Transport Agent (T1505.002)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Transport Agent (T1505.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Set and enforce secure password policies for accounts.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_optionC": "Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "How can you mitigate Stored Data Manipulation (T1565.001)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Restricting network traffic originating from any location.\nC.  Modifying system configuration to increase password strength.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "Modifying system configuration to increase password strength.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate Dynamic Resolution (T1568)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Restricting network traffic originating from any location.\nC.  Modifying system configuration to increase password strength.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Restricting system configuration modifications to a specific user or group of users.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionC": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Restricting system configuration modifications to a specific user or group of users.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  File eviction techniques evict files from system storage.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Replicating Malicious Code (Virus or Worm) (CWE-509)?\nA.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nB.  Perform input validation on user data.\nC.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\nD.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replicating Malicious Code (Virus or Worm) (CWE-509)",
      "ddmc_optionA": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.",
      "ddmc_optionB": "Perform input validation on user data.",
      "ddmc_optionC": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.",
      "ddmc_optionD": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.",
      "prompts": [],
      "instruction": "How can you mitigate Replicating Malicious Code (Virus or Worm) (CWE-509)?\nA.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nB.  Perform input validation on user data.\nC.  Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\nD.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Function with Inconsistent Implementations (CWE-474)?\nA.  Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Function with Inconsistent Implementations (CWE-474)",
      "ddmc_optionA": "Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Function with Inconsistent Implementations (CWE-474)?\nA.  Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Security lock bit protections must be reviewed for design inconsistency and common weaknesses. Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Login Hook (T1037.002)?\nA.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\nB.  Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)\nC.  `System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.\nD.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Login Hook (T1037.002)",
      "ddmc_optionA": "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.",
      "ddmc_optionB": "Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)",
      "ddmc_optionC": "`System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.",
      "ddmc_optionD": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Login Hook (T1037.002)?\nA.  Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\nB.  Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)\nC.  `System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.\nD.  Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1025 (Data from Removable Media)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1025 (Data from Removable Media)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmc_optionC": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1025 (Data from Removable Media)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nC.  Detecting any suspicious changes to files in a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Covert Channel (CWE-514)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Covert Channel (CWE-514)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Covert Channel (CWE-514)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Blocking a lookup based on the query's domain name value.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Blocking a lookup based on the query's domain name value.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionD": "Using kernel-level capabilities to isolate processes.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CMSTP (T1218.003)?\nA.  Blocking a lookup based on the query's domain name value.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Software inventorying identifies and records the software items in the organization's architecture.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Network Boundary Bridging (T1599)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Boundary Bridging (T1599)",
      "ddmc_optionA": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "What is a method to mitigate Network Boundary Bridging (T1599)?\nA.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nB.  Manage the creation, modification, use, and permissions associated to user accounts.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate UNIX Hard Link (CWE-62)?\nA.  The system should account for security primitive behavior when cooled outside standard temperatures.\nB.  Perform a type check before interpreting files.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nD.  Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "UNIX Hard Link (CWE-62)",
      "ddmc_optionA": "The system should account for security primitive behavior when cooled outside standard temperatures.",
      "ddmc_optionB": "Perform a type check before interpreting files.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionD": "Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
      "prompts": [],
      "instruction": "What is a method to mitigate UNIX Hard Link (CWE-62)?\nA.  The system should account for security primitive behavior when cooled outside standard temperatures.\nB.  Perform a type check before interpreting files.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nD.  Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Taint Shared Content (T1080)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restricting network traffic originating from any location.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Taint Shared Content (T1080)",
      "ddmc_optionA": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restricting network traffic originating from any location.",
      "ddmc_optionC": "File eviction techniques evict files from system storage.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Deploying a network resource for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "How can you mitigate Taint Shared Content (T1080)?\nA.  Deploying a network resource for the purposes of deceiving an adversary.\nB.  Restricting network traffic originating from any location.\nC.  File eviction techniques evict files from system storage.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Windows Admin Shares with Stolen Credentials (CAPEC-561)",
      "ddmc_optionA": "Enforce regular patching of software.",
      "ddmc_optionB": "Design: Enforce principle of least privilege.",
      "ddmc_optionC": "Do not allow accounts to be a local administrator on more than one system.",
      "ddmc_optionD": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow accounts to be a local administrator on more than one system.",
      "prompts": [],
      "instruction": "How can you mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nA.  Enforce regular patching of software.\nB.  Design: Enforce principle of least privilege.\nC.  Do not allow accounts to be a local administrator on more than one system.\nD.  An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Service Discovery (T1007)?\nA.  Encrypting a file using a cryptographic key.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Service Discovery (T1007)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Service Discovery (T1007)?\nA.  Encrypting a file using a cryptographic key.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Permissions Modification (T1222)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Service (T1102)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Web Service (T1102)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Conduct detailed vendor assessment before acquiring COTS hardware.\nB.  Implementation: Use type conversions such as JDBC prepared statements.\nC.  Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables\nD.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Delimiters (CAPEC-15)",
      "ddmc_optionA": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "ddmc_optionB": "Implementation: Use type conversions such as JDBC prepared statements.",
      "ddmc_optionC": "Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables",
      "ddmc_optionD": "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implementation: Use type conversions such as JDBC prepared statements.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Command Delimiters (CAPEC-15)?\nA.  Conduct detailed vendor assessment before acquiring COTS hardware.\nB.  Implementation: Use type conversions such as JDBC prepared statements.\nC.  Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables\nD.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Controlling access to local computer system resources with kernel-level capabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Control Panel (T1218.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Controlling access to local computer system resources with kernel-level capabilities.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cloud Service Dashboard (T1538)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  The process of temporarily disabling user accounts on a system or domain.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Service Dashboard (T1538)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Cloud Service Dashboard (T1538)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  The process of temporarily disabling user accounts on a system or domain.\nC.  Encrypting a file using a cryptographic key.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate File and Directory Discovery (T1083)?\nA.  Restoring an software configuration.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Discovery (T1083)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate File and Directory Discovery (T1083)?\nA.  Restoring an software configuration.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Implement access-control checks in the bridge for both upstream and downstream transactions.\nB.  Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.\nC.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Access Control in Fabric Bridge (CWE-1317)",
      "ddmc_optionA": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_optionB": "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.",
      "ddmc_optionC": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implement access-control checks in the bridge for both upstream and downstream transactions.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Access Control in Fabric Bridge (CWE-1317)?\nA.  Implement access-control checks in the bridge for both upstream and downstream transactions.\nB.  Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.\nC.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring the existence of or changes to Domain User Accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Monitoring the existence of or changes to Domain User Accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Netsh Helper DLL (T1546.007)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring the existence of or changes to Domain User Accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate File and Directory Discovery (T1083)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Discovery (T1083)",
      "ddmc_optionA": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate File and Directory Discovery (T1083)?\nA.  Restricting system configuration modifications to a specific user or group of users.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nB.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]\nC.  Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.\nD.  Remove any Shells accessible under the web root folder and children directories.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Shell in Externally Accessible Directory (CWE-553)",
      "ddmc_optionA": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionB": "If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]",
      "ddmc_optionC": "Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.",
      "ddmc_optionD": "Remove any Shells accessible under the web root folder and children directories.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove any Shells accessible under the web root folder and children directories.",
      "prompts": [],
      "instruction": "How can you mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nB.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]\nC.  Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.\nD.  Remove any Shells accessible under the web root folder and children directories.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Use of Default Credentials (CWE-1392)?\nA.  Some compiler instrumentation tools such as AddressSanitizer (ASan) can indirectly detect some instances of this weakness.\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using disassembled code, look at the associated instructions and see if any of them appear to be comparing the input to a fixed string or value.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmc_optionA": "Some compiler instrumentation tools such as AddressSanitizer (ASan) can indirectly detect some instances of this weakness.",
      "ddmc_optionB": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using disassembled code, look at the associated instructions and see if any of them appear to be comparing the input to a fixed string or value.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Some compiler instrumentation tools such as AddressSanitizer (ASan) can indirectly detect some instances of this weakness.",
      "prompts": [],
      "instruction": "What is a method to detect Use of Default Credentials (CWE-1392)?\nA.  Some compiler instrumentation tools such as AddressSanitizer (ASan) can indirectly detect some instances of this weakness.\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Using disassembled code, look at the associated instructions and see if any of them appear to be comparing the input to a fixed string or value.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionD": "This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.",
      "prompts": [],
      "instruction": "What is a method to detect CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nD.  This weakness can be found using automated static analysis once a developer has indicated which code paths are critical to protect.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "What is a method to mitigate Spearphishing via Service (T1566.003)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Emulating instructions in a file looking for specific patterns.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Passive physical link mapping only listens to network traffic as a means to map the physical layer.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "How can you mitigate Spearphishing via Service (T1566.003)?\nA.  Passive physical link mapping only listens to network traffic as a means to map the physical layer.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Fast Flux DNS (T1568.001)?\nA.  In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.\nB.  Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\nC.  Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.\nD.  Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Fast Flux DNS (T1568.001)",
      "ddmc_optionA": "In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.",
      "ddmc_optionB": "Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
      "ddmc_optionC": "Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.",
      "ddmc_optionD": "Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.",
      "prompts": [],
      "instruction": "What is a method to detect Fast Flux DNS (T1568.001)?\nA.  In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.\nB.  Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\nC.  Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.\nD.  Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Emond (T1546.014)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Emond (T1546.014)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "What is a method to mitigate Emond (T1546.014)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1498.002 (Reflection Amplification)",
      "ddmc_optionA": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1498.002 (Reflection Amplification)?\nA.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Analyzing the duration of user sessions in order to detect unauthorized activity.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Passing Mutable Objects to an Untrusted Method (CWE-374)?\nA.  In Windows environments, use proper access control for the associated device or device namespace. See References.\nB.  Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Pass in data which should not be altered as constant or immutable.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Passing Mutable Objects to an Untrusted Method (CWE-374)",
      "ddmc_optionA": "In Windows environments, use proper access control for the associated device or device namespace. See References.",
      "ddmc_optionB": "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.",
      "ddmc_optionC": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmc_optionD": "Pass in data which should not be altered as constant or immutable.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Pass in data which should not be altered as constant or immutable.",
      "prompts": [],
      "instruction": "What is a method to mitigate Passing Mutable Objects to an Untrusted Method (CWE-374)?\nA.  In Windows environments, use proper access control for the associated device or device namespace. See References.\nB.  Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.\nC.  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\nD.  Pass in data which should not be altered as constant or immutable.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') (CWE-96)?\nA.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Resolve all URIs to absolute or canonical representations before processing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') (CWE-96)",
      "ddmc_optionA": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Resolve all URIs to absolute or canonical representations before processing.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection') (CWE-96)?\nA.  Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Resolve all URIs to absolute or canonical representations before processing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Restoring an entity's access to resources.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Restoring an entity's access to resources.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Modifying system configuration to increase password strength.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1518.001 (Security Software Discovery)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1518.001 (Security Software Discovery)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1518.001 (Security Software Discovery)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1528 (Steal Application Access Token)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Analysis of any system process startup configuration.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1528 (Steal Application Access Token)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Analysis of any system process startup configuration.",
      "ddmc_optionC": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1528 (Steal Application Access Token)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Analysis of any system process startup configuration.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Use of Uninitialized Variable (CWE-457)?\nA.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nB.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\nC.  Refactor your program so that you do not have to dynamically generate code.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Uninitialized Variable (CWE-457)",
      "ddmc_optionA": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
      "ddmc_optionB": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.",
      "ddmc_optionC": "Refactor your program so that you do not have to dynamically generate code.",
      "ddmc_optionD": "The choice could be made to use a language that is not susceptible to these issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "The choice could be made to use a language that is not susceptible to these issues.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Use of Uninitialized Variable (CWE-457)?\nA.  Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nB.  Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\nC.  Refactor your program so that you do not have to dynamically generate code.\nD.  The choice could be made to use a language that is not susceptible to these issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1110.003 (Password Spraying)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1110.003 (Password Spraying)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Set and enforce secure password policies for accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Set and enforce secure password policies for accounts.",
      "prompts": [],
      "instruction": "How can you mitigate T1110.003 (Password Spraying)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Set and enforce secure password policies for accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  File eviction techniques evict files from system storage.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  File eviction techniques evict files from system storage.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restoring a file for an entity to access.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restoring a file for an entity to access.\nC.  A file created for the purposes of deceiving an adversary.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Password in Configuration File (CWE-260)?\nA.  Avoid storing passwords in easily accessible locations.\nB.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nC.  Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Password in Configuration File (CWE-260)",
      "ddmc_optionA": "Avoid storing passwords in easily accessible locations.",
      "ddmc_optionB": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_optionC": "Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Avoid storing passwords in easily accessible locations.",
      "prompts": [],
      "instruction": "What is a method to mitigate Password in Configuration File (CWE-260)?\nA.  Avoid storing passwords in easily accessible locations.\nB.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nC.  Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nB.  Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\nC.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "ddmc_optionA": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)",
      "ddmc_optionB": "Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.",
      "ddmc_optionC": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "ddmc_optionD": "Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Compromise Software Dependencies and Development Tools (T1195.001)?\nA.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nB.  Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\nC.  Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Rogue Domain Controller (T1207)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\nB.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\nC.  Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)",
      "ddmc_optionB": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)",
      "ddmc_optionC": "Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)",
      "prompts": [],
      "instruction": "What is a method to detect Rogue Domain Controller (T1207)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.(Citations: University of Birmingham C2)\nB.  Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.   DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.   Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging.  A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.(Citations: GitHub DCSYNCMonitor, DCShadow Blog, DCShadow Blog, Microsoft DirSync, ADDSecurity DCShadow Feb 2018, DCShadow Blog, ADDSecurity DCShadow Feb 2018)\nC.  Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Assigning instead of Comparing (CWE-481)?\nA.  Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.\nB.  Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\nC.  Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.\nD.  Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Assigning instead of Comparing (CWE-481)",
      "ddmc_optionA": "Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.",
      "ddmc_optionB": "Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.",
      "ddmc_optionC": "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.",
      "ddmc_optionD": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
      "prompts": [],
      "instruction": "How can you mitigate Assigning instead of Comparing (CWE-481)?\nA.  Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.\nB.  Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\nC.  Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.\nD.  Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring the data in a database.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "File eviction techniques evict files from system storage.",
      "ddmc_optionC": "Restoring the data in a database.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  File eviction techniques evict files from system storage.\nC.  Restoring the data in a database.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.\nC.  Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nD.  Refactor your code to avoid using reflection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.",
      "ddmc_optionC": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.",
      "ddmc_optionD": "Refactor your code to avoid using reflection.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.",
      "prompts": [],
      "instruction": "How can you mitigate Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.\nC.  Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nD.  Refactor your code to avoid using reflection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Process eviction techniques terminate or remove running process.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Restoring an entity's access to resources.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Restoring an entity's access to resources.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Process eviction techniques terminate or remove running process.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Restoring an entity's access to resources.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Steganography (T1027.003)?\nA.  Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.\nB.  Malicious XDG autostart entries may be detected by auditing file creation and modification events within the <code>/etc/xdg/autostart</code> and <code>~/.config/autostart</code> directories. Depending on individual configurations, defenders may need to query the environment variables <code>$XDG_CONFIG_HOME</code> or <code>$XDG_CONFIG_DIRS</code> to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline. Suspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.\nC.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\nD.  When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as Tor) or known adversary infrastructure that uses this technique. In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers. Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization. Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted. Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Steganography (T1027.003)",
      "ddmc_optionA": "Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.",
      "ddmc_optionB": "Malicious XDG autostart entries may be detected by auditing file creation and modification events within the <code>/etc/xdg/autostart</code> and <code>~/.config/autostart</code> directories. Depending on individual configurations, defenders may need to query the environment variables <code>$XDG_CONFIG_HOME</code> or <code>$XDG_CONFIG_DIRS</code> to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline. Suspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.",
      "ddmc_optionC": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
      "ddmc_optionD": "When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as Tor) or known adversary infrastructure that uses this technique. In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers. Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization. Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted. Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.",
      "prompts": [],
      "instruction": "What is a method to detect Steganography (T1027.003)?\nA.  Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.\nB.  Malicious XDG autostart entries may be detected by auditing file creation and modification events within the <code>/etc/xdg/autostart</code> and <code>~/.config/autostart</code> directories. Depending on individual configurations, defenders may need to query the environment variables <code>$XDG_CONFIG_HOME</code> or <code>$XDG_CONFIG_DIRS</code> to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline. Suspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.\nC.  Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\nD.  When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as Tor) or known adversary infrastructure that uses this technique. In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers. Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization. Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted. Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Application Layer Protocol (T1095)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Logon Script (Windows) (T1037.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Logon Script (Windows) (T1037.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Indicator Blocking (T1562.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Indicator Blocking (T1562.006)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "How can you mitigate Indicator Blocking (T1562.006)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-481 (Assigning instead of Comparing)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-481 (Assigning instead of Comparing)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling",
      "ddmc_optionB": "This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-481 (Assigning instead of Comparing)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling\nB.  This weakness can be found easily using static analysis. However in some cases an operator might appear to be incorrect, but is actually correct and reflects unusual logic within the program.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dynamic Resolution (T1568)?\nA.  Blocking a reverse lookup based on the query's IP address value.\nB.  Encrypting a file using a cryptographic key.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Blocking a reverse lookup based on the query's IP address value.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Blocking a reverse lookup based on the query's IP address value.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dynamic Resolution (T1568)?\nA.  Blocking a reverse lookup based on the query's IP address value.\nB.  Encrypting a file using a cryptographic key.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.001 (Launch Agent)",
      "ddmc_optionA": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restoring a file for an entity to access.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Event Triggered Execution (T1546)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Event Triggered Execution (T1546)",
      "ddmc_optionA": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate Event Triggered Execution (T1546)?\nA.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiler Removal of Code to Clear Buffers (CWE-14)?\nA.  Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.\nB.  Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.\nC.  Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.\nD.  When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiler Removal of Code to Clear Buffers (CWE-14)",
      "ddmc_optionA": "Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.",
      "ddmc_optionB": "Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.",
      "ddmc_optionC": "Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.",
      "ddmc_optionD": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiler Removal of Code to Clear Buffers (CWE-14)?\nA.  Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.\nB.  Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.\nC.  Continue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.\nD.  When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Scheduled Task (T1053.005)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Initiating a host's shutdown sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Scheduled Task (T1053.005)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Employing file hash comparisons to detect known malware.\nC.  Initiating a host's shutdown sequence to terminate all running processes.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect SID-History Injection (T1134.005)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nB.  Examine data in user\u2019s SID-History attributes using the PowerShell <code>Get-ADUser</code> cmdlet , especially users who have SID-History values from the same domain.  Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.   Monitor for Windows API calls to the <code>DsAddSidHistory</code> function. (Citations: Microsoft Get-ADUser, AdSecurity SID History Sept 2015, AdSecurity SID History Sept 2015, Microsoft DsAddSidHistory, Microsoft DsAddSidHistory)\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Monitor file access on removable media. Detect processes that execute when removable media is mounted.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "SID-History Injection (T1134.005)",
      "ddmc_optionA": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_optionB": "Examine data in user\u2019s SID-History attributes using the PowerShell <code>Get-ADUser</code> cmdlet , especially users who have SID-History values from the same domain.  Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.   Monitor for Windows API calls to the <code>DsAddSidHistory</code> function. (Citations: Microsoft Get-ADUser, AdSecurity SID History Sept 2015, AdSecurity SID History Sept 2015, Microsoft DsAddSidHistory, Microsoft DsAddSidHistory)",
      "ddmc_optionC": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Monitor file access on removable media. Detect processes that execute when removable media is mounted.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Examine data in user\u2019s SID-History attributes using the PowerShell <code>Get-ADUser</code> cmdlet , especially users who have SID-History values from the same domain.  Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.   Monitor for Windows API calls to the <code>DsAddSidHistory</code> function. (Citations: Microsoft Get-ADUser, AdSecurity SID History Sept 2015, AdSecurity SID History Sept 2015, Microsoft DsAddSidHistory, Microsoft DsAddSidHistory)",
      "prompts": [],
      "instruction": "How can you detect SID-History Injection (T1134.005)?\nA.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\nB.  Examine data in user\u2019s SID-History attributes using the PowerShell <code>Get-ADUser</code> cmdlet , especially users who have SID-History values from the same domain.  Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.   Monitor for Windows API calls to the <code>DsAddSidHistory</code> function. (Citations: Microsoft Get-ADUser, AdSecurity SID History Sept 2015, AdSecurity SID History Sept 2015, Microsoft DsAddSidHistory, Microsoft DsAddSidHistory)\nC.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Monitor file access on removable media. Detect processes that execute when removable media is mounted.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1614 (System Location Discovery)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Employing file hash comparisons to detect known malware.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1614 (System Location Discovery)",
      "ddmc_optionA": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1614 (System Location Discovery)?\nA.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nB.  Employing file hash comparisons to detect known malware.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1003.003 (NTDS)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1003.003 (NTDS)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1003.003 (NTDS)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Mark-of-the-Web Bypass (T1553.005)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mark-of-the-Web Bypass (T1553.005)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionC": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "prompts": [],
      "instruction": "How can you mitigate Mark-of-the-Web Bypass (T1553.005)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.",
      "ddmc_optionD": "Use a static analysis tool to find double free instances.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-1256 (Improper Restriction of Software Interfaces to Hardware Features)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\nD.  Use a static analysis tool to find double free instances.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption)?\nA.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nB.  Limit Content Provider permissions (read/write) as appropriate.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-323 (Reusing a Nonce, Key Pair in Encryption)",
      "ddmc_optionA": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "ddmc_optionB": "Limit Content Provider permissions (read/write) as appropriate.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption)?\nA.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nB.  Limit Content Provider permissions (read/write) as appropriate.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)?\nA.  Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means\nB.  Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.\nC.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\nD.  Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)",
      "ddmc_optionA": "Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means",
      "ddmc_optionB": "Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.",
      "ddmc_optionC": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "ddmc_optionD": "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)?\nA.  Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means\nB.  Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.\nC.  Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\nD.  Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Removing Important Client Functionality (CAPEC-207)?\nA.  Do not reuse local administrator account credentials across systems.\nB.  Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.\nC.  The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.\nD.  Design: Use obfuscation and other techniques to prevent reverse engineering the client code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Removing Important Client Functionality (CAPEC-207)",
      "ddmc_optionA": "Do not reuse local administrator account credentials across systems.",
      "ddmc_optionB": "Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.",
      "ddmc_optionC": "The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.",
      "ddmc_optionD": "Design: Use obfuscation and other techniques to prevent reverse engineering the client code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Use obfuscation and other techniques to prevent reverse engineering the client code.",
      "prompts": [],
      "instruction": "What is a method to mitigate Removing Important Client Functionality (CAPEC-207)?\nA.  Do not reuse local administrator account credentials across systems.\nB.  Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.\nC.  The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.\nD.  Design: Use obfuscation and other techniques to prevent reverse engineering the client code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Build Image on Host (T1612)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Build Image on Host (T1612)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_optionC": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Build Image on Host (T1612)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nC.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Space after Filename (T1036.006)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Space after Filename (T1036.006)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Space after Filename (T1036.006)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Privilege Abuse (CAPEC-122)?\nA.  Ensure digital certificates are protected and inaccessible by unauthorized uses.\nB.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\nC.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nD.  Properly validate the data (syntactically and semantically) before writing it to the database.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Privilege Abuse (CAPEC-122)",
      "ddmc_optionA": "Ensure digital certificates are protected and inaccessible by unauthorized uses.",
      "ddmc_optionB": "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
      "ddmc_optionC": "Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.",
      "ddmc_optionD": "Properly validate the data (syntactically and semantically) before writing it to the database.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Properly validate the data (syntactically and semantically) before writing it to the database.",
      "prompts": [],
      "instruction": "What is a method to mitigate Privilege Abuse (CAPEC-122)?\nA.  Ensure digital certificates are protected and inaccessible by unauthorized uses.\nB.  Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\nC.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nD.  Properly validate the data (syntactically and semantically) before writing it to the database.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Audio Capture (T1123)?\nA.  Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system. Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.\nB.  Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code.\nC.  Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Audio Capture (T1123)",
      "ddmc_optionA": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system. Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.",
      "ddmc_optionB": "Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code.",
      "ddmc_optionC": "Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.",
      "ddmc_optionD": "Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system. Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.",
      "prompts": [],
      "instruction": "What is a method to detect Audio Capture (T1123)?\nA.  Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system. Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.\nB.  Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code.\nC.  Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.\nD.  Once adversaries leverage the web service as infrastructure (ex: for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Safe Mode Boot (T1562.009)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Safe Mode Boot (T1562.009)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Safe Mode Boot (T1562.009)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Not Using Password Aging (CWE-262)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Not Using Password Aging (CWE-262)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_optionD": "Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Not Using Password Aging (CWE-262)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nD.  Appropriate Post-Si tests should be carried out at various authorization levels to ensure that debug components are properly chained and accessible only to users with appropriate credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.\nC.  For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.\nD.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)",
      "ddmc_optionA": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionB": "When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.",
      "ddmc_optionC": "For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.",
      "ddmc_optionD": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  When sharing resources, avoid mixing agents of varying trust levels. Untrusted agents should not share resources with trusted agents.\nC.  For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.\nD.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\nB.  Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].\nC.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nD.  Declare returned data which should not be altered as constant or immutable.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Script in an Error Message Web Page (CWE-81)",
      "ddmc_optionA": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
      "ddmc_optionB": "Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].",
      "ddmc_optionC": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionD": "Declare returned data which should not be altered as constant or immutable.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\nB.  Software architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].\nC.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nD.  Declare returned data which should not be altered as constant or immutable.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1030 (Data Transfer Size Limits)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Set and enforce secure password policies for accounts.\nD.  Block users or groups from installing or using unapproved hardware on systems, including USB devices.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1030 (Data Transfer Size Limits)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionC": "Set and enforce secure password policies for accounts.",
      "ddmc_optionD": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "How can you mitigate T1030 (Data Transfer Size Limits)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use intrusion detection signatures to block traffic at network boundaries.\nC.  Set and enforce secure password policies for accounts.\nD.  Block users or groups from installing or using unapproved hardware on systems, including USB devices.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Protect sensitive information with strong encryption.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Protect sensitive information with strong encryption.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Protect sensitive information with strong encryption.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1499.003 (Application Exhaustion Flood)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1499.003 (Application Exhaustion Flood)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1499.003 (Application Exhaustion Flood)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Return Inside Finally Block (CWE-584)?\nA.  Software tools are capable of finding ADSs on your system.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).\nD.  Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Return Inside Finally Block (CWE-584)",
      "ddmc_optionA": "Software tools are capable of finding ADSs on your system.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).",
      "ddmc_optionD": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.",
      "prompts": [],
      "instruction": "What is a method to mitigate Return Inside Finally Block (CWE-584)?\nA.  Software tools are capable of finding ADSs on your system.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).\nD.  Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Fallback Channels (T1008)?\nA.  Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  <code>&lt;?php @eval($_POST['password']);&gt;</code> Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citations: Lee 2013, NSA Cyber Mitigating Web Shells, NSA Cyber Mitigating Web Shells, US-CERT Alert TA15-314A Web Shells)\nB.  Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\nC.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Fallback Channels (T1008)",
      "ddmc_optionA": "Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  <code>&lt;?php @eval($_POST['password']);&gt;</code> Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citations: Lee 2013, NSA Cyber Mitigating Web Shells, NSA Cyber Mitigating Web Shells, US-CERT Alert TA15-314A Web Shells)",
      "ddmc_optionB": "Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.",
      "ddmc_optionC": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)",
      "ddmc_optionD": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Fallback Channels (T1008)?\nA.  Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:  <code>&lt;?php @eval($_POST['password']);&gt;</code> Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citations: Lee 2013, NSA Cyber Mitigating Web Shells, NSA Cyber Mitigating Web Shells, US-CERT Alert TA15-314A Web Shells)\nB.  Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\nC.  Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.    Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.(Citations: GitHub Revoke-Obfuscation, FireEye Revoke-Obfuscation July 2017, GitHub Office-Crackros Aug 2016)\nD.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Launch Daemon (T1543.004)?\nA.  Restricting network traffic originating from any location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Restoring a file for an entity to access.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Launch Daemon (T1543.004)?\nA.  Restricting network traffic originating from any location.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Restoring a file for an entity to access.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate System Owner/User Discovery (T1033)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Service Discovery (T1007)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Service Discovery (T1007)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate System Service Discovery (T1007)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionD": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Limiting the transmission of a credential to a scoped set of relying parties.\nD.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nA.  Apply blinding [REF-1219] or masking techniques in strategic areas.\nB.  Use non-predictable inputs for seed generation.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Always verify the length of the string unit character.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "ddmc_optionA": "Apply blinding [REF-1219] or masking techniques in strategic areas.",
      "ddmc_optionB": "Use non-predictable inputs for seed generation.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Always verify the length of the string unit character.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nA.  Apply blinding [REF-1219] or masking techniques in strategic areas.\nB.  Use non-predictable inputs for seed generation.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Always verify the length of the string unit character.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Macro Symbols (CWE-152)",
      "ddmc_optionA": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionB": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.",
      "ddmc_optionC": "Use a language that provides appropriate memory abstractions.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nA.  Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nB.  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\nC.  Use a language that provides appropriate memory abstractions.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nB.  Do not expose sensitive error information to the user.\nC.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nD.  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Command Shell in Externally Accessible Directory (CWE-553)",
      "ddmc_optionA": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices.",
      "ddmc_optionB": "Do not expose sensitive error information to the user.",
      "ddmc_optionC": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionD": "Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not expose sensitive error information to the user.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Command Shell in Externally Accessible Directory (CWE-553)?\nA.  This is a complex topic. See the book Translucent Databases for a good discussion of best practices.\nB.  Do not expose sensitive error information to the user.\nC.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nD.  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate WebView Exposure (CAPEC-503)?\nA.  To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.\nB.  3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.\nC.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nD.  Design: Perform validation on email header data\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "WebView Exposure (CAPEC-503)",
      "ddmc_optionA": "To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.",
      "ddmc_optionB": "3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.",
      "ddmc_optionC": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
      "ddmc_optionD": "Design: Perform validation on email header data",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.",
      "prompts": [],
      "instruction": "How can you mitigate WebView Exposure (CAPEC-503)?\nA.  To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.\nB.  3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.\nC.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nD.  Design: Perform validation on email header data\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-197 (Numeric Truncation Error)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-197 (Numeric Truncation Error)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-197 (Numeric Truncation Error)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Data from Removable Media (T1025)?\nA.  The email removal technique deletes email files from system storage.\nB.  Employing file hash comparisons to detect known malware.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data from Removable Media (T1025)",
      "ddmc_optionA": "The email removal technique deletes email files from system storage.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "What is a method to mitigate Data from Removable Media (T1025)?\nA.  The email removal technique deletes email files from system storage.\nB.  Employing file hash comparisons to detect known malware.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Evil Twin Wi-Fi Attack (CAPEC-615)?\nA.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\nB.  Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).\nC.  Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.\nD.  Design: Generate and validate MAC for cookies\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Evil Twin Wi-Fi Attack (CAPEC-615)",
      "ddmc_optionA": "Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.",
      "ddmc_optionB": "Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).",
      "ddmc_optionC": "Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.",
      "ddmc_optionD": "Design: Generate and validate MAC for cookies",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.",
      "prompts": [],
      "instruction": "How can you mitigate Evil Twin Wi-Fi Attack (CAPEC-615)?\nA.  Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\nB.  Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).\nC.  Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.\nD.  Design: Generate and validate MAC for cookies\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Free of Memory not on the Heap (CWE-590)?\nA.  Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.\nB.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nC.  Use a language that provides abstractions for memory allocation and deallocation.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Free of Memory not on the Heap (CWE-590)",
      "ddmc_optionA": "Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.",
      "ddmc_optionB": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionC": "Use a language that provides abstractions for memory allocation and deallocation.",
      "ddmc_optionD": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use a language that provides abstractions for memory allocation and deallocation.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Free of Memory not on the Heap (CWE-590)?\nA.  Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.\nB.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nC.  Use a language that provides abstractions for memory allocation and deallocation.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1584.005 (Botnet)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1584.005 (Botnet)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1584.005 (Botnet)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution (CWE-1421)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.\nD.  In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution (CWE-1421)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.",
      "ddmc_optionD": "In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.",
      "prompts": [],
      "instruction": "How can you detect Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution (CWE-1421)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  This weakness can be detected in hardware by manually inspecting processor specifications. Features that exhibit this weakness may include microarchitectural predictors, access control checks that occur out-of-order, or any other features that can allow operations to execute without committing to architectural state. Academic researchers have demonstrated that new hardware weaknesses can be discovered by examining publicly available patent filings, for example [REF-1405] and [REF-1406]. Hardware designers can also scrutinize aspects of the instruction set architecture that have undefined behavior; these can become a focal point when applying other detection methods.\nD.  In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Protection of Physical Side Channels (CWE-1300)?\nA.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.\nB.  Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.\nC.  Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.\nD.  When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Protection of Physical Side Channels (CWE-1300)",
      "ddmc_optionA": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.",
      "ddmc_optionB": "Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.",
      "ddmc_optionC": "Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.",
      "ddmc_optionD": "When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Protection of Physical Side Channels (CWE-1300)?\nA.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.\nB.  Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.\nC.  Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.\nD.  When closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential API Hooking (T1056.004)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential API Hooking (T1056.004)",
      "ddmc_optionA": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "prompts": [],
      "instruction": "How can you mitigate Credential API Hooking (T1056.004)?\nA.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Signature Spoofing by Key Recreation (CAPEC-485)?\nA.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nB.  Use multifactor authentication.\nC.  Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution\nD.  2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Signature Spoofing by Key Recreation (CAPEC-485)",
      "ddmc_optionA": "Ensure cryptographic elements have been sufficiently tested for weaknesses.",
      "ddmc_optionB": "Use multifactor authentication.",
      "ddmc_optionC": "Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution",
      "ddmc_optionD": "2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure cryptographic elements have been sufficiently tested for weaknesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate Signature Spoofing by Key Recreation (CAPEC-485)?\nA.  Ensure cryptographic elements have been sufficiently tested for weaknesses.\nB.  Use multifactor authentication.\nC.  Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution\nD.  2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Exposure of Backup File to an Unauthorized Control Sphere (CWE-530)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Exposure of Backup File to an Unauthorized Control Sphere (CWE-530)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Exposure of Backup File to an Unauthorized Control Sphere (CWE-530)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate AppInit DLLs (T1546.010)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "AppInit DLLs (T1546.010)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "What is a method to mitigate AppInit DLLs (T1546.010)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Analyzing changes in service binary files by comparing to a source of truth.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Host Software Binary (T1554)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate finalize() Method Declared Public (CWE-583)?\nA.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "finalize() Method Declared Public (CWE-583)",
      "ddmc_optionA": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
      "ddmc_optionB": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionC": "If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.",
      "ddmc_optionD": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.",
      "prompts": [],
      "instruction": "What is a method to mitigate finalize() Method Declared Public (CWE-583)?\nA.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.\nD.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing a call stack for return addresses which point to unexpected memory locations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Analyzing a call stack for return addresses which point to unexpected memory locations.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Analyzing a call stack for return addresses which point to unexpected memory locations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Remote Desktop Protocol (T1021.001)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Rogue Domain Controller (T1207)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rogue Domain Controller (T1207)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate Rogue Domain Controller (T1207)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking DNS queries that are deceptively similar to legitimate domain names.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Blocking DNS queries that are deceptively similar to legitimate domain names.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Software inventorying identifies and records the software items in the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Software inventorying identifies and records the software items in the organization's architecture.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking DNS queries that are deceptively similar to legitimate domain names.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Server Software Component (T1505)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Server Software Component (T1505)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "prompts": [],
      "instruction": "How can you mitigate Server Software Component (T1505)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Use umask() with the correct argument.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nD.  Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Support for Integrity Check (CWE-353)",
      "ddmc_optionA": "Use umask() with the correct argument.",
      "ddmc_optionB": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "ddmc_optionC": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.",
      "ddmc_optionD": "Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.",
      "prompts": [],
      "instruction": "What is a method to mitigate Missing Support for Integrity Check (CWE-353)?\nA.  Use umask() with the correct argument.\nB.  Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nC.  Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nD.  Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-467 (Cross Site Identification)?\nA.  Design: Enforce principle of least privilege\nB.  Encrypt and password-protect sensitive data.\nC.  Usage: Users should always explicitly log out from the social networking sites when done using them.\nD.  Only accept software updates from an official source.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-467 (Cross Site Identification)",
      "ddmc_optionA": "Design: Enforce principle of least privilege",
      "ddmc_optionB": "Encrypt and password-protect sensitive data.",
      "ddmc_optionC": "Usage: Users should always explicitly log out from the social networking sites when done using them.",
      "ddmc_optionD": "Only accept software updates from an official source.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Usage: Users should always explicitly log out from the social networking sites when done using them.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-467 (Cross Site Identification)?\nA.  Design: Enforce principle of least privilege\nB.  Encrypt and password-protect sensitive data.\nC.  Usage: Users should always explicitly log out from the social networking sites when done using them.\nD.  Only accept software updates from an official source.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1547.003 (Time Providers)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.003 (Time Providers)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1547.003 (Time Providers)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Port Knocking (T1205.001)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Port Knocking (T1205.001)?\nA.  The detection of an internal host relaying traffic between the internal network and the external network.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Employing a pattern matching algorithm to statically analyze the content of files.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remote Desktop Protocol (T1021.001)?\nA.  File eviction techniques evict files from system storage.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remote Desktop Protocol (T1021.001)?\nA.  File eviction techniques evict files from system storage.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Forced Deadlock (CAPEC-25)?\nA.  Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.\nB.  Frequent changing of handset and retransmission device\nC.  For competing actions, use well-known libraries which implement synchronization.\nD.  Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Deadlock (CAPEC-25)",
      "ddmc_optionA": "Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.",
      "ddmc_optionB": "Frequent changing of handset and retransmission device",
      "ddmc_optionC": "For competing actions, use well-known libraries which implement synchronization.",
      "ddmc_optionD": "Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "For competing actions, use well-known libraries which implement synchronization.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Forced Deadlock (CAPEC-25)?\nA.  Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.\nB.  Frequent changing of handset and retransmission device\nC.  For competing actions, use well-known libraries which implement synchronization.\nD.  Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].\nB.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  An application must, at all times, keep track of network resources and meter their usage appropriately.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Script in an Error Message Web Page (CWE-81)",
      "ddmc_optionA": "Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].",
      "ddmc_optionB": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
      "ddmc_optionC": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionD": "An application must, at all times, keep track of network resources and meter their usage appropriately.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Script in an Error Message Web Page (CWE-81)?\nA.  Different cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178].\nB.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  An application must, at all times, keep track of network resources and meter their usage appropriately.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\nB.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Antivirus software can help mitigate known malicious code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Integer Overflow or Wraparound (CWE-190)",
      "ddmc_optionA": "In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.",
      "ddmc_optionB": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionC": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
      "ddmc_optionD": "Antivirus software can help mitigate known malicious code.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "prompts": [],
      "instruction": "What is a method to mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\nB.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Antivirus software can help mitigate known malicious code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1553.001 (Gatekeeper Bypass)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1553.001 (Gatekeeper Bypass)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "How can you mitigate T1553.001 (Gatekeeper Bypass)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Manipulate Registry Information (CAPEC-203)?\nA.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\nB.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nC.  Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\nD.  Monitor traffic and resource usage and pay attention if resource exhaustion occurs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Manipulate Registry Information (CAPEC-203)",
      "ddmc_optionA": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
      "ddmc_optionB": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
      "ddmc_optionC": "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
      "ddmc_optionD": "Monitor traffic and resource usage and pay attention if resource exhaustion occurs.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Manipulate Registry Information (CAPEC-203)?\nA.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\nB.  Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\nC.  Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\nD.  Monitor traffic and resource usage and pay attention if resource exhaustion occurs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1055.002 (Portable Executable Injection)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1055.002 (Portable Executable Injection)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1055.002 (Portable Executable Injection)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Employing file hash comparisons to detect known malware.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Non-Standard Port (T1571)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Employing file hash comparisons to detect known malware.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-1251 (Mirrored Regions with Different Values)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).\nD.  Whenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are: Make this out-of-sync time period as small as possible, and Make the update process as robust as possible.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1251 (Mirrored Regions with Different Values)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
      "ddmc_optionC": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).",
      "ddmc_optionD": "Whenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are: Make this out-of-sync time period as small as possible, and Make the update process as robust as possible.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Whenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are: Make this out-of-sync time period as small as possible, and Make the update process as robust as possible.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-1251 (Mirrored Regions with Different Values)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).\nD.  Whenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are: Make this out-of-sync time period as small as possible, and Make the update process as robust as possible.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1498 (Network Denial of Service)?\nA.  Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)\nC.  Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\nD.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1498 (Network Denial of Service)",
      "ddmc_optionA": "Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "ddmc_optionB": "Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)",
      "ddmc_optionC": "Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.",
      "ddmc_optionD": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)",
      "prompts": [],
      "instruction": "How can you detect T1498 (Network Denial of Service)?\nA.  Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.(Citations: Cisco DoSdetectNetflow)\nB.  Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)\nC.  Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\nD.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1222 (File and Directory Permissions Modification)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  Restoring an software configuration.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1222 (File and Directory Permissions Modification)",
      "ddmc_optionA": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1222 (File and Directory Permissions Modification)?\nA.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nB.  Restoring an software configuration.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1543.003 (Windows Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Restoring a file for an entity to access.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.003 (Windows Service)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1543.003 (Windows Service)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Restoring a file for an entity to access.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Credential API Hooking (T1056.004)?\nA.  Restoring a file for an entity to access.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential API Hooking (T1056.004)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionC": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Preventing execution of any address in a memory region other than the code segment.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Credential API Hooking (T1056.004)?\nA.  Restoring a file for an entity to access.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Preventing execution of any address in a memory region other than the code segment.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing failed connections in a network to detect unauthorized activity.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Controlling access to local computer system resources with kernel-level capabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmc_optionC": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionD": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing failed connections in a network to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Analyzing failed connections in a network to detect unauthorized activity.\nC.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nD.  Controlling access to local computer system resources with kernel-level capabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Restoring the data in a database.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.004 (SSH)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate T1021.004 (SSH)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Restoring the data in a database.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Fronting (T1090.004)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Fronting (T1090.004)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Keychain (T1555.001)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Keychain (T1555.001)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-Stage Channels (T1104)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "How can you mitigate Multi-Stage Channels (T1104)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1586.003 (Cloud Accounts)?\nA.  Set and enforce secure password policies for accounts.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1586.003 (Cloud Accounts)",
      "ddmc_optionA": "Set and enforce secure password policies for accounts.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate T1586.003 (Cloud Accounts)?\nA.  Set and enforce secure password policies for accounts.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1014 (Rootkit)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Encrypting a file using a cryptographic key.\nC.  Employing file hash comparisons to detect known malware.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1014 (Rootkit)",
      "ddmc_optionA": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionB": "Encrypting a file using a cryptographic key.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1014 (Rootkit)?\nA.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nB.  Encrypting a file using a cryptographic key.\nC.  Employing file hash comparisons to detect known malware.\nD.  Software inventorying identifies and records the software items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nB.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)",
      "ddmc_optionA": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_optionB": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Handling of Overlap Between Protected Memory Ranges (CWE-1260)?\nA.  With Struts, write all data from form beans with the bean's filter attribute set to true.\nB.  Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)?\nA.  Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.\nB.  This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.\nC.  Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\nD.  Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)",
      "ddmc_optionA": "Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.",
      "ddmc_optionB": "This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.",
      "ddmc_optionC": "Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.",
      "ddmc_optionD": "Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)",
      "prompts": [],
      "instruction": "What is a method to mitigate Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)?\nA.  Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.\nB.  This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.\nC.  Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\nD.  Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Forced Integer Overflow (CAPEC-92)?\nA.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nB.  Always do bound checking before consuming user input data.\nC.  Ensure deleted files are actually deleted.\nD.  Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Forced Integer Overflow (CAPEC-92)",
      "ddmc_optionA": "Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.",
      "ddmc_optionB": "Always do bound checking before consuming user input data.",
      "ddmc_optionC": "Ensure deleted files are actually deleted.",
      "ddmc_optionD": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Always do bound checking before consuming user input data.",
      "prompts": [],
      "instruction": "How can you mitigate Forced Integer Overflow (CAPEC-92)?\nA.  Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.\nB.  Always do bound checking before consuming user input data.\nC.  Ensure deleted files are actually deleted.\nD.  Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Restriction of XML External Entity Reference (CWE-611)?\nA.  Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.\nB.  Always test your code on any platform on which it is targeted to run on.\nC.  Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.\nD.  Many XML parsers and validators can be configured to disable external entity expansion.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of XML External Entity Reference (CWE-611)",
      "ddmc_optionA": "Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.",
      "ddmc_optionB": "Always test your code on any platform on which it is targeted to run on.",
      "ddmc_optionC": "Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.",
      "ddmc_optionD": "Many XML parsers and validators can be configured to disable external entity expansion.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Many XML parsers and validators can be configured to disable external entity expansion.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Restriction of XML External Entity Reference (CWE-611)?\nA.  Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.\nB.  Always test your code on any platform on which it is targeted to run on.\nC.  Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.\nD.  Many XML parsers and validators can be configured to disable external entity expansion.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Terminating a running application process on a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Terminating a running application process on a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Rootkit (T1014)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Terminating a running application process on a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1056.001 (Keylogging)?\nA.  Analyzing email or instant message content to detect unauthorized activity.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1056.001 (Keylogging)",
      "ddmc_optionA": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_optionB": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "How can you mitigate T1056.001 (Keylogging)?\nA.  Analyzing email or instant message content to detect unauthorized activity.\nB.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Data is being transferred and/or removed from systems/applications within the network.\nC.  Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmc_optionA": "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
      "ddmc_optionB": "Data is being transferred and/or removed from systems/applications within the network.",
      "ddmc_optionC": "Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.",
      "ddmc_optionD": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "prompts": [],
      "instruction": "What is a method to detect Use of Known Operating System Credentials (CAPEC-653)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Data is being transferred and/or removed from systems/applications within the network.\nC.  Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.\nD.  Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate DNS (T1590.002)?\nA.  Protect sensitive information with strong encryption.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "DNS (T1590.002)",
      "ddmc_optionA": "Protect sensitive information with strong encryption.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate DNS (T1590.002)?\nA.  Protect sensitive information with strong encryption.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Out-of-bounds Write (CWE-787)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nC.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Out-of-bounds Write (CWE-787)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution",
      "ddmc_optionC": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "prompts": [],
      "instruction": "How can you detect Out-of-bounds Write (CWE-787)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool Cost effective for partial coverage: Framework-based Fuzzer Automated Monitored Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nC.  This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)?\nA.  Leverage anti-virus products to detect and quarantine software with known virus.\nB.  Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.\nC.  Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.\nD.  Ensure that proper permissions on files and folders are enacted to limit accessibility.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)",
      "ddmc_optionA": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "ddmc_optionB": "Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.",
      "ddmc_optionC": "Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.",
      "ddmc_optionD": "Ensure that proper permissions on files and folders are enacted to limit accessibility.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "prompts": [],
      "instruction": "How can you mitigate Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)?\nA.  Leverage anti-virus products to detect and quarantine software with known virus.\nB.  Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.\nC.  Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.\nD.  Ensure that proper permissions on files and folders are enacted to limit accessibility.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.\nB.  Leverage antivirus tools to detect known malware\nC.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nD.  For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Install Malicious Extension (CAPEC-698)",
      "ddmc_optionA": "The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.",
      "ddmc_optionB": "Leverage antivirus tools to detect known malware",
      "ddmc_optionC": "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.",
      "ddmc_optionD": "For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.\nB.  Leverage antivirus tools to detect known malware\nC.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nD.  For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1505.005 (Terminal Services DLL)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nC.  Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)\nD.  Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1505.005 (Terminal Services DLL)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "ddmc_optionC": "Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)",
      "ddmc_optionD": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citations: University of Birmingham C2)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).",
      "prompts": [],
      "instruction": "How can you detect T1505.005 (Terminal Services DLL)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to Registry keys associated with <code>ServiceDll</code> and other subkey values under <code>HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\</code>. Monitor unexpected changes and/or interactions with <code>termsrv.dll</code>, which is typically stored in <code>%SystemRoot%\\System32\\</code>. Monitor commands as well as processes and arguments for potential adversary actions to modify Registry values (ex: <code>reg.exe</code>) or modify/replace the legitimate <code>termsrv.dll</code>. Monitor module loads by the Terminal Services process (ex: <code>svchost.exe -k termsvcs</code>) for unexpected DLLs (the default is <code>%SystemRoot%\\System32\\termsrv.dll</code>, though an adversary could also use Match Legitimate Name or Location on a malicious payload).\nC.  Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Pfammatter - Hidden Inbox Rules, Microsoft Tim McMichael Exchange Mail Forwarding 2)\nD.  Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Exfiltration to Code Repository (T1567.001)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration to Code Repository (T1567.001)",
      "ddmc_optionA": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionB": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Exfiltration to Code Repository (T1567.001)?\nA.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nB.  Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Key Exchange without Entity Authentication (CWE-322)?\nA.  Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.\nB.  Ensure that proper authentication is included in the system design.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Key Exchange without Entity Authentication (CWE-322)",
      "ddmc_optionA": "Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.",
      "ddmc_optionB": "Ensure that proper authentication is included in the system design.",
      "ddmc_optionC": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.",
      "ddmc_optionD": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Ensure that proper authentication is included in the system design.",
      "prompts": [],
      "instruction": "What is a method to mitigate Key Exchange without Entity Authentication (CWE-322)?\nA.  Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.\nB.  Ensure that proper authentication is included in the system design.\nC.  Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\nD.  Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Multiple Locks of a Critical Resource (CWE-764)?\nA.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nB.  Secure patch support to allow ROM code to be patched on the next boot.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multiple Locks of a Critical Resource (CWE-764)",
      "ddmc_optionA": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
      "ddmc_optionB": "Secure patch support to allow ROM code to be patched on the next boot.",
      "ddmc_optionC": "Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].",
      "ddmc_optionD": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
      "prompts": [],
      "instruction": "What is a method to mitigate Multiple Locks of a Critical Resource (CWE-764)?\nA.  When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.\nB.  Secure patch support to allow ROM code to be patched on the next boot.\nC.  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].\nD.  Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1547.008 (LSASS Driver)?\nA.  Restoring software to a host.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.008 (LSASS Driver)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionC": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring software to a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1547.008 (LSASS Driver)?\nA.  Restoring software to a host.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unused/Unsupported Cloud Regions (T1535)?\nA.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unused/Unsupported Cloud Regions (T1535)",
      "ddmc_optionA": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unused/Unsupported Cloud Regions (T1535)?\nA.  Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Perform regular software updates to mitigate exploitation risk.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-166 (Improper Handling of Missing Special Element)?\nA.  The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\nB.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-166 (Improper Handling of Missing Special Element)",
      "ddmc_optionA": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.",
      "ddmc_optionB": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-166 (Improper Handling of Missing Special Element)?\nA.  The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\nB.  For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Restoring a user account's access to resources by unlocking a locked User Account.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Restoring a user account's access to resources by unlocking a locked User Account.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Insufficient Granularity of Access Control (CWE-1220)?\nA.  Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.\nB.  For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved. Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\nC.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Insufficient Granularity of Access Control (CWE-1220)",
      "ddmc_optionA": "Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.",
      "ddmc_optionB": "For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved. Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.",
      "ddmc_optionC": "Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.",
      "ddmc_optionD": "Force the administrator to change the credential upon installation.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.",
      "prompts": [],
      "instruction": "What is a method to mitigate Insufficient Granularity of Access Control (CWE-1220)?\nA.  Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.\nB.  For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved. Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\nC.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Ensure best practices with respect to communications channel protections.\nC.  Design: Use input validation for cookies\nD.  Employ a robust network defensive posture that includes a managed IDS/IPS.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)",
      "ddmc_optionA": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
      "ddmc_optionB": "Ensure best practices with respect to communications channel protections.",
      "ddmc_optionC": "Design: Use input validation for cookies",
      "ddmc_optionD": "Employ a robust network defensive posture that includes a managed IDS/IPS.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Design: Use input validation for cookies",
      "prompts": [],
      "instruction": "What is a method to mitigate Accessing/Intercepting/Modifying HTTP Cookies (CAPEC-31)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Ensure best practices with respect to communications channel protections.\nC.  Design: Use input validation for cookies\nD.  Employ a robust network defensive posture that includes a managed IDS/IPS.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1218.003 (CMSTP)?\nA.  Encrypting a file using a cryptographic key.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1218.003 (CMSTP)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "How can you mitigate T1218.003 (CMSTP)?\nA.  Encrypting a file using a cryptographic key.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Inhibit System Recovery (T1490)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Inhibit System Recovery (T1490)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Block execution of code on a system through application control, and/or script blocking.",
      "prompts": [],
      "instruction": "How can you mitigate Inhibit System Recovery (T1490)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1548.001 (Setuid and Setgid)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Restoring an software configuration.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1548.001 (Setuid and Setgid)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Restoring a file for an entity to access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1548.001 (Setuid and Setgid)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Restoring an software configuration.\nD.  Restoring a file for an entity to access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect CWE-535 (Exposure of Information Through Shell Error Message)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-535 (Exposure of Information Through Shell Error Message)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect CWE-535 (Exposure of Information Through Shell Error Message)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer Cost effective for partial coverage: Warning Flags\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-339 (Small Seed Space in PRNG)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The fabric firewall should apply the same protections as the original region to the mirrored regions.\nC.  During development, do not mark it as safe for scripting.\nD.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-339 (Small Seed Space in PRNG)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "The fabric firewall should apply the same protections as the original region to the mirrored regions.",
      "ddmc_optionC": "During development, do not mark it as safe for scripting.",
      "ddmc_optionD": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-339 (Small Seed Space in PRNG)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The fabric firewall should apply the same protections as the original region to the mirrored regions.\nC.  During development, do not mark it as safe for scripting.\nD.  Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Missing Standardized Error Handling Mechanism (CWE-544)?\nA.  An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.\nB.  Assign all variables to an initial value.\nC.  define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.\nD.  Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Missing Standardized Error Handling Mechanism (CWE-544)",
      "ddmc_optionA": "An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.",
      "ddmc_optionB": "Assign all variables to an initial value.",
      "ddmc_optionC": "define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.",
      "ddmc_optionD": "Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.",
      "prompts": [],
      "instruction": "How can you mitigate Missing Standardized Error Handling Mechanism (CWE-544)?\nA.  An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.\nB.  Assign all variables to an initial value.\nC.  define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.\nD.  Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Traffic Signaling (T1205)?\nA.  A Credential created for the purpose of deceiving an adversary.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Traffic Signaling (T1205)",
      "ddmc_optionA": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionB": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionC": "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.",
      "ddmc_optionD": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "How can you mitigate Traffic Signaling (T1205)?\nA.  A Credential created for the purpose of deceiving an adversary.\nB.  Collecting network communication protocol metadata and identifying statistical outliers.\nC.  Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.\nD.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-352 (Cross-Site Request Forgery (CSRF))?\nA.  Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-352 (Cross-Site Request Forgery (CSRF))",
      "ddmc_optionA": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.",
      "ddmc_optionB": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]",
      "prompts": [],
      "instruction": "How can you mitigate CWE-352 (Cross-Site Request Forgery (CSRF))?\nA.  Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Access-control-policy protections must be reviewed for design inconsistency and common weaknesses. Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Employing file hash comparisons to detect known malware.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Employing file hash comparisons to detect known malware.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Disable Windows Event Logging (T1562.002)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Modifying an application's configuration to reduce its attack surface.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Disable Windows Event Logging (T1562.002)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionD": "Modifying an application's configuration to reduce its attack surface.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Modifying an application's configuration to reduce its attack surface.",
      "prompts": [],
      "instruction": "How can you mitigate Disable Windows Event Logging (T1562.002)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nD.  Modifying an application's configuration to reduce its attack surface.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1558.001 (Golden Ticket)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.001 (Golden Ticket)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1558.001 (Golden Ticket)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Software Development Tools Maliciously Altered (CAPEC-670)?\nA.  Sign everything, including configuration files, XML files and packages.\nB.  Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.\nC.  Avoid giving elevated privileges to developers.\nD.  Design: Include \"hosts file\"/IP address in the application\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Software Development Tools Maliciously Altered (CAPEC-670)",
      "ddmc_optionA": "Sign everything, including configuration files, XML files and packages.",
      "ddmc_optionB": "Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.",
      "ddmc_optionC": "Avoid giving elevated privileges to developers.",
      "ddmc_optionD": "Design: Include \"hosts file\"/IP address in the application",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Avoid giving elevated privileges to developers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Software Development Tools Maliciously Altered (CAPEC-670)?\nA.  Sign everything, including configuration files, XML files and packages.\nB.  Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.\nC.  Avoid giving elevated privileges to developers.\nD.  Design: Include \"hosts file\"/IP address in the application\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Insufficient Session Expiration (CWE-613)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Set sessions/credentials expiration date.\nC.  Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]\nD.  With Struts, write all data from form beans with the bean's filter attribute set to true.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Insufficient Session Expiration (CWE-613)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Set sessions/credentials expiration date.",
      "ddmc_optionC": "Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]",
      "ddmc_optionD": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Set sessions/credentials expiration date.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Insufficient Session Expiration (CWE-613)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Set sessions/credentials expiration date.\nC.  Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]\nD.  With Struts, write all data from form beans with the bean's filter attribute set to true.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1574.004 (Dylib Hijacking)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Restoring an software configuration.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.004 (Dylib Hijacking)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Restoring an software configuration.",
      "ddmc_optionD": "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1574.004 (Dylib Hijacking)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Restoring an software configuration.\nD.  Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Traffic Signaling (T1205)?\nA.  Restricting network traffic originating from any location.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Traffic Signaling (T1205)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Traffic Signaling (T1205)?\nA.  Restricting network traffic originating from any location.\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1538 (Cloud Service Dashboard)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1538 (Cloud Service Dashboard)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate T1538 (Cloud Service Dashboard)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Restoring an software configuration.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Using kernel-level capabilities to isolate processes.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Using kernel-level capabilities to isolate processes.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Port Monitors (T1547.010)?\nA.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nB.  Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Port Monitors (T1547.010)",
      "ddmc_optionA": "Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)",
      "ddmc_optionB": "Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.",
      "ddmc_optionC": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)",
      "prompts": [],
      "instruction": "How can you detect Port Monitors (T1547.010)?\nA.  Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).(Citations: Endurant CMSTP July 2018)\nB.  Monitor the local image registry to make sure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor process API calls to <code>AddMonitor</code>. Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>, paying particular attention to changes in the \"Driver\" subkey. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citations: AddMonitor, TechNet Autoruns)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Block users or groups from installing or using unapproved hardware on systems, including USB devices.\nC.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hardware Additions (T1200)",
      "ddmc_optionA": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_optionB": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
      "ddmc_optionC": "Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate Hardware Additions (T1200)?\nA.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\nB.  Block users or groups from installing or using unapproved hardware on systems, including USB devices.\nC.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Collecting network communication protocol metadata and identifying statistical outliers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).\nB.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nC.  Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.\nD.  The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Creation of Temporary File in Directory with Insecure Permissions (CWE-379)",
      "ddmc_optionA": "Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).",
      "ddmc_optionB": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.",
      "ddmc_optionC": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
      "ddmc_optionD": "The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).\nB.  Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nC.  Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.\nD.  The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "File and Directory Permissions Modification (T1222)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "prompts": [],
      "instruction": "What is a method to mitigate File and Directory Permissions Modification (T1222)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Assignment to Variable without Use (CWE-563)?\nA.  For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.\nB.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nC.  Remove unused variables from the code.\nD.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Assignment to Variable without Use (CWE-563)",
      "ddmc_optionA": "For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.",
      "ddmc_optionB": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionC": "Remove unused variables from the code.",
      "ddmc_optionD": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Remove unused variables from the code.",
      "prompts": [],
      "instruction": "What is a method to mitigate Assignment to Variable without Use (CWE-563)?\nA.  For front-end to back-end connections: Three solutions are possible, although none are complete. The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals. Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access. Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.\nB.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nC.  Remove unused variables from the code.\nD.  Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Network Topology (T1590.004)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Network Topology (T1590.004)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionC": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Network Topology (T1590.004)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nC.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Path Equivalence: 'fakedir/../realdir/filename' (CWE-57)?\nA.  Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.\nB.  Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.\nC.  Always use explicit block delimitation and use static-analysis technologies to enforce this practice.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Equivalence: 'fakedir/../realdir/filename' (CWE-57)",
      "ddmc_optionA": "Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.",
      "ddmc_optionB": "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.",
      "ddmc_optionC": "Always use explicit block delimitation and use static-analysis technologies to enforce this practice.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "How can you mitigate Path Equivalence: 'fakedir/../realdir/filename' (CWE-57)?\nA.  Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.\nB.  Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.\nC.  Always use explicit block delimitation and use static-analysis technologies to enforce this practice.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cellular Traffic Intercept (CAPEC-609)",
      "ddmc_optionA": "Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.",
      "ddmc_optionD": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cellular Traffic Intercept (CAPEC-609)?\nA.  Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.\nD.  Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Mavinject (T1218.013)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Mavinject (T1218.013)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "How can you mitigate Mavinject (T1218.013)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",
      "ddmc_optionB": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionC": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\nB.  Block execution of code on a system through application control, and/or script blocking.\nC.  Use intrusion detection signatures to block traffic at network boundaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Encrypting a file using a cryptographic key.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Spearphishing via Service (T1566.003)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionC": "Encrypting a file using a cryptographic key.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Spearphishing via Service (T1566.003)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nC.  Encrypting a file using a cryptographic key.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionB": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "How can you mitigate T1037.001 (Logon Script (Windows))?\nA.  The file removal technique deletes malicious artifacts or programs from a computer system.\nB.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]\nC.  Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Neutralization of Input Terminators (CWE-147)",
      "ddmc_optionA": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionB": "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]",
      "ddmc_optionC": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionD": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Neutralization of Input Terminators (CWE-147)?\nA.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nB.  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]\nC.  Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nD.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Control Panel (T1218.002)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.",
      "ddmc_optionD": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Control Panel (T1218.002)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.\nD.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Domain Generation Algorithms (T1568.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Generation Algorithms (T1568.002)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionC": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Domain Generation Algorithms (T1568.002)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nC.  Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Build Image on Host (T1612)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Build Image on Host (T1612)",
      "ddmc_optionA": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionB": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_optionC": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
      "ddmc_optionD": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "prompts": [],
      "instruction": "What is a method to mitigate Build Image on Host (T1612)?\nA.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nB.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\nC.  Configure features related to account use like login attempt lockouts, specific login times, etc.\nD.  Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Process Injection (T1055)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts. Enable the UpdateFolderPermissions action for all logon types. The mailbox audit log will forward folder permission modification events to the Unified Audit Log. Create rules to alert on ModifyFolderPermissions operations where the Anonymous or Default user is assigned permissions other than None. A larger than normal volume of emails sent from an account and similar phishing emails sent from real accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments. Analyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\nD.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Process Injection (T1055)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts. Enable the UpdateFolderPermissions action for all logon types. The mailbox audit log will forward folder permission modification events to the Unified Audit Log. Create rules to alert on ModifyFolderPermissions operations where the Anonymous or Default user is assigned permissions other than None. A larger than normal volume of emails sent from an account and similar phishing emails sent from real accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.",
      "ddmc_optionC": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments. Analyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",
      "ddmc_optionD": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)",
      "prompts": [],
      "instruction": "What is a method to detect Process Injection (T1055)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts. Enable the UpdateFolderPermissions action for all logon types. The mailbox audit log will forward folder permission modification events to the Unified Audit Log. Create rules to alert on ModifyFolderPermissions operations where the Anonymous or Default user is assigned permissions other than None. A larger than normal volume of emails sent from an account and similar phishing emails sent from real accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments. Analyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\nD.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.    Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017, ArtOfMemoryForensics, GNU Acct, RHEL auditd, Chokepoint preload rootkits, Microsoft Sysmon v6 May 2017)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionB": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Restricting access to a local file by configuring operating system functionality.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Employing file hash comparisons to detect known malware.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Bash History (T1552.003)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Employing file hash comparisons to detect known malware.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Terminating a running application process on a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionC": "Terminating a running application process on a computer system.",
      "ddmc_optionD": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nC.  Terminating a running application process on a computer system.\nD.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Port Knocking (T1205.001)",
      "ddmc_optionA": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionB": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionD": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "How can you mitigate Port Knocking (T1205.001)?\nA.  Use signatures or heuristics to detect malicious software.\nB.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nC.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nD.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring an entity's access to resources.\nB.  Restoring an software configuration.\nC.  Using biological measures in order to authenticate a user.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring an entity's access to resources.",
      "ddmc_optionB": "Restoring an software configuration.",
      "ddmc_optionC": "Using biological measures in order to authenticate a user.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring an entity's access to resources.\nB.  Restoring an software configuration.\nC.  Using biological measures in order to authenticate a user.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\nB.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\nC.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Following of a Certificate's Chain of Trust (CWE-296)",
      "ddmc_optionA": "For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.",
      "ddmc_optionB": "In flat address space situations, never allow computing memory addresses as offsets from another memory address.",
      "ddmc_optionC": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\nB.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\nC.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Blind SQL Injection (CAPEC-7)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Design: Enforce principle of least privilege\nC.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nD.  Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Blind SQL Injection (CAPEC-7)",
      "ddmc_optionA": "Minimize error/response output to only what is necessary for functional use or corrective language.",
      "ddmc_optionB": "Design: Enforce principle of least privilege",
      "ddmc_optionC": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)",
      "ddmc_optionD": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Blind SQL Injection (CAPEC-7)?\nA.  Minimize error/response output to only what is necessary for functional use or corrective language.\nB.  Design: Enforce principle of least privilege\nC.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nD.  Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Protections Against Hardware Overheating (CWE-1338)?\nA.  Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.\nB.  Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.\nC.  Dynamic tests should be performed to stress-test temperature controls.\nD.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Protections Against Hardware Overheating (CWE-1338)",
      "ddmc_optionA": "Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.",
      "ddmc_optionB": "Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.",
      "ddmc_optionC": "Dynamic tests should be performed to stress-test temperature controls.",
      "ddmc_optionD": "Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Dynamic tests should be performed to stress-test temperature controls.",
      "prompts": [],
      "instruction": "How can you detect Improper Protections Against Hardware Overheating (CWE-1338)?\nA.  Code analysis can require knowledge of API behaviors for library functions that might return NULL, reducing the chances of detection when unknown libraries are used.\nB.  Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.\nC.  Dynamic tests should be performed to stress-test temperature controls.\nD.  Testing of memory-device contents after clearing or erase commands. Dynamic analysis of memory contents during device operation to detect specific, confidential assets. Architecture and design analysis of memory clear and erase operations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer\nB.  Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer",
      "ddmc_optionB": "Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.",
      "prompts": [],
      "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Context-configured Source Code Weakness Analyzer\nB.  Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Archive via Utility (T1560.001)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Archive via Utility (T1560.001)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Using a digital signature to authenticate a file before opening.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Never trust or rely any of the information in an Event for security.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)",
      "ddmc_optionA": "Never trust or rely any of the information in an Event for security.",
      "ddmc_optionB": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionC": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmc_optionD": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "prompts": [],
      "instruction": "What is a method to mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nA.  Never trust or rely any of the information in an Event for security.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\nD.  Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Perform input validation for all content.\nB.  Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.\nC.  When using Bluetooth, set it to hidden or non-discoverable mode.\nD.  Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-125 (Flooding)",
      "ddmc_optionA": "Perform input validation for all content.",
      "ddmc_optionB": "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.",
      "ddmc_optionC": "When using Bluetooth, set it to hidden or non-discoverable mode.",
      "ddmc_optionD": "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Perform input validation for all content.\nB.  Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.\nC.  When using Bluetooth, set it to hidden or non-discoverable mode.\nD.  Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Audio Capture (T1123)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "prompts": [],
      "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "How can you mitigate Symmetric Cryptography (T1573.001)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Default Cryptographic Key (CWE-1394)?\nA.  Always set the secure attribute when the cookie should sent via HTTPS only.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nD.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Default Cryptographic Key (CWE-1394)",
      "ddmc_optionA": "Always set the secure attribute when the cookie should sent via HTTPS only.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.",
      "ddmc_optionD": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Default Cryptographic Key (CWE-1394)?\nA.  Always set the secure attribute when the cookie should sent via HTTPS only.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.\nD.  Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer",
      "ddmc_optionD": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.",
      "prompts": [],
      "instruction": "What is a method to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)",
      "ddmc_optionA": "Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Improper Isolation of Shared Resources on System-on-a-Chip (SoC) (CWE-1189)?\nA.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Standard Port (T1571)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionC": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Standard Port (T1571)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nC.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Search Open Websites/Domains (T1593)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Monitor for changes to environment variables, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates. Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.  Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.(Citations: Autoruns for Windows)\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, Network Device CLI commands may also be used to gather system and network information with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Search Open Websites/Domains (T1593)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Monitor for changes to environment variables, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates. Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.  Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.(Citations: Autoruns for Windows)",
      "ddmc_optionC": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, Network Device CLI commands may also be used to gather system and network information with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_optionD": "Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "How can you detect Search Open Websites/Domains (T1593)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious. Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Monitor for changes to environment variables, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates. Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.  Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.(Citations: Autoruns for Windows)\nC.  System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, Network Device CLI commands may also be used to gather system and network information with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\nD.  Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Accounts (T1078.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restoring a user account's access to resources.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Accounts (T1078.004)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Restoring a user account's access to resources.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring a user account's access to resources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Accounts (T1078.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restoring a user account's access to resources.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)",
      "ddmc_optionA": "Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.",
      "ddmc_optionB": "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).",
      "ddmc_optionC": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "ddmc_optionD": "Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-781 (Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code)?\nA.  Treat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.\nB.  Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).\nC.  If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nD.  Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deployment of Wrong Handler (CWE-430)?\nA.  Protect the administrative/restricted functionality with a strong authentication mechanism.\nB.  Perform a type check before interpreting an object.\nC.  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\nD.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deployment of Wrong Handler (CWE-430)",
      "ddmc_optionA": "Protect the administrative/restricted functionality with a strong authentication mechanism.",
      "ddmc_optionB": "Perform a type check before interpreting an object.",
      "ddmc_optionC": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.",
      "ddmc_optionD": "Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Perform a type check before interpreting an object.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deployment of Wrong Handler (CWE-430)?\nA.  Protect the administrative/restricted functionality with a strong authentication mechanism.\nB.  Perform a type check before interpreting an object.\nC.  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\nD.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Export of Android Application Components (CWE-926)?\nA.  The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  Limit Content Provider permissions (read/write) as appropriate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmc_optionA": "The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.",
      "ddmc_optionB": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionC": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_optionD": "Limit Content Provider permissions (read/write) as appropriate.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Limit Content Provider permissions (read/write) as appropriate.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Export of Android Application Components (CWE-926)?\nA.  The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.\nB.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nC.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nD.  Limit Content Provider permissions (read/write) as appropriate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "What is a method to mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cloud Storage Object Discovery (T1619)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Storage Object Discovery (T1619)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "prompts": [],
      "instruction": "How can you mitigate Cloud Storage Object Discovery (T1619)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Hardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Analyzing failed connections in a network to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Analyzing failed connections in a network to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use of NullPointerException Catch to Detect NULL Pointer Dereference (CWE-395)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes. When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference (CWE-395)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes. When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use of NullPointerException Catch to Detect NULL Pointer Dereference (CWE-395)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes. When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Clear Command History (T1070.003)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nD.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Command History (T1070.003)",
      "ddmc_optionA": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionB": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionC": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_optionD": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Clear Command History (T1070.003)?\nA.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nB.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nC.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\nD.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Bidirectional Communication (T1102.002)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bidirectional Communication (T1102.002)",
      "ddmc_optionA": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_optionB": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use intrusion detection signatures to block traffic at network boundaries.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Bidirectional Communication (T1102.002)?\nA.  Use intrusion detection signatures to block traffic at network boundaries.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Use intrusion detection signatures to block traffic at network boundaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Collecting network communication protocol metadata and identifying statistical outliers.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Internal Proxy (T1090.001)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Internal Proxy (T1090.001)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Internal Proxy (T1090.001)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Randomizing the base (start) address of one or more segments of memory during the initialization of a process.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Web Session Cookie (T1539)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Web Session Cookie (T1539)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.\nB.  Avoid race conditions (CWE-362) during initialization routines.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Integer Overflow or Wraparound (CWE-190)",
      "ddmc_optionA": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.",
      "ddmc_optionB": "Avoid race conditions (CWE-362) during initialization routines.",
      "ddmc_optionC": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionD": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
      "prompts": [],
      "instruction": "How can you mitigate Integer Overflow or Wraparound (CWE-190)?\nA.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.\nB.  Avoid race conditions (CWE-362) during initialization routines.\nC.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nD.  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Threat Intel Vendors (T1597.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Threat Intel Vendors (T1597.001)",
      "ddmc_optionA": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionB": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionC": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmc_optionD": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Threat Intel Vendors (T1597.001)?\nA.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nB.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nC.  Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\nD.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-253 (Incorrect Check of Function Return Value)?\nA.  Use static analysis tools to spot such issues in your code.\nB.  Use a language or compiler that uses exceptions and requires the catching of those exceptions.\nC.  If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\nD.  Ensure that proper authentication is included in the system design.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-253 (Incorrect Check of Function Return Value)",
      "ddmc_optionA": "Use static analysis tools to spot such issues in your code.",
      "ddmc_optionB": "Use a language or compiler that uses exceptions and requires the catching of those exceptions.",
      "ddmc_optionC": "If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.",
      "ddmc_optionD": "Ensure that proper authentication is included in the system design.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use a language or compiler that uses exceptions and requires the catching of those exceptions.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-253 (Incorrect Check of Function Return Value)?\nA.  Use static analysis tools to spot such issues in your code.\nB.  Use a language or compiler that uses exceptions and requires the catching of those exceptions.\nC.  If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\nD.  Ensure that proper authentication is included in the system design.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-163 (Spear Phishing)?\nA.  Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Configuration: Make sure your DNS servers have been updated to the latest versions\nD.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-163 (Spear Phishing)",
      "ddmc_optionA": "Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.",
      "ddmc_optionB": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
      "ddmc_optionC": "Configuration: Make sure your DNS servers have been updated to the latest versions",
      "ddmc_optionD": "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-163 (Spear Phishing)?\nA.  Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.\nB.  Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.\nC.  Configuration: Make sure your DNS servers have been updated to the latest versions\nD.  Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1021.001 (Remote Desktop Protocol)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1021.001 (Remote Desktop Protocol)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1021.001 (Remote Desktop Protocol)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring software to a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "Restoring software to a host.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  Restoring software to a host.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.\nB.  Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.\nC.  When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.\nD.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Security Version Number Mutable to Older Versions (CWE-1328)",
      "ddmc_optionA": "In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.",
      "ddmc_optionB": "Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.",
      "ddmc_optionC": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.",
      "ddmc_optionD": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Security Version Number Mutable to Older Versions (CWE-1328)?\nA.  In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.\nB.  Require user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.\nC.  When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.\nD.  An application must, at all times, keep track of allocated resources and meter their usage appropriately.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Information Discovery (T1082)?\nA.  A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LNK Icon Smuggling (T1027.012)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use signatures or heuristics to detect malicious software.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LNK Icon Smuggling (T1027.012)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Use signatures or heuristics to detect malicious software.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use signatures or heuristics to detect malicious software.",
      "prompts": [],
      "instruction": "How can you mitigate LNK Icon Smuggling (T1027.012)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use signatures or heuristics to detect malicious software.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Msiexec (T1218.007)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Block users or groups from installing unapproved software.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "How can you mitigate Msiexec (T1218.007)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Block users or groups from installing unapproved software.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-462 (Duplicate Key in Associative List (Alist))?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.\nC.  Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-462 (Duplicate Key in Associative List (Alist))",
      "ddmc_optionA": "Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].",
      "ddmc_optionB": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.",
      "ddmc_optionC": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
      "ddmc_optionD": "Force the administrator to change the credential upon installation.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-462 (Duplicate Key in Associative List (Alist))?\nA.  Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].\nB.  While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.\nC.  Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.\nD.  Force the administrator to change the credential upon installation.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Vulnerability Scanning (T1595.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Vulnerability Scanning (T1595.002)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Vulnerability Scanning (T1595.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Encrypting a file using a cryptographic key.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionC": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Encrypting a file using a cryptographic key.\nB.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nC.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Netsh Helper DLL (T1546.007)?\nA.  Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Credential API Hooking (T1056.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential API Hooking (T1056.004)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Comparing the \"text\" or \"code\" memory segments to a source of truth.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Using a digital signature to authenticate a file before opening.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Comparing the \"text\" or \"code\" memory segments to a source of truth.",
      "prompts": [],
      "instruction": "What is a method to mitigate Credential API Hooking (T1056.004)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Using a digital signature to authenticate a file before opening.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Event Triggered Execution (T1546)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Event Triggered Execution (T1546)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmc_optionC": "Perform regular software updates to mitigate exploitation risk.",
      "ddmc_optionD": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Perform regular software updates to mitigate exploitation risk.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Event Triggered Execution (T1546)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\nC.  Perform regular software updates to mitigate exploitation risk.\nD.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate User-Controlled Filename (CAPEC-73)?\nA.  Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.\nD.  Implementation: Perform input validation for all remote content, including remote and user-generated content\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "User-Controlled Filename (CAPEC-73)",
      "ddmc_optionA": "Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.",
      "ddmc_optionB": "Design: Use browser technologies that do not allow client side scripting.",
      "ddmc_optionC": "Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.",
      "ddmc_optionD": "Implementation: Perform input validation for all remote content, including remote and user-generated content",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design: Use browser technologies that do not allow client side scripting.",
      "prompts": [],
      "instruction": "How can you mitigate User-Controlled Filename (CAPEC-73)?\nA.  Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.\nD.  Implementation: Perform input validation for all remote content, including remote and user-generated content\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Data Transfer Size Limits (T1030)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Data Transfer Size Limits (T1030)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "How can you mitigate Data Transfer Size Limits (T1030)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Multi-hop Proxy (T1090.003)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionC": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Multi-hop Proxy (T1090.003)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nC.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Portable Executable Injection (T1055.002)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.\nC.  Analyzing email or instant message content to detect unauthorized activity.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.",
      "ddmc_optionC": "Analyzing email or instant message content to detect unauthorized activity.",
      "ddmc_optionD": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Portable Executable Injection (T1055.002)?\nA.  Employing file hash comparisons to detect known malware.\nB.  Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.\nC.  Analyzing email or instant message content to detect unauthorized activity.\nD.  Detecting any suspicious changes to files in a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  File eviction techniques evict files from system storage.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Storage Object Discovery (T1619)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Storage Object Discovery (T1619)?\nA.  File eviction techniques evict files from system storage.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring the data in a database.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "External Proxy (T1090.002)",
      "ddmc_optionA": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionB": "Restoring the data in a database.",
      "ddmc_optionC": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "prompts": [],
      "instruction": "What is a method to mitigate External Proxy (T1090.002)?\nA.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nB.  Restoring the data in a database.\nC.  Issue a new credential to a user which supercedes their old credential.\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Locking (CWE-667)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Locking (CWE-667)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Locking (CWE-667)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Web Session Cookie (T1539)",
      "ddmc_optionA": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "prompts": [],
      "instruction": "How can you mitigate Steal Web Session Cookie (T1539)?\nA.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Initiating a host's reboot sequence to terminate all running processes.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmc_optionA": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "prompts": [],
      "instruction": "What is a method to mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Initiating a host's reboot sequence to terminate all running processes.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect System Shutdown/Reboot (T1529)?\nA.  This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features.\nB.  Monitor for unexpected processes interacting with LSASS.exe. Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity. On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process. Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Medium Detecting Attempts to Steal Passwords from Memory, Powersploit)\nC.  Use process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006. Unexpected or unauthorized commands from network cli on network devices may also be associated with shutdown/reboot, e.g. the <code>reload</code> command.\nD.  Monitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "System Shutdown/Reboot (T1529)",
      "ddmc_optionA": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features.",
      "ddmc_optionB": "Monitor for unexpected processes interacting with LSASS.exe. Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity. On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process. Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Medium Detecting Attempts to Steal Passwords from Memory, Powersploit)",
      "ddmc_optionC": "Use process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006. Unexpected or unauthorized commands from network cli on network devices may also be associated with shutdown/reboot, e.g. the <code>reload</code> command.",
      "ddmc_optionD": "Monitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006. Unexpected or unauthorized commands from network cli on network devices may also be associated with shutdown/reboot, e.g. the <code>reload</code> command.",
      "prompts": [],
      "instruction": "How can you detect System Shutdown/Reboot (T1529)?\nA.  This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features.\nB.  Monitor for unexpected processes interacting with LSASS.exe. Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity. On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process. Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Medium Detecting Attempts to Steal Passwords from Memory, Powersploit)\nC.  Use process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006. Unexpected or unauthorized commands from network cli on network devices may also be associated with shutdown/reboot, e.g. the <code>reload</code> command.\nD.  Monitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1218.002 (Control Panel)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1218.002 (Control Panel)",
      "ddmc_optionA": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionB": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "How can you mitigate T1218.002 (Control Panel)?\nA.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nB.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmc_optionD": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Group Policy Preferences (T1552.006)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.\nD.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Creation of Temporary File in Directory with Insecure Permissions (CWE-379)",
      "ddmc_optionA": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionC": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "ddmc_optionD": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.",
      "prompts": [],
      "instruction": "How can you mitigate Creation of Temporary File in Directory with Insecure Permissions (CWE-379)?\nA.  Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nC.  Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.\nD.  Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Insertion of Sensitive Information into Log File (CWE-532)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Insertion of Sensitive Information into Log File (CWE-532)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Insertion of Sensitive Information into Log File (CWE-532)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Inter-application Flow Analysis Binary / Bytecode simple extractor - strings, ELF readers, etc.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Process eviction techniques terminate or remove running process.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "AppInit DLLs (T1546.010)",
      "ddmc_optionA": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionB": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Process eviction techniques terminate or remove running process.\nB.  A file created for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Manage the creation, modification, use, and permissions associated to user accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionB": "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nB.  Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect T1005 (Data from Local System)?\nA.  Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods).  Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file. Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis. Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide.  Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns  and RegDelNull .(Citations: Microsoft 4657 APR 2017, Microsoft Reghide NOV 2006, SpectorOps Hiding Reg Jul 2017, Microsoft RegDelNull July 2016)\nB.  Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.\nC.  While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.\nD.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Further, Network Device CLI commands may also be used to collect files such as configuration files with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files.(Citations: Mandiant APT41 Global Intrusion , US-CERT-TA18-106A)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1005 (Data from Local System)",
      "ddmc_optionA": "Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods).  Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file. Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis. Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide.  Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns  and RegDelNull .(Citations: Microsoft 4657 APR 2017, Microsoft Reghide NOV 2006, SpectorOps Hiding Reg Jul 2017, Microsoft RegDelNull July 2016)",
      "ddmc_optionB": "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.",
      "ddmc_optionC": "While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.",
      "ddmc_optionD": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Further, Network Device CLI commands may also be used to collect files such as configuration files with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files.(Citations: Mandiant APT41 Global Intrusion , US-CERT-TA18-106A)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Further, Network Device CLI commands may also be used to collect files such as configuration files with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files.(Citations: Mandiant APT41 Global Intrusion , US-CERT-TA18-106A)",
      "prompts": [],
      "instruction": "How can you detect T1005 (Data from Local System)?\nA.  Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods).  Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file. Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis. Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide.  Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns  and RegDelNull .(Citations: Microsoft 4657 APR 2017, Microsoft Reghide NOV 2006, SpectorOps Hiding Reg Jul 2017, Microsoft RegDelNull July 2016)\nB.  Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.\nC.  While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.\nD.  Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Further, Network Device CLI commands may also be used to collect files such as configuration files with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files.(Citations: Mandiant APT41 Global Intrusion , US-CERT-TA18-106A)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Replication Through Removable Media (T1091)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replication Through Removable Media (T1091)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Replication Through Removable Media (T1091)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Obsolete Function (CWE-477)?\nA.  Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.\nB.  Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Obsolete Function (CWE-477)",
      "ddmc_optionA": "Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.",
      "ddmc_optionB": "Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Obsolete Function (CWE-477)?\nA.  Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.\nB.  Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "Emulating instructions in a file looking for specific patterns.",
      "ddmc_optionC": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Emulating instructions in a file looking for specific patterns.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1037.001 (Logon Script (Windows))?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  Emulating instructions in a file looking for specific patterns.\nC.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Suspicious Comment (CWE-546)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Protect the core dump files from unauthorized access.\nC.  Software tools are capable of finding ADSs on your system.\nD.  Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Suspicious Comment (CWE-546)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Protect the core dump files from unauthorized access.",
      "ddmc_optionC": "Software tools are capable of finding ADSs on your system.",
      "ddmc_optionD": "Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Protect the core dump files from unauthorized access.",
      "prompts": [],
      "instruction": "How can you mitigate Suspicious Comment (CWE-546)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Protect the core dump files from unauthorized access.\nC.  Software tools are capable of finding ADSs on your system.\nD.  Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect BlueSmacking (CAPEC-666)?\nA.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nB.  Too many exceptions generated by the application as a result of malformed queries\nC.  Software being run on a system matches a file signature found in a malware database\nD.  Performance is degraded or halted by incoming L2CAP packets.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "BlueSmacking (CAPEC-666)",
      "ddmc_optionA": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "ddmc_optionB": "Too many exceptions generated by the application as a result of malformed queries",
      "ddmc_optionC": "Software being run on a system matches a file signature found in a malware database",
      "ddmc_optionD": "Performance is degraded or halted by incoming L2CAP packets.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Performance is degraded or halted by incoming L2CAP packets.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect BlueSmacking (CAPEC-666)?\nA.  File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution\nB.  Too many exceptions generated by the application as a result of malformed queries\nC.  Software being run on a system matches a file signature found in a malware database\nD.  Performance is degraded or halted by incoming L2CAP packets.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-583 (finalize() Method Declared Public)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-583 (finalize() Method Declared Public)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-583 (finalize() Method Declared Public)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Pre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restricting system configuration modifications to a specific user or group of users.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Information Discovery (T1082)",
      "ddmc_optionA": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionB": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "How can you mitigate System Information Discovery (T1082)?\nA.  Employing a pattern matching rule language to analyze the content of files.\nB.  Restricting system configuration modifications to a specific user or group of users.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restricting network traffic originating from any location.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "How can you mitigate Exfiltration Over Alternative Protocol (T1048)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Using a digital signature to authenticate a file before opening.\nC.  Restricting network traffic originating from any location.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Trusted Relationship (T1199)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "How can you mitigate Trusted Relationship (T1199)?\nA.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Expression is Always False (CWE-570)?\nA.  Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Expression is Always False (CWE-570)",
      "ddmc_optionA": "Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Expression is Always False (CWE-570)?\nA.  Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  A variety of automated static analysis tools can identify potentially exploitable code sequences in software. These tools may perform the analysis on source code, on binary code, or on an intermediate code representation (for example, during compilation).\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Change Default File Association (T1546.001)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Change Default File Association (T1546.001)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Change Default File Association (T1546.001)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dylib Hijacking (T1574.004)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Dylib Hijacking (T1574.004)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Cron (T1053.003)?\nA.  Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).\nB.  Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: <code>powershell \u2013v 2</code>). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment. Monitor for Windows event ID (EID) 400, specifically the <code>EngineVersion</code> field which shows the version of PowerShell running and may highlight a malicious downgrade attack. Monitor network data to detect cases where HTTP is used instead of HTTPS.(Citations: inv_ps_attacks)\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from Discovery of the system and network information or Lateral Movement to the originating process may also yield useful data.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cron (T1053.003)",
      "ddmc_optionA": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).",
      "ddmc_optionB": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmc_optionC": "Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: <code>powershell \u2013v 2</code>). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment. Monitor for Windows event ID (EID) 400, specifically the <code>EngineVersion</code> field which shows the version of PowerShell running and may highlight a malicious downgrade attack. Monitor network data to detect cases where HTTP is used instead of HTTPS.(Citations: inv_ps_attacks)",
      "ddmc_optionD": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from Discovery of the system and network information or Lateral Movement to the originating process may also yield useful data.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "prompts": [],
      "instruction": "What is a method to detect Cron (T1053.003)?\nA.  Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).\nB.  Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: <code>powershell \u2013v 2</code>). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment. Monitor for Windows event ID (EID) 400, specifically the <code>EngineVersion</code> field which shows the version of PowerShell running and may highlight a malicious downgrade attack. Monitor network data to detect cases where HTTP is used instead of HTTPS.(Citations: inv_ps_attacks)\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from Discovery of the system and network information or Lateral Movement to the originating process may also yield useful data.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Restricting a user account's access to resources.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compromise Host Software Binary (T1554)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionC": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionD": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "What is a method to mitigate Compromise Host Software Binary (T1554)?\nA.  Restricting a user account's access to resources.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Controlling access to local computer system resources with kernel-level capabilities.\nD.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)?\nA.  Protect access control list files.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Implement the validate() method and call super.validate() within that method.\nD.  Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)",
      "ddmc_optionA": "Protect access control list files.",
      "ddmc_optionB": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
      "ddmc_optionC": "Implement the validate() method and call super.validate() within that method.",
      "ddmc_optionD": "Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Protect access control list files.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-529 (Exposure of Access Control List Files to an Unauthorized Control Sphere)?\nA.  Protect access control list files.\nB.  If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.\nC.  Implement the validate() method and call super.validate() within that method.\nD.  Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect ARP Cache Poisoning (T1557.002)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\nC.  Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.\nD.  Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "ARP Cache Poisoning (T1557.002)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
      "ddmc_optionC": "Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.",
      "ddmc_optionD": "Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.",
      "prompts": [],
      "instruction": "How can you detect ARP Cache Poisoning (T1557.002)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\nC.  Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.\nD.  Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Buffer Overflow via Parameter Expansion (CAPEC-47)?\nA.  Ensure Public Keys are signed by a Certificate Authority\nB.  Implementation: Server routines should be determined by content not determined by filename or file extension.\nC.  Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system\nD.  Avoid giving elevated privileges to developers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Buffer Overflow via Parameter Expansion (CAPEC-47)",
      "ddmc_optionA": "Ensure Public Keys are signed by a Certificate Authority",
      "ddmc_optionB": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "ddmc_optionC": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
      "ddmc_optionD": "Avoid giving elevated privileges to developers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Buffer Overflow via Parameter Expansion (CAPEC-47)?\nA.  Ensure Public Keys are signed by a Certificate Authority\nB.  Implementation: Server routines should be determined by content not determined by filename or file extension.\nC.  Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system\nD.  Avoid giving elevated privileges to developers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CWE-1239 (Improper Zeroization of Hardware Register)?\nA.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nB.  Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-1239 (Improper Zeroization of Hardware Register)",
      "ddmc_optionA": "Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.",
      "ddmc_optionB": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
      "ddmc_optionC": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionD": "Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
      "prompts": [],
      "instruction": "How can you mitigate CWE-1239 (Improper Zeroization of Hardware Register)?\nA.  Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.\nB.  Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Restoring an entity's access to resources.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Restoring an entity's access to resources.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Restoring an entity's access to resources.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Employing a pattern matching rule language to analyze the content of files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionC": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "How can you mitigate CMSTP (T1218.003)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Analyzing failed connections in a network to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Audio Capture (T1123)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmc_optionD": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "prompts": [],
      "instruction": "What is a method to mitigate Audio Capture (T1123)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Limiting access to computer input/output (IO) ports to restrict unauthorized devices.\nD.  Analyzing failed connections in a network to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1562.002 (Disable Windows Event Logging)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Replacing old software on a computer system component.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1562.002 (Disable Windows Event Logging)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Replacing old software on a computer system component.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "How can you mitigate T1562.002 (Disable Windows Event Logging)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Replacing old software on a computer system component.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Protection for Outbound Error Messages and Alert Signals (CWE-1320)?\nA.  Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.\nB.  NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.\nC.  Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.\nD.  Do not use JNI calls if you don't trust the native library.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Protection for Outbound Error Messages and Alert Signals (CWE-1320)",
      "ddmc_optionA": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.",
      "ddmc_optionB": "NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.",
      "ddmc_optionC": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.",
      "ddmc_optionD": "Do not use JNI calls if you don't trust the native library.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Protection for Outbound Error Messages and Alert Signals (CWE-1320)?\nA.  Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.\nB.  NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.\nC.  Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.\nD.  Do not use JNI calls if you don't trust the native library.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Struts: Unused Validation Form (CWE-107)?\nA.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nB.  Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\nD.  Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Struts: Unused Validation Form (CWE-107)",
      "ddmc_optionA": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
      "ddmc_optionB": "Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.",
      "ddmc_optionC": "Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
      "ddmc_optionD": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
      "prompts": [],
      "instruction": "What is a method to mitigate Struts: Unused Validation Form (CWE-107)?\nA.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nB.  Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\nD.  Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1007 (System Service Discovery)?\nA.  Restricting network traffic originating from any location.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Employing file hash comparisons to detect known malware.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1007 (System Service Discovery)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "prompts": [],
      "instruction": "How can you mitigate T1007 (System Service Discovery)?\nA.  Restricting network traffic originating from any location.\nB.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nC.  Employing file hash comparisons to detect known malware.\nD.  Collecting network communication protocol metadata and identifying statistical outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Ingress Tool Transfer (T1105)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as <code>services.msc</code> or <code>eventvwr.msc</code>. Invoking non-Microsoft .msc files may be an indicator of malicious activity.\nC.  Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours. When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Ingress Tool Transfer (T1105)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as <code>services.msc</code> or <code>eventvwr.msc</code>. Invoking non-Microsoft .msc files may be an indicator of malicious activity.",
      "ddmc_optionC": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmc_optionD": "Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours. When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Ingress Tool Transfer (T1105)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as <code>services.msc</code> or <code>eventvwr.msc</code>. Invoking non-Microsoft .msc files may be an indicator of malicious activity.\nC.  Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as ftp, that does not normally occur may also be suspicious. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: University of Birmingham C2)\nD.  Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours. When authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Improper Export of Android Application Components (CWE-926)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Improper Export of Android Application Components (CWE-926)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Logon Script (Windows) (T1037.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmc_optionA": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Logon Script (Windows) (T1037.001)?\nA.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Domain Fronting (T1090.004)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate Domain Fronting (T1090.004)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Restricting network traffic originating from any location.\nD.  Employing a pattern matching rule language to analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Lateral Tool Transfer (T1570)?\nA.  Issue a new credential to a user which supercedes their old credential.\nB.  Analyzing the resources accessed by a user to identify unauthorized activity.\nC.  Identifying and extracting files from network application protocols through the use of network stream reassembly software.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Lateral Tool Transfer (T1570)",
      "ddmc_optionA": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionB": "Analyzing the resources accessed by a user to identify unauthorized activity.",
      "ddmc_optionC": "Identifying and extracting files from network application protocols through the use of network stream reassembly software.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Identifying and extracting files from network application protocols through the use of network stream reassembly software.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Lateral Tool Transfer (T1570)?\nA.  Issue a new credential to a user which supercedes their old credential.\nB.  Analyzing the resources accessed by a user to identify unauthorized activity.\nC.  Identifying and extracting files from network application protocols through the use of network stream reassembly software.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use of Inherently Dangerous Function (CWE-242)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use of Inherently Dangerous Function (CWE-242)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use of Inherently Dangerous Function (CWE-242)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1055.002 (Portable Executable Injection)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1055.002 (Portable Executable Injection)",
      "ddmc_optionA": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1055.002 (Portable Executable Injection)?\nA.  Blocking the execution of files on a host in accordance with defined application policy rules.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Reflection Amplification (T1498.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Reflection Amplification (T1498.002)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_optionC": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmc_optionD": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Reflection Amplification (T1498.002)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\nC.  Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\nD.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nB.  Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\nC.  Implementation: Perform output validation for all remote content.\nD.  Implementation: Appropriately deal with error messages.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmc_optionA": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "ddmc_optionB": "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.",
      "ddmc_optionC": "Implementation: Perform output validation for all remote content.",
      "ddmc_optionD": "Implementation: Appropriately deal with error messages.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "prompts": [],
      "instruction": "How can you mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nB.  Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\nC.  Implementation: Perform output validation for all remote content.\nD.  Implementation: Appropriately deal with error messages.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Insertion of Sensitive Information into Externally-Accessible File or Directory (CWE-538)?\nA.  Do not expose file and directory information to the user.\nB.  If an operation can throw an Exception, implement a handler for that specific exception.\nC.  If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Insertion of Sensitive Information into Externally-Accessible File or Directory (CWE-538)",
      "ddmc_optionA": "Do not expose file and directory information to the user.",
      "ddmc_optionB": "If an operation can throw an Exception, implement a handler for that specific exception.",
      "ddmc_optionC": "If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.",
      "ddmc_optionD": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Do not expose file and directory information to the user.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Insertion of Sensitive Information into Externally-Accessible File or Directory (CWE-538)?\nA.  Do not expose file and directory information to the user.\nB.  If an operation can throw an Exception, implement a handler for that specific exception.\nC.  If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.\nD.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Serializable Class Containing Sensitive Data (CWE-499)?\nA.  The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Serializable Class Containing Sensitive Data (CWE-499)",
      "ddmc_optionA": "The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Serializable Class Containing Sensitive Data (CWE-499)?\nA.  The external control or influence of filenames can often be detected using automated static analysis that models data flow within the product. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Limiting the transmission of a credential to a scoped set of relying parties.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Local Data Staging (T1074.001)",
      "ddmc_optionA": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionB": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Local Data Staging (T1074.001)?\nA.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nB.  Limiting the transmission of a credential to a scoped set of relying parties.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1565.001 (Stored Data Manipulation)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1565.001 (Stored Data Manipulation)",
      "ddmc_optionA": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "How can you mitigate T1565.001 (Stored Data Manipulation)?\nA.  Controlling access to local computer system resources with kernel-level capabilities.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Data Encrypted for Impact (T1486)?\nA.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\nB.  Consider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges</code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges</code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\nC.  Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\nD.  Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Data Encrypted for Impact (T1486)",
      "ddmc_optionA": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).",
      "ddmc_optionB": "Consider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges</code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges</code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.",
      "ddmc_optionC": "Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.",
      "ddmc_optionD": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Data Encrypted for Impact (T1486)?\nA.  Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\nB.  Consider monitoring for <code>/usr/libexec/security_authtrampoline</code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges</code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges</code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\nC.  Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\nD.  Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories. In some cases, monitoring for unusual kernel driver installation activity can aid in detection. In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1612 (Build Image on Host)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1612 (Build Image on Host)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionC": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_optionD": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "prompts": [],
      "instruction": "How can you mitigate T1612 (Build Image on Host)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nC.  Manage the creation, modification, use, and permissions associated to user accounts.\nD.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nB.  Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.\nC.  If applicable, confirm extensions/plugins are properly signed by the official developers.\nD.  Ensure deleted files are actually deleted.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Install Malicious Extension (CAPEC-698)",
      "ddmc_optionA": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionB": "Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.",
      "ddmc_optionC": "If applicable, confirm extensions/plugins are properly signed by the official developers.",
      "ddmc_optionD": "Ensure deleted files are actually deleted.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "If applicable, confirm extensions/plugins are properly signed by the official developers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Install Malicious Extension (CAPEC-698)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nB.  Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.\nC.  If applicable, confirm extensions/plugins are properly signed by the official developers.\nD.  Ensure deleted files are actually deleted.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Application Window Discovery (T1010)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Application Window Discovery (T1010)",
      "ddmc_optionA": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionD": "Restricting network traffic originating from untrusted networks destined towards a private host or enclave.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "How can you mitigate Application Window Discovery (T1010)?\nA.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nD.  Restricting network traffic originating from untrusted networks destined towards a private host or enclave.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CMSTP (T1218.003)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring a file for an entity to access.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CMSTP (T1218.003)",
      "ddmc_optionA": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "prompts": [],
      "instruction": "What is a method to mitigate CMSTP (T1218.003)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  Restoring a file for an entity to access.\nD.  Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-641 (Improper Restriction of Names for Files and Other Resources)",
      "ddmc_optionA": "Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.",
      "ddmc_optionB": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionC": "Do not allow users to control names of resources used on the server side.",
      "ddmc_optionD": "Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Do not allow users to control names of resources used on the server side.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-641 (Improper Restriction of Names for Files and Other Resources)?\nA.  Hardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that address CWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.\nB.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nC.  Do not allow users to control names of resources used on the server side.\nD.  Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Encrypting a file using a cryptographic key.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Bash History (T1552.003)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionC": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "What is a method to mitigate Bash History (T1552.003)?\nA.  Encrypting a file using a cryptographic key.\nB.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nC.  Using kernel-level capabilities to isolate processes.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-609 (Double-Checked Locking)?\nA.  Check return values to ensure locking operations are successful.\nB.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nC.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nD.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-609 (Double-Checked Locking)",
      "ddmc_optionA": "Check return values to ensure locking operations are successful.",
      "ddmc_optionB": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmc_optionC": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
      "ddmc_optionD": "In flat address space situations, never allow computing memory addresses as offsets from another memory address.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Check return values to ensure locking operations are successful.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-609 (Double-Checked Locking)?\nA.  Check return values to ensure locking operations are successful.\nB.  Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\nC.  Ensure that design documentation is detailed enough to allow for post-manufacturing verification.\nD.  In flat address space situations, never allow computing memory addresses as offsets from another memory address.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.\nC.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\nD.  Be mindful of your surroundings when discussing or viewing sensitive information in public areas.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Contaminate Resource (CAPEC-548)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.",
      "ddmc_optionC": "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
      "ddmc_optionD": "Be mindful of your surroundings when discussing or viewing sensitive information in public areas.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.",
      "prompts": [],
      "instruction": "How can you mitigate Contaminate Resource (CAPEC-548)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.\nC.  Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\nD.  Be mindful of your surroundings when discussing or viewing sensitive information in public areas.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Schema Poisoning (CAPEC-271)",
      "ddmc_optionA": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "ddmc_optionB": "Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.",
      "ddmc_optionC": "Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.",
      "ddmc_optionD": "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "prompts": [],
      "instruction": "How can you mitigate Schema Poisoning (CAPEC-271)?\nA.  Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.\nB.  Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\nC.  Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nD.  In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Path Equivalence: '\\multiple\\\\internal\\backslash' (CWE-53)?\nA.  Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.\nB.  Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Equivalence: '\\multiple\\\\internal\\backslash' (CWE-53)",
      "ddmc_optionA": "Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.",
      "ddmc_optionB": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "How can you mitigate Path Equivalence: '\\multiple\\\\internal\\backslash' (CWE-53)?\nA.  Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.\nB.  Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Web Portal Capture (T1056.003)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Web Portal Capture (T1056.003)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionC": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmc_optionD": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "prompts": [],
      "instruction": "What is a method to mitigate Web Portal Capture (T1056.003)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nC.  Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1543.001 (Launch Agent)",
      "ddmc_optionA": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "How can you mitigate T1543.001 (Launch Agent)?\nA.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  A Credential created for the purpose of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-523 (Unprotected Transport of Credentials)?\nA.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\nB.  Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.\nC.  Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-523 (Unprotected Transport of Credentials)",
      "ddmc_optionA": "Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.",
      "ddmc_optionB": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.",
      "ddmc_optionC": "Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-523 (Unprotected Transport of Credentials)?\nA.  Some systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.\nB.  Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.\nC.  Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Issue a new credential to a user which supercedes their old credential.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Owner/User Discovery (T1033)",
      "ddmc_optionA": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionB": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Modifying system configuration to increase password strength.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Preventing execution of any address in a memory region other than the code segment.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Owner/User Discovery (T1033)?\nA.  Preventing execution of any address in a memory region other than the code segment.\nB.  Issue a new credential to a user which supercedes their old credential.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Modifying system configuration to increase password strength.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nD.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Handling of Unicode Encoding (CWE-176)",
      "ddmc_optionA": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
      "ddmc_optionB": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionC": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
      "ddmc_optionD": "The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Handling of Unicode Encoding (CWE-176)?\nA.  Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\nB.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nC.  Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nD.  The hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Return of Stack Variable Address (CWE-562)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Return of Stack Variable Address (CWE-562)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "prompts": [],
      "instruction": "How can you detect Return of Stack Variable Address (CWE-562)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Hijacking a Privileged Thread of Execution (CAPEC-30)?\nA.  Design: The browser's security model could be fixed to not leak timing information for cross domain requests\nB.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nC.  Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)\nD.  Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hijacking a Privileged Thread of Execution (CAPEC-30)",
      "ddmc_optionA": "Design: The browser's security model could be fixed to not leak timing information for cross domain requests",
      "ddmc_optionB": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionC": "Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)",
      "ddmc_optionD": "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.",
      "prompts": [],
      "instruction": "How can you mitigate Hijacking a Privileged Thread of Execution (CAPEC-30)?\nA.  Design: The browser's security model could be fixed to not leak timing information for cross domain requests\nB.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nC.  Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)\nD.  Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cross Site Tracing (CAPEC-107)?\nA.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nB.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\nC.  Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cross Site Tracing (CAPEC-107)",
      "ddmc_optionA": "Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.",
      "ddmc_optionB": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)",
      "ddmc_optionC": "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.",
      "ddmc_optionD": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cross Site Tracing (CAPEC-107)?\nA.  Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.\nB.  Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\nC.  Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.\nD.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Issue a new credential to a user which supercedes their old credential.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "A file created for the purposes of deceiving an adversary.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Issue a new credential to a user which supercedes their old credential.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-125 (Flooding)",
      "ddmc_optionA": "Session tokens for specific host",
      "ddmc_optionB": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
      "ddmc_optionC": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionD": "Ensure that protocols have specific limits of scale configured.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Ensure that protocols have specific limits of scale configured.",
      "prompts": [],
      "instruction": "How can you mitigate CAPEC-125 (Flooding)?\nA.  Session tokens for specific host\nB.  Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nC.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nD.  Ensure that protocols have specific limits of scale configured.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Login Hook (T1037.002)?\nA.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nB.  Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Login Hook (T1037.002)",
      "ddmc_optionA": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionB": "Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.",
      "ddmc_optionC": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmc_optionD": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Login Hook (T1037.002)?\nA.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nB.  Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\nC.  Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\nD.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionD": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Using kernel-level capabilities to isolate processes.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nD.  Blocking the execution of files on a host in accordance with defined application policy rules.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Path Traversal: '\\..\\filename' (CWE-29)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Note that some template mechanisms provide built-in support for the appropriate encoding.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Path Traversal: '\\..\\filename' (CWE-29)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmc_optionB": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Note that some template mechanisms provide built-in support for the appropriate encoding.",
      "ddmc_optionC": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionD": "Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Path Traversal: '\\..\\filename' (CWE-29)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\nB.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Note that some template mechanisms provide built-in support for the appropriate encoding.\nC.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nD.  Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-188 (Reverse Engineering)?\nA.  Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nB.  Monitor and control access to the configuration management system.\nC.  Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.\nD.  Implementation: Hide HTTP response header software information filed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-188 (Reverse Engineering)",
      "ddmc_optionA": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
      "ddmc_optionB": "Monitor and control access to the configuration management system.",
      "ddmc_optionC": "Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.",
      "ddmc_optionD": "Implementation: Hide HTTP response header software information filed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-188 (Reverse Engineering)?\nA.  Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nB.  Monitor and control access to the configuration management system.\nC.  Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.\nD.  Implementation: Hide HTTP response header software information filed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate RC Scripts (T1037.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Protect sensitive information with strong encryption.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "RC Scripts (T1037.004)",
      "ddmc_optionA": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate RC Scripts (T1037.004)?\nA.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Protect sensitive information with strong encryption.\nD.  Block execution of code on a system through application control, and/or script blocking.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Space after Filename (T1036.006)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate Space after Filename (T1036.006)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Using a digital signature to authenticate a file before opening.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Group Policy Preferences (T1552.006)",
      "ddmc_optionA": "Restoring an software configuration.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionD": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "How can you mitigate Group Policy Preferences (T1552.006)?\nA.  Restoring an software configuration.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Employing file hash comparisons to detect known malware.\nD.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Portable Executable Injection (T1055.002)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Portable Executable Injection (T1055.002)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing a pattern matching rule language to analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate Portable Executable Injection (T1055.002)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Employing a pattern matching rule language to analyze the content of files.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restricting a user account's access to resources.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "Restricting a user account's access to resources.",
      "ddmc_optionB": "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  Restricting a user account's access to resources.\nB.  Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1565.001 (Stored Data Manipulation)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Employing file hash comparisons to detect known malware.\nC.  Cryptographically authenticating the bootloader software before system boot.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1565.001 (Stored Data Manipulation)",
      "ddmc_optionA": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Cryptographically authenticating the bootloader software before system boot.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1565.001 (Stored Data Manipulation)?\nA.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nB.  Employing file hash comparisons to detect known malware.\nC.  Cryptographically authenticating the bootloader software before system boot.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Trusted Relationship (T1199)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmc_optionC": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Trusted Relationship (T1199)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\nC.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Netsh Helper DLL (T1546.007)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Initiating a host's reboot sequence to terminate all running processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Initiating a host's reboot sequence to terminate all running processes.",
      "prompts": [],
      "instruction": "How can you mitigate Netsh Helper DLL (T1546.007)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Initiating a host's reboot sequence to terminate all running processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Write Handling in Limited-write Non-Volatile Memories (CWE-1246)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Include secure wear leveling algorithms and ensure they may not be bypassed.\nC.  Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.\nD.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Write Handling in Limited-write Non-Volatile Memories (CWE-1246)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
      "ddmc_optionC": "Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.",
      "ddmc_optionD": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Write Handling in Limited-write Non-Volatile Memories (CWE-1246)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  Include secure wear leveling algorithms and ensure they may not be bypassed.\nC.  Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.\nD.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1074.001 (Local Data Staging)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1074.001 (Local Data Staging)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1074.001 (Local Data Staging)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Credential Eviction techniques disable or remove compromised credentials from a computer network.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Replace Binaries (CAPEC-642)?\nA.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\nB.  Design: Minimize switch and option functionality to only that necessary for correct function of the command.\nC.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nD.  Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Replace Binaries (CAPEC-642)",
      "ddmc_optionA": "Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests",
      "ddmc_optionB": "Design: Minimize switch and option functionality to only that necessary for correct function of the command.",
      "ddmc_optionC": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "ddmc_optionD": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
      "prompts": [],
      "instruction": "What is a method to mitigate Replace Binaries (CAPEC-642)?\nA.  Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\nB.  Design: Minimize switch and option functionality to only that necessary for correct function of the command.\nC.  Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.\nD.  Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Audio Capture (T1123)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Audio Capture (T1123)",
      "ddmc_optionA": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmc_optionB": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmc_optionC": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmc_optionD": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "prompts": [],
      "instruction": "How can you mitigate Audio Capture (T1123)?\nA.  Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\nB.  Requiring proof of two or more pieces of evidence in order to authenticate a user.\nC.  Configuring a kernel to use an allow or deny list to filter kernel api calls.\nD.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Improper Restriction of Names for Files and Other Resources (CWE-641)?\nA.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nB.  Add an access control layer atop any unprotected interfaces for injecting errors.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\nD.  Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Restriction of Names for Files and Other Resources (CWE-641)",
      "ddmc_optionA": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
      "ddmc_optionB": "Add an access control layer atop any unprotected interfaces for injecting errors.",
      "ddmc_optionC": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.",
      "ddmc_optionD": "Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
      "prompts": [],
      "instruction": "How can you mitigate Improper Restriction of Names for Files and Other Resources (CWE-641)?\nA.  Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.\nB.  Add an access control layer atop any unprotected interfaces for injecting errors.\nC.  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer. Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\nD.  Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Choose a language that provides automatic memory management.\nB.  Merge common functionality into a single function and then call that function from across the entire code base.\nC.  Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-656 (Reliance on Security Through Obscurity)",
      "ddmc_optionA": "Choose a language that provides automatic memory management.",
      "ddmc_optionB": "Merge common functionality into a single function and then call that function from across the entire code base.",
      "ddmc_optionC": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
      "ddmc_optionD": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Choose a language that provides automatic memory management.\nB.  Merge common functionality into a single function and then call that function from across the entire code base.\nC.  Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.\nD.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Eavesdropping (CAPEC-651)?\nA.  Use an abstraction library to abstract away risky APIs. Not a complete solution.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.\nD.  If possible, physically disable the microphone on your machine if it is not needed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Eavesdropping (CAPEC-651)",
      "ddmc_optionA": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.",
      "ddmc_optionD": "If possible, physically disable the microphone on your machine if it is not needed.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "If possible, physically disable the microphone on your machine if it is not needed.",
      "prompts": [],
      "instruction": "What is a method to mitigate Eavesdropping (CAPEC-651)?\nA.  Use an abstraction library to abstract away risky APIs. Not a complete solution.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.\nD.  If possible, physically disable the microphone on your machine if it is not needed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect LSA Secrets (T1003.004)?\nA.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nB.  Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nD.  Monitor authentication logs for system and application login failures of Valid Accounts. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. Consider the following event IDs: * Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625. * Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771. * All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.(Citations: Trimarc Detecting Password Spraying)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "LSA Secrets (T1003.004)",
      "ddmc_optionA": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)",
      "ddmc_optionB": "Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.",
      "ddmc_optionC": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)",
      "ddmc_optionD": "Monitor authentication logs for system and application login failures of Valid Accounts. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. Consider the following event IDs: * Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625. * Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771. * All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.(Citations: Trimarc Detecting Password Spraying)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)",
      "prompts": [],
      "instruction": "How can you detect LSA Secrets (T1003.004)?\nA.  Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.(Citations: Powersploit)\nB.  Consider analyzing malware for features that may be associated with the adversary and/or their developers, such as compiler used, debugging artifacts, or code similarities. Malware repositories can also be used to identify additional samples associated with the adversary and identify development patterns over time. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.\nC.  Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\nD.  Monitor authentication logs for system and application login failures of Valid Accounts. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. Consider the following event IDs: * Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625. * Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771. * All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.(Citations: Trimarc Detecting Password Spraying)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Amplification (CAPEC-490)?\nA.  To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.\nB.  Session tokens for specific host\nC.  Hard Coded Alternate DNS server in applications\nD.  Design: Tunnel communications through a secure proxy\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Amplification (CAPEC-490)",
      "ddmc_optionA": "To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.",
      "ddmc_optionB": "Session tokens for specific host",
      "ddmc_optionC": "Hard Coded Alternate DNS server in applications",
      "ddmc_optionD": "Design: Tunnel communications through a secure proxy",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Amplification (CAPEC-490)?\nA.  To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.\nB.  Session tokens for specific host\nC.  Hard Coded Alternate DNS server in applications\nD.  Design: Tunnel communications through a secure proxy\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Phishing (CAPEC-98)?\nA.  Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.\nB.  Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.\nC.  Leverage multi-factor authentication for all authentication services.\nD.  Implementation: Perform input validation for all remote content.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Phishing (CAPEC-98)",
      "ddmc_optionA": "Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.",
      "ddmc_optionB": "Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.",
      "ddmc_optionC": "Leverage multi-factor authentication for all authentication services.",
      "ddmc_optionD": "Implementation: Perform input validation for all remote content.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Implementation: Perform input validation for all remote content.",
      "prompts": [],
      "instruction": "How can you mitigate Phishing (CAPEC-98)?\nA.  Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.\nB.  Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.\nC.  Leverage multi-factor authentication for all authentication services.\nD.  Implementation: Perform input validation for all remote content.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CWE-426 (Untrusted Search Path)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CWE-426 (Untrusted Search Path)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_optionC": "Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.",
      "ddmc_optionD": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect CWE-426 (Untrusted Search Path)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\nC.  Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.\nD.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nA.  Restoring a file for an entity to access.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Detects processes that modify, change, or replace their own code at runtime.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1140 (Deobfuscate/Decode Files or Information)",
      "ddmc_optionA": "Restoring a file for an entity to access.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmc_optionD": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Restoring a file for an entity to access.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nA.  Restoring a file for an entity to access.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Detects processes that modify, change, or replace their own code at runtime.\nD.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)?\nA.  Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.\nB.  Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.\nC.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\nD.  Provide clear upper and lower bounds on the scale of any protocols designed.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)",
      "ddmc_optionA": "Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.",
      "ddmc_optionB": "Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.",
      "ddmc_optionC": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "ddmc_optionD": "Provide clear upper and lower bounds on the scale of any protocols designed.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
      "prompts": [],
      "instruction": "How can you mitigate Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)?\nA.  Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.\nB.  Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.\nC.  Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.\nD.  Provide clear upper and lower bounds on the scale of any protocols designed.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Use After Free (CWE-416)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Use After Free (CWE-416)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmc_optionC": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious",
      "ddmc_optionD": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Use After Free (CWE-416)?\nA.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Binary / Bytecode Quality Analysis Compare binary / bytecode to application permission manifest\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source\nC.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\nD.  Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Office Application Startup (T1137)?\nA.  File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.\nB.  Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)\nC.  Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citations: CrowdStrike Outlook Forms, Outlook Today Home Page, Microsoft Detect Outlook Forms, SensePost NotRuler)\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Office Application Startup (T1137)",
      "ddmc_optionA": "File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.",
      "ddmc_optionB": "Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)",
      "ddmc_optionC": "Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citations: CrowdStrike Outlook Forms, Outlook Today Home Page, Microsoft Detect Outlook Forms, SensePost NotRuler)",
      "ddmc_optionD": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citations: CrowdStrike Outlook Forms, Outlook Today Home Page, Microsoft Detect Outlook Forms, SensePost NotRuler)",
      "prompts": [],
      "instruction": "How can you detect Office Application Startup (T1137)?\nA.  File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.\nB.  Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:\u201cWindows Credentials\u201d</code>). Consider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citations: Malwarebytes The Windows Vault, Microsoft CredEnumerate, Delpy Mimikatz Crendential Manager, Malwarebytes The Windows Vault)\nC.  Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output. SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citations: CrowdStrike Outlook Forms, Outlook Today Home Page, Microsoft Detect Outlook Forms, SensePost NotRuler)\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Intent Spoof (CAPEC-502)?\nA.  Prevent unknown or malicious software from loading through using an allowlist policy.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.\nD.  Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Intent Spoof (CAPEC-502)",
      "ddmc_optionA": "Prevent unknown or malicious software from loading through using an allowlist policy.",
      "ddmc_optionB": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
      "ddmc_optionC": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "ddmc_optionD": "Refer to the RFCs to safely decode URL.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "prompts": [],
      "instruction": "What is a method to mitigate Intent Spoof (CAPEC-502)?\nA.  Prevent unknown or malicious software from loading through using an allowlist policy.\nB.  Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\nC.  To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.\nD.  Refer to the RFCs to safely decode URL.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Improper Following of a Certificate's Chain of Trust (CWE-296)",
      "ddmc_optionA": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "How can you detect Improper Following of a Certificate's Chain of Trust (CWE-296)?\nA.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\nB.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credential Stuffing (T1110.004)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionD": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "prompts": [],
      "instruction": "How can you mitigate Credential Stuffing (T1110.004)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect HTTP Request Splitting (CAPEC-105)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Too many false or invalid queries to the database, especially those caused by malformed input.\nC.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\nD.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "HTTP Request Splitting (CAPEC-105)",
      "ddmc_optionA": "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
      "ddmc_optionB": "Too many false or invalid queries to the database, especially those caused by malformed input.",
      "ddmc_optionC": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "ddmc_optionD": "Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "prompts": [],
      "instruction": "How can you detect HTTP Request Splitting (CAPEC-105)?\nA.  You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\nB.  Too many false or invalid queries to the database, especially those caused by malformed input.\nC.  Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.\nD.  Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1547.008 (LSASS Driver)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  The process of temporarily disabling user accounts on a system or domain.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1547.008 (LSASS Driver)",
      "ddmc_optionA": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionB": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionC": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmc_optionD": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1547.008 (LSASS Driver)?\nA.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nB.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nC.  The process of temporarily disabling user accounts on a system or domain.\nD.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Hardware Design Specifications Are Altered (CAPEC-521)?\nA.  The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.\nB.  Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\nC.  Use mail.local\nD.  Monitor and control access to the configuration management system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Hardware Design Specifications Are Altered (CAPEC-521)",
      "ddmc_optionA": "The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
      "ddmc_optionB": "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
      "ddmc_optionC": "Use mail.local",
      "ddmc_optionD": "Monitor and control access to the configuration management system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
      "prompts": [],
      "instruction": "How can you mitigate Hardware Design Specifications Are Altered (CAPEC-521)?\nA.  The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.\nB.  Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\nC.  Use mail.local\nD.  Monitor and control access to the configuration management system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Credentials in Registry (T1552.002)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Preventing execution of any address in a memory region other than the code segment.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Credentials in Registry (T1552.002)",
      "ddmc_optionA": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmc_optionB": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "prompts": [],
      "instruction": "How can you mitigate Credentials in Registry (T1552.002)?\nA.  Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\nB.  Blocking the execution of files on a host in accordance with defined application policy rules.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Preventing execution of any address in a memory region other than the code segment.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1570 (Lateral Tool Transfer)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting network traffic originating from any location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1570 (Lateral Tool Transfer)",
      "ddmc_optionA": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1570 (Lateral Tool Transfer)?\nA.  Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting network traffic originating from any location.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1123 (Audio Capture)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1123 (Audio Capture)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "How can you mitigate T1123 (Audio Capture)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Detecting any suspicious changes to files in a computer system.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Cloud Infrastructure Discovery (T1580)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Infrastructure Discovery (T1580)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
      "ddmc_optionC": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "prompts": [],
      "instruction": "What is a method to mitigate Cloud Infrastructure Discovery (T1580)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\nC.  Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.\nD.  Manage the creation, modification, use, and permissions associated to user accounts.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Office Test (T1137.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Restoring an software configuration.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Office Test (T1137.002)",
      "ddmc_optionA": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_optionB": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionC": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionD": "Restoring an software configuration.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Restoring an software configuration.",
      "prompts": [],
      "instruction": "What is a method to mitigate Office Test (T1137.002)?\nA.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\nB.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nC.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nD.  Restoring an software configuration.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Executable Regular Expression Error (CWE-624)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Executable Regular Expression Error (CWE-624)",
      "ddmc_optionA": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionB": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.",
      "ddmc_optionC": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmc_optionD": "Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.",
      "prompts": [],
      "instruction": "What is a method to mitigate Executable Regular Expression Error (CWE-624)?\nA.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nB.  The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.\nC.  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nD.  Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Serialized Data with Nested Payloads (CAPEC-230)?\nA.  Include \"hosts file\"/IP address in the application.\nB.  Implementation: Upgrade phone lines. Note this may be prohibitively expensive\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Pick a robust implementation of the data parser.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serialized Data with Nested Payloads (CAPEC-230)",
      "ddmc_optionA": "Include \"hosts file\"/IP address in the application.",
      "ddmc_optionB": "Implementation: Upgrade phone lines. Note this may be prohibitively expensive",
      "ddmc_optionC": "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
      "ddmc_optionD": "Pick a robust implementation of the data parser.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Pick a robust implementation of the data parser.",
      "prompts": [],
      "instruction": "What is a method to mitigate Serialized Data with Nested Payloads (CAPEC-230)?\nA.  Include \"hosts file\"/IP address in the application.\nB.  Implementation: Upgrade phone lines. Note this may be prohibitively expensive\nC.  Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\nD.  Pick a robust implementation of the data parser.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Inducing Account Lockout (CAPEC-2)?\nA.  Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.\nB.  Implementation: Perform input validation for all remote content.\nC.  Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface\nD.  Ensure that all user-supplied input is validated before use.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Inducing Account Lockout (CAPEC-2)",
      "ddmc_optionA": "Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.",
      "ddmc_optionB": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionC": "Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface",
      "ddmc_optionD": "Ensure that all user-supplied input is validated before use.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.",
      "prompts": [],
      "instruction": "How can you mitigate Inducing Account Lockout (CAPEC-2)?\nA.  Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.\nB.  Implementation: Perform input validation for all remote content.\nC.  Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface\nD.  Ensure that all user-supplied input is validated before use.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "prompts": [],
      "instruction": "What is a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  The file removal technique deletes malicious artifacts or programs from a computer system.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Restricting system configuration modifications to a specific user or group of users.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Data Staged (T1074)?\nA.  Monitor network traffic for suspicious/malicious behavior involving DHCP, such as changes in DNS and/or gateway parameters. Additionally, monitor Windows logs for Event IDs (EIDs) 1341, 1342, 1020 and 1063, which specify that the IP allocations are low or have run out; these EIDs may indicate a denial of service attack.(Citations: dhcp_serv_op_events, solution_monitor_dhcp_scopes)\nB.  Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used. A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)\nC.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.\nD.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious behaviors that could relate to post-compromise behavior. Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances. for known bad sequence of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>WriteProcessMemory()</code> and <code>NtQueryInformationProcess()</code> with the parameter set to <code>ProcessBasicInformation</code> may be used for this technique.(Citations: Lazarus APT January 2022)\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Data Staged (T1074)",
      "ddmc_optionA": "Monitor network traffic for suspicious/malicious behavior involving DHCP, such as changes in DNS and/or gateway parameters. Additionally, monitor Windows logs for Event IDs (EIDs) 1341, 1342, 1020 and 1063, which specify that the IP allocations are low or have run out; these EIDs may indicate a denial of service attack.(Citations: dhcp_serv_op_events, solution_monitor_dhcp_scopes)",
      "ddmc_optionB": "Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used. A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)",
      "ddmc_optionC": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.",
      "ddmc_optionD": "Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious behaviors that could relate to post-compromise behavior. Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances. for known bad sequence of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>WriteProcessMemory()</code> and <code>NtQueryInformationProcess()</code> with the parameter set to <code>ProcessBasicInformation</code> may be used for this technique.(Citations: Lazarus APT January 2022)",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.",
      "prompts": [],
      "instruction": "What is a method to detect Data Staged (T1074)?\nA.  Monitor network traffic for suspicious/malicious behavior involving DHCP, such as changes in DNS and/or gateway parameters. Additionally, monitor Windows logs for Event IDs (EIDs) 1341, 1342, 1020 and 1063, which specify that the IP allocations are low or have run out; these EIDs may indicate a denial of service attack.(Citations: dhcp_serv_op_events, solution_monitor_dhcp_scopes)\nB.  Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used. A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)\nC.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.\nD.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious behaviors that could relate to post-compromise behavior. Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances. for known bad sequence of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>WriteProcessMemory()</code> and <code>NtQueryInformationProcess()</code> with the parameter set to <code>ProcessBasicInformation</code> may be used for this technique.(Citations: Lazarus APT January 2022)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Restoring the data in a database.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Using a digital signature to authenticate a file before opening.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionC": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "prompts": [],
      "instruction": "How can you mitigate System Time Discovery (T1124)?\nA.  Restoring the data in a database.\nB.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nC.  Using a digital signature to authenticate a file before opening.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nB.  Implementation: Implement communications to and from the registry using secure protocols\nC.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nD.  Ensure all remote methods are secured\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmc_optionA": "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.",
      "ddmc_optionB": "Implementation: Implement communications to and from the registry using secure protocols",
      "ddmc_optionC": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "ddmc_optionD": "Ensure all remote methods are secured",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Altered Installed BIOS (CAPEC-532)?\nA.  Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\nB.  Implementation: Implement communications to and from the registry using secure protocols\nC.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nD.  Ensure all remote methods are secured\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Cloud Service Dashboard (T1538)?\nA.  Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques. Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.\nB.  Consider monitoring for anomalous resolution changes for domain addresses. Efforts may need to be tailored to specific domains of interest as benign resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\nC.  Monitor interactions with images and containers by users to identify ones that are added or modified anomalously. In containerized environments, changes may be detectable by monitoring the Docker daemon logs or setting up and monitoring Kubernetes audit logs depending on registry configuration.\nD.  Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citations: AWS Console Sign-in Events)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cloud Service Dashboard (T1538)",
      "ddmc_optionA": "Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques. Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.",
      "ddmc_optionB": "Consider monitoring for anomalous resolution changes for domain addresses. Efforts may need to be tailored to specific domains of interest as benign resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.",
      "ddmc_optionC": "Monitor interactions with images and containers by users to identify ones that are added or modified anomalously. In containerized environments, changes may be detectable by monitoring the Docker daemon logs or setting up and monitoring Kubernetes audit logs depending on registry configuration.",
      "ddmc_optionD": "Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citations: AWS Console Sign-in Events)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citations: AWS Console Sign-in Events)",
      "prompts": [],
      "instruction": "What is a method to detect Cloud Service Dashboard (T1538)?\nA.  Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques. Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.\nB.  Consider monitoring for anomalous resolution changes for domain addresses. Efforts may need to be tailored to specific domains of interest as benign resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\nC.  Monitor interactions with images and containers by users to identify ones that are added or modified anomalously. In containerized environments, changes may be detectable by monitoring the Docker daemon logs or setting up and monitoring Kubernetes audit logs depending on registry configuration.\nD.  Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citations: AWS Console Sign-in Events)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  File eviction techniques evict files from system storage.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "COR_PROFILER (T1574.012)",
      "ddmc_optionA": "File eviction techniques evict files from system storage.",
      "ddmc_optionB": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate COR_PROFILER (T1574.012)?\nA.  File eviction techniques evict files from system storage.\nB.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  The file removal technique deletes malicious artifacts or programs from a computer system.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect T1596.004 (CDNs)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nC.  In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: Analyzing CS Dec 2020)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "T1596.004 (CDNs)",
      "ddmc_optionA": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionB": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
      "ddmc_optionC": "In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: Analyzing CS Dec 2020)",
      "ddmc_optionD": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "What is a method to detect T1596.004 (CDNs)?\nA.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nB.  Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\nC.  In some cases, malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in Cobalt Strike payloads. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.(Citations: Analyzing CS Dec 2020)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing file hash comparisons to detect known malware.\nC.  Blocking the resolution of any subdomain of a specified domain name.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionC": "Blocking the resolution of any subdomain of a specified domain name.",
      "ddmc_optionD": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Employing file hash comparisons to detect known malware.\nC.  Blocking the resolution of any subdomain of a specified domain name.\nD.  Preventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1055.005 (Thread Local Storage)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1055.005 (Thread Local Storage)",
      "ddmc_optionA": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionB": "Using kernel-level capabilities to isolate processes.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Using kernel-level capabilities to isolate processes.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1055.005 (Thread Local Storage)?\nA.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nB.  Using kernel-level capabilities to isolate processes.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1574.012 (COR_PROFILER)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Cryptographically authenticating the bootloader software before system boot.\nC.  Analyzing a Container Image with respect to a set of policies.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1574.012 (COR_PROFILER)",
      "ddmc_optionA": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionB": "Cryptographically authenticating the bootloader software before system boot.",
      "ddmc_optionC": "Analyzing a Container Image with respect to a set of policies.",
      "ddmc_optionD": "Analyzing the duration of user sessions in order to detect unauthorized activity.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "How can you mitigate T1574.012 (COR_PROFILER)?\nA.  Employing a pattern matching algorithm to statically analyze the content of files.\nB.  Cryptographically authenticating the bootloader software before system boot.\nC.  Analyzing a Container Image with respect to a set of policies.\nD.  Analyzing the duration of user sessions in order to detect unauthorized activity.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Firmware Not Updateable (CWE-1277)?\nA.  Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nB.  Implement the necessary functionality to allow the firmware to be updated.\nC.  Use industry standard APIs to synchronize your code.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Firmware Not Updateable (CWE-1277)",
      "ddmc_optionA": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.",
      "ddmc_optionB": "Implement the necessary functionality to allow the firmware to be updated.",
      "ddmc_optionC": "Use industry standard APIs to synchronize your code.",
      "ddmc_optionD": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Implement the necessary functionality to allow the firmware to be updated.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Firmware Not Updateable (CWE-1277)?\nA.  Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nB.  Implement the necessary functionality to allow the firmware to be updated.\nC.  Use industry standard APIs to synchronize your code.\nD.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1597.002 (Purchase Technical Data)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Block users or groups from installing unapproved software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1597.002 (Purchase Technical Data)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Block users or groups from installing unapproved software.",
      "ddmc_optionC": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionD": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "How can you mitigate T1597.002 (Purchase Technical Data)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Block users or groups from installing unapproved software.\nC.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nD.  Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Use of Obsolete Function (CWE-477)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Use a tool that dynamically detects memory management problems, such as valgrind.\nC.  Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.\nD.  If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Obsolete Function (CWE-477)",
      "ddmc_optionA": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmc_optionB": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmc_optionC": "Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.",
      "ddmc_optionD": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.",
      "prompts": [],
      "instruction": "What is a method to mitigate Use of Obsolete Function (CWE-477)?\nA.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\nB.  Use a tool that dynamically detects memory management problems, such as valgrind.\nC.  Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.\nD.  If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Process eviction techniques terminate or remove running process.\nC.  Restricting network traffic originating from any location.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1558.003 (Kerberoasting)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "Process eviction techniques terminate or remove running process.",
      "ddmc_optionC": "Restricting network traffic originating from any location.",
      "ddmc_optionD": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting network traffic originating from any location.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1558.003 (Kerberoasting)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  Process eviction techniques terminate or remove running process.\nC.  Restricting network traffic originating from any location.\nD.  Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)?\nA.  Review security identifier decoders for design inconsistencies and common weaknesses.\nB.  Implementation: Check the integrity of the dynamically linked libraries before use them.\nC.  Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.\nD.  Require SSL for update channels and implement certificate transparency based verification.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)",
      "ddmc_optionA": "Review security identifier decoders for design inconsistencies and common weaknesses.",
      "ddmc_optionB": "Implementation: Check the integrity of the dynamically linked libraries before use them.",
      "ddmc_optionC": "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
      "ddmc_optionD": "Require SSL for update channels and implement certificate transparency based verification.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Review security identifier decoders for design inconsistencies and common weaknesses.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)?\nA.  Review security identifier decoders for design inconsistencies and common weaknesses.\nB.  Implementation: Check the integrity of the dynamically linked libraries before use them.\nC.  Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.\nD.  Require SSL for update channels and implement certificate transparency based verification.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Match Legitimate Name or Location (T1036.005)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Employing a pattern matching algorithm to statically analyze the content of files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-586 (Object Injection)?\nA.  Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.\nB.  Design: Limit which types can be deserialized.\nC.  Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nD.  Design: Default deny access control policies\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-586 (Object Injection)",
      "ddmc_optionA": "Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.",
      "ddmc_optionB": "Design: Limit which types can be deserialized.",
      "ddmc_optionC": "Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.",
      "ddmc_optionD": "Design: Default deny access control policies",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Design: Limit which types can be deserialized.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-586 (Object Injection)?\nA.  Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.\nB.  Design: Limit which types can be deserialized.\nC.  Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nD.  Design: Default deny access control policies\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Confluence (T1213.001)?\nA.  Employing file hash comparisons to detect known malware.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Analyzing inbound network session or connection attempt volume.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Confluence (T1213.001)",
      "ddmc_optionA": "Employing file hash comparisons to detect known malware.",
      "ddmc_optionB": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_optionC": "Analyzing inbound network session or connection attempt volume.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Confluence (T1213.001)?\nA.  Employing file hash comparisons to detect known malware.\nB.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\nC.  Analyzing inbound network session or connection attempt volume.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.\nB.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nC.  Disable scripting languages such as JavaScript in browser\nD.  Design: Tunnel communications through a secure proxy\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Using Malicious Files (CAPEC-17)",
      "ddmc_optionA": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
      "ddmc_optionB": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "ddmc_optionC": "Disable scripting languages such as JavaScript in browser",
      "ddmc_optionD": "Design: Tunnel communications through a secure proxy",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
      "prompts": [],
      "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.\nB.  Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nC.  Disable scripting languages such as JavaScript in browser\nD.  Design: Tunnel communications through a secure proxy\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Design: Enforce principle of least privilege\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Using Malicious Files (CAPEC-17)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.",
      "ddmc_optionC": "Protect environment variables against unauthorized read and write access.",
      "ddmc_optionD": "Design: Enforce principle of least privilege",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Enforce principle of least privilege",
      "prompts": [],
      "instruction": "How can you mitigate Using Malicious Files (CAPEC-17)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.\nC.  Protect environment variables against unauthorized read and write access.\nD.  Design: Enforce principle of least privilege\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Steal Application Access Token (T1528)?\nA.  Analyzing failed connections in a network to detect unauthorized activity.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmc_optionB": "Comparing the \"text\" or \"code\" memory segments to a source of truth.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Steal Application Access Token (T1528)?\nA.  Analyzing failed connections in a network to detect unauthorized activity.\nB.  Comparing the \"text\" or \"code\" memory segments to a source of truth.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  A Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Use of Blocking Code in Single-threaded, Non-blocking Context (CWE-1322)?\nA.  Assign IP addresses that are not 0.0.0.0.\nB.  Do not store unnecessarily sensitive information in the cache.\nC.  If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).\nD.  For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Use of Blocking Code in Single-threaded, Non-blocking Context (CWE-1322)",
      "ddmc_optionA": "Assign IP addresses that are not 0.0.0.0.",
      "ddmc_optionB": "Do not store unnecessarily sensitive information in the cache.",
      "ddmc_optionC": "If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).",
      "ddmc_optionD": "For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.",
      "prompts": [],
      "instruction": "How can you mitigate Use of Blocking Code in Single-threaded, Non-blocking Context (CWE-1322)?\nA.  Assign IP addresses that are not 0.0.0.0.\nB.  Do not store unnecessarily sensitive information in the cache.\nC.  If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).\nD.  For expensive computations, consider breaking them up into multiple smaller computations. Refer to the documentation of the framework being used for guidance.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CAPEC-132 (Symlink Attack)?\nA.  Disable script execution.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Design: Use libraries and templates that minimize unfiltered input.\nD.  Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-132 (Symlink Attack)",
      "ddmc_optionA": "Disable script execution.",
      "ddmc_optionB": "Design: Use browser technologies that do not allow client side scripting.",
      "ddmc_optionC": "Design: Use libraries and templates that minimize unfiltered input.",
      "ddmc_optionD": "Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.",
      "prompts": [],
      "instruction": "What is a method to mitigate CAPEC-132 (Symlink Attack)?\nA.  Disable script execution.\nB.  Design: Use browser technologies that do not allow client side scripting.\nC.  Design: Use libraries and templates that minimize unfiltered input.\nD.  Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Steal Application Access Token (T1528)",
      "ddmc_optionA": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_optionB": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmc_optionC": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionD": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "prompts": [],
      "instruction": "What is a method to mitigate Steal Application Access Token (T1528)?\nA.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\nB.  Deleting a set of credentials permanently to prevent them from being used to authenticate.\nC.  A file created for the purposes of deceiving an adversary.\nD.  Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unchecked Input for Loop Condition (CWE-606)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Do not use user-controlled data for loop conditions.\nC.  Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.\nD.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unchecked Input for Loop Condition (CWE-606)",
      "ddmc_optionA": "Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.",
      "ddmc_optionB": "Do not use user-controlled data for loop conditions.",
      "ddmc_optionC": "Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.",
      "ddmc_optionD": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Do not use user-controlled data for loop conditions.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unchecked Input for Loop Condition (CWE-606)?\nA.  Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nB.  Do not use user-controlled data for loop conditions.\nC.  Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.\nD.  Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Ptrace System Calls (T1055.008)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Ptrace System Calls (T1055.008)",
      "ddmc_optionA": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_optionB": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionC": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionD": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "prompts": [],
      "instruction": "How can you mitigate Ptrace System Calls (T1055.008)?\nA.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\nB.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nC.  Block execution of code on a system through application control, and/or script blocking.\nD.  Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Remote Code Inclusion (CAPEC-253)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\nC.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nD.  Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Remote Code Inclusion (CAPEC-253)",
      "ddmc_optionA": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
      "ddmc_optionB": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
      "ddmc_optionC": "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
      "ddmc_optionD": "Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
      "prompts": [],
      "instruction": "What is a method to mitigate Remote Code Inclusion (CAPEC-253)?\nA.  There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\nB.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\nC.  Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.\nD.  Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Assigning instead of Comparing (CWE-481)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Assigning instead of Comparing (CWE-481)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmc_optionC": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Assigning instead of Comparing (CWE-481)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\nC.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nD.  According to SOAR, the following detection techniques may be useful: Highly cost effective: Man-in-the-middle attack tool\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Compiled HTML File (T1218.001)",
      "ddmc_optionA": "A file created for the purposes of deceiving an adversary.",
      "ddmc_optionB": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmc_optionC": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionD": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Compiled HTML File (T1218.001)?\nA.  A file created for the purposes of deceiving an adversary.\nB.  Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\nC.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nD.  Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate System Time Discovery (T1124)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  Restoring a file for an entity to access.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "System Time Discovery (T1124)",
      "ddmc_optionA": "Using a digital signature to authenticate a file before opening.",
      "ddmc_optionB": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmc_optionC": "Restoring a file for an entity to access.",
      "ddmc_optionD": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Using a digital signature to authenticate a file before opening.",
      "prompts": [],
      "instruction": "What is a method to mitigate System Time Discovery (T1124)?\nA.  Using a digital signature to authenticate a file before opening.\nB.  Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\nC.  Restoring a file for an entity to access.\nD.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Protect sensitive information with strong encryption.\nD.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmc_optionA": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_optionB": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionC": "Protect sensitive information with strong encryption.",
      "ddmc_optionD": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "prompts": [],
      "instruction": "How can you mitigate T1070.002 (Clear Linux or Mac System Logs)?\nA.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\nB.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nC.  Protect sensitive information with strong encryption.\nD.  Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Serialized Data External Linking (CAPEC-201)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Configure the serialized data processor to only retrieve external entities from trusted sources.\nC.  Implementation: The victim should configure the browser to minimize active content from untrusted sources.\nD.  Enable at least AES Kerberos encryption for tickets.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Serialized Data External Linking (CAPEC-201)",
      "ddmc_optionA": "Implementation: Perform input validation for all remote content.",
      "ddmc_optionB": "Configure the serialized data processor to only retrieve external entities from trusted sources.",
      "ddmc_optionC": "Implementation: The victim should configure the browser to minimize active content from untrusted sources.",
      "ddmc_optionD": "Enable at least AES Kerberos encryption for tickets.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Configure the serialized data processor to only retrieve external entities from trusted sources.",
      "prompts": [],
      "instruction": "What is a method to mitigate Serialized Data External Linking (CAPEC-201)?\nA.  Implementation: Perform input validation for all remote content.\nB.  Configure the serialized data processor to only retrieve external entities from trusted sources.\nC.  Implementation: The victim should configure the browser to minimize active content from untrusted sources.\nD.  Enable at least AES Kerberos encryption for tickets.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Android Activity Hijack (CAPEC-501)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nB.  To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).\nC.  Implementation: Disable scripting languages such as JavaScript in browser\nD.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Android Activity Hijack (CAPEC-501)",
      "ddmc_optionA": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmc_optionB": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).",
      "ddmc_optionC": "Implementation: Disable scripting languages such as JavaScript in browser",
      "ddmc_optionD": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Android Activity Hijack (CAPEC-501)?\nA.  An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nB.  To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).\nC.  Implementation: Disable scripting languages such as JavaScript in browser\nD.  Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Cloud Account (T1136.003)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Cloud Account (T1136.003)",
      "ddmc_optionA": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmc_optionB": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmc_optionC": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Cloud Account (T1136.003)?\nA.  Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\nB.  Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.\nC.  Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Improper Export of Android Application Components (CWE-926)?\nA.  Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Limit Content Provider permissions (read/write) as appropriate.\nD.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmc_optionA": "Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.",
      "ddmc_optionB": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionC": "Limit Content Provider permissions (read/write) as appropriate.",
      "ddmc_optionD": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Limit Content Provider permissions (read/write) as appropriate.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Improper Export of Android Application Components (CWE-926)?\nA.  Map can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.\nB.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nC.  Limit Content Provider permissions (read/write) as appropriate.\nD.  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmc_optionA": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionB": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmc_optionC": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmc_optionD": "Restricting network traffic originating from any location.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Symmetric Cryptography (T1573.001)?\nA.  Restricting access to a local file by configuring operating system functionality.\nB.  User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\nC.  Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\nD.  Restricting network traffic originating from any location.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate CAPEC-606 (Weakening of Cellular Encryption)?\nA.  Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.\nB.  Be mindful of your surroundings when discussing sensitive information in public areas.\nC.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nD.  Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CAPEC-606 (Weakening of Cellular Encryption)",
      "ddmc_optionA": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.",
      "ddmc_optionB": "Be mindful of your surroundings when discussing sensitive information in public areas.",
      "ddmc_optionC": "Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.",
      "ddmc_optionD": "Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate CAPEC-606 (Weakening of Cellular Encryption)?\nA.  Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.\nB.  Be mindful of your surroundings when discussing sensitive information in public areas.\nC.  Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nD.  Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect CAPEC-653 (Use of Known Operating System Credentials)?\nA.  There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.\nB.  You receive a text message from an entity that you are not even a customer of prompting you to log into your account.\nC.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nD.  Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CAPEC-653 (Use of Known Operating System Credentials)",
      "ddmc_optionA": "There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.",
      "ddmc_optionB": "You receive a text message from an entity that you are not even a customer of prompting you to log into your account.",
      "ddmc_optionC": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "ddmc_optionD": "Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
      "prompts": [],
      "instruction": "How can you detect CAPEC-653 (Use of Known Operating System Credentials)?\nA.  There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.\nB.  You receive a text message from an entity that you are not even a customer of prompting you to log into your account.\nC.  Suspicious or Malicious software is downloaded/installed on systems within the domain.\nD.  Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nB.  When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system.\nD.  By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "CWE-656 (Reliance on Security Through Obscurity)",
      "ddmc_optionA": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmc_optionB": "When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.",
      "ddmc_optionC": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
      "ddmc_optionD": "By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.",
      "prompts": [],
      "instruction": "What is a method to mitigate CWE-656 (Reliance on Security Through Obscurity)?\nA.  Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nB.  When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.\nC.  Follow the principle of least privilege when assigning access rights to entities in a software system.\nD.  By using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Restricting network traffic originating from any location.\nB.  Restoring a file for an entity to access.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Rootkit (T1014)",
      "ddmc_optionA": "Restricting network traffic originating from any location.",
      "ddmc_optionB": "Restoring a file for an entity to access.",
      "ddmc_optionC": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionD": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Rootkit (T1014)?\nA.  Restricting network traffic originating from any location.\nB.  Restoring a file for an entity to access.\nC.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nD.  Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to detect Firmware (T1592.003)?\nA.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Firmware (T1592.003)",
      "ddmc_optionA": "Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmc_optionB": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionC": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_optionD": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "prompts": [],
      "instruction": "Which one of the following is a way to detect Firmware (T1592.003)?\nA.  Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\nB.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nC.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\nD.  Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Launch Agent (T1543.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Agent (T1543.001)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "A Credential created for the purpose of deceiving an adversary.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "How can you mitigate Launch Agent (T1543.001)?\nA.  Encrypting a file using a cryptographic key.\nB.  A Credential created for the purpose of deceiving an adversary.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Restoring an object for an entity to access. This is the broadest class for object restoral.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionB": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmc_optionC": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmc_optionD": "File eviction techniques evict files from system storage.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "File eviction techniques evict files from system storage.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nB.  Deploying a network resource for the purposes of deceiving an adversary.\nC.  Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.\nD.  File eviction techniques evict files from system storage.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Preventing execution of any address in a memory region other than the code segment.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Launch Daemon (T1543.004)",
      "ddmc_optionA": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionB": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmc_optionC": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Employing file hash comparisons to detect known malware.",
      "prompts": [],
      "instruction": "How can you mitigate Launch Daemon (T1543.004)?\nA.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nB.  Preventing execution of any address in a memory region other than the code segment.\nC.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Analyzing database queries to detect SQL Injection.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Dynamic Resolution (T1568)",
      "ddmc_optionA": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmc_optionD": "Analyzing database queries to detect SQL Injection.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "prompts": [],
      "instruction": "What is a method to mitigate Dynamic Resolution (T1568)?\nA.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  The detection of an internal host relaying traffic between the internal network and the external network.\nD.  Analyzing database queries to detect SQL Injection.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmc_optionA": "Detecting any suspicious changes to files in a computer system.",
      "ddmc_optionB": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_optionC": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmc_optionD": "Using kernel-level capabilities to isolate processes.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "prompts": [],
      "instruction": "How can you mitigate Sudo and Sudo Caching (T1548.003)?\nA.  Detecting any suspicious changes to files in a computer system.\nB.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\nC.  Blocking the execution of files on a host in accordance with defined application policy rules.\nD.  Using kernel-level capabilities to isolate processes.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Incorrect Regular Expression (CWE-185)?\nA.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nB.  Do not use \"_blank\" targets. However, this can affect the usability of the application.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Incorrect Regular Expression (CWE-185)",
      "ddmc_optionA": "When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.",
      "ddmc_optionB": "Do not use \"_blank\" targets. However, this can affect the usability of the application.",
      "ddmc_optionC": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmc_optionD": "Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "prompts": [],
      "instruction": "What is a method to mitigate Incorrect Regular Expression (CWE-185)?\nA.  When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nB.  Do not use \"_blank\" targets. However, this can affect the usability of the application.\nC.  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nD.  Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmc_optionC": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionD": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "prompts": [],
      "instruction": "What is a method to mitigate Unix Shell Configuration Modification (T1546.004)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Monitoring platform components such as operating systems software, hardware devices, or firmware.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Collecting host certificates from network traffic or other passive sources like a certificate transparency log and analyzing them for unauthorized activity.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "AppInit DLLs (T1546.010)",
      "ddmc_optionA": "Collecting host certificates from network traffic or other passive sources like a certificate transparency log and analyzing them for unauthorized activity.",
      "ddmc_optionB": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionC": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmc_optionD": "Encrypting a file using a cryptographic key.",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Encrypting a file using a cryptographic key.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate AppInit DLLs (T1546.010)?\nA.  Collecting host certificates from network traffic or other passive sources like a certificate transparency log and analyzing them for unauthorized activity.\nB.  Restricting access to a local file by configuring operating system functionality.\nC.  Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\nD.  Encrypting a file using a cryptographic key.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect CAPEC-78 (Using Escaped Slashes in Alternate Encoding)?\nA.  Unicode encoded data is passed to APIs where it is not expected\nB.  Many incorrect login attempts are detected by the system.\nC.  An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.\nD.  Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "CAPEC-78 (Using Escaped Slashes in Alternate Encoding)",
      "ddmc_optionA": "Unicode encoded data is passed to APIs where it is not expected",
      "ddmc_optionB": "Many incorrect login attempts are detected by the system.",
      "ddmc_optionC": "An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
      "ddmc_optionD": "Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
      "prompts": [],
      "instruction": "What is a method to detect CAPEC-78 (Using Escaped Slashes in Alternate Encoding)?\nA.  Unicode encoded data is passed to APIs where it is not expected\nB.  Many incorrect login attempts are detected by the system.\nC.  An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.\nD.  Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate T1552.002 (Credentials in Registry)?\nA.  Encrypting a file using a cryptographic key.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1552.002 (Credentials in Registry)",
      "ddmc_optionA": "Encrypting a file using a cryptographic key.",
      "ddmc_optionB": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmc_optionC": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionD": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate T1552.002 (Credentials in Registry)?\nA.  Encrypting a file using a cryptographic key.\nB.  Employing a pattern matching algorithm to statically analyze the content of files.\nC.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nD.  Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmc_optionA": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmc_optionB": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmc_optionC": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmc_optionD": "Employing file hash comparisons to detect known malware.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "prompts": [],
      "instruction": "Which one of the following is a way to mitigate Non-Application Layer Protocol (T1095)?\nA.  Determining which credentials may have been compromised by analyzing the user logon history of a particular system.\nB.  Restricting network traffic originating from a private host or enclave destined towards untrusted networks.\nC.  The file removal technique deletes malicious artifacts or programs from a computer system.\nD.  Employing file hash comparisons to detect known malware.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Encrypted Channel (T1573)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Encrypted Channel (T1573)",
      "ddmc_optionA": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)",
      "ddmc_optionB": "Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmc_optionC": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)",
      "ddmc_optionD": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)",
      "prompts": [],
      "instruction": "What is a method to detect Encrypted Channel (T1573)?\nA.  SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citations: SANS Decrypting SSL, SEI SSL Inspection Risks, University of Birmingham C2)\nB.  Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nC.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\nD.  Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you detect Web Service (T1102)?\nA.  Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citations: AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft 4768 TGT 2017)\nB.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update)\nC.  Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer.",
    "context": "",
    "output": "D",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Web Service (T1102)",
      "ddmc_optionA": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citations: AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft 4768 TGT 2017)",
      "ddmc_optionB": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update)",
      "ddmc_optionC": "Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.",
      "ddmc_optionD": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "ddmc_answer": "D",
      "ddmc_detection/mitigation": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "prompts": [],
      "instruction": "How can you detect Web Service (T1102)?\nA.  Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).(Citations: AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft 4768 TGT 2017)\nB.  Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update)\nC.  Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.\nD.  Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate T1505.002 (Transport Agent)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "T1505.002 (Transport Agent)",
      "ddmc_optionA": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "prompts": [],
      "instruction": "What is a method to mitigate T1505.002 (Transport Agent)?\nA.  Block execution of code on a system through application control, and/or script blocking.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Social Media (T1593.001)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Social Media (T1593.001)",
      "ddmc_optionA": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmc_optionB": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmc_optionC": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmc_optionD": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "prompts": [],
      "instruction": "What is a method to mitigate Social Media (T1593.001)?\nA.  This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\nB.  Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\nC.  Restrict execution of code to a virtual environment on or in transit to an endpoint system.\nD.  Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Stored Data Manipulation (T1565.001)?\nA.  Restoring the data in a database.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmc_optionA": "Restoring the data in a database.",
      "ddmc_optionB": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmc_optionC": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmc_optionD": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "prompts": [],
      "instruction": "What is a method to mitigate Stored Data Manipulation (T1565.001)?\nA.  Restoring the data in a database.\nB.  Restoring an object for an entity to access. This is the broadest class for object restoral.\nC.  Network Isolation techniques prevent network hosts from accessing non-essential system network resources.\nD.  Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer.",
    "context": "",
    "output": "C",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "LSASS Driver (T1547.008)",
      "ddmc_optionA": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmc_optionB": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmc_optionC": "Restricting access to a local file by configuring operating system functionality.",
      "ddmc_optionD": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmc_answer": "C",
      "ddmc_detection/mitigation": "Restricting access to a local file by configuring operating system functionality.",
      "prompts": [],
      "instruction": "How can you mitigate LSASS Driver (T1547.008)?\nA.  Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.\nB.  Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\nC.  Restricting access to a local file by configuring operating system functionality.\nD.  File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer.",
    "context": "",
    "output": "B",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "mitigate",
      "ddmc_node_name": "Screen Capture (T1113)",
      "ddmc_optionA": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmc_optionB": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmc_optionC": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmc_optionD": "A file created for the purposes of deceiving an adversary.",
      "ddmc_answer": "B",
      "ddmc_detection/mitigation": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "prompts": [],
      "instruction": "What is a method to mitigate Screen Capture (T1113)?\nA.  Comparing client-server request and response payloads to a baseline profile to identify outliers.\nB.  Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\nC.  The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\nD.  A file created for the purposes of deceiving an adversary.\n\nPlease select the correct answer."
    }
  },
  {
    "instruction": "What is a method to detect Cleartext Storage of Sensitive Information (CWE-312)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer.",
    "context": "",
    "output": "A",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_multiple_choice",
    "parsed_raw_data": {
      "ddmc_mitigate_detect": "detect",
      "ddmc_node_name": "Cleartext Storage of Sensitive Information (CWE-312)",
      "ddmc_optionA": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionB": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmc_optionC": "Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.",
      "ddmc_optionD": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmc_answer": "A",
      "ddmc_detection/mitigation": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "prompts": [],
      "instruction": "What is a method to detect Cleartext Storage of Sensitive Information (CWE-312)?\nA.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nB.  Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\nC.  Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported.\nD.  According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nPlease select the correct answer."
    }
  }
]