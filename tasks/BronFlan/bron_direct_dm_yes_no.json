[
  {
    "instruction": "Can you mitigate Upload Malware (T1608.001) by using the strategy below?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Upload Malware (T1608.001)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Spearphishing via Service (T1566.003) by using the strategy below?\nA one-time password is valid for only one user authentication.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "A one-time password is valid for only one user authentication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Escaping Virtualization (CAPEC-480)?\nBe mindful of your surroundings when discussing or viewing sensitive information in public areas.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Escaping Virtualization (CAPEC-480)",
      "ddmyn_mitigation_detection": "Be mindful of your surroundings when discussing or viewing sensitive information in public areas.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Use After Free (CWE-416)?\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use After Free (CWE-416)",
      "ddmyn_mitigation_detection": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Insertion of Sensitive Information Into Debugging Code (CWE-215) by using the strategy below?\nCredential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insertion of Sensitive Information Into Debugging Code (CWE-215)",
      "ddmyn_mitigation_detection": "Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Elevated Execution with Prompt (T1548.004) by using the strategy below?\nUse secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Elevated Execution with Prompt (T1548.004)",
      "ddmyn_mitigation_detection": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1095 (Non-Application Layer Protocol)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1095 (Non-Application Layer Protocol)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) (CWE-338)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rogue Domain Controller (T1207)?\nAnalyzing a call stack for return addresses which point to unexpected memory locations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Analyzing a call stack for return addresses which point to unexpected memory locations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Weak Encoding for Password (CWE-261)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Weak Encoding for Password (CWE-261)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Incorrect Default Permissions (CWE-276)?\nAvoid storing information under the FTP root directory.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Default Permissions (CWE-276)",
      "ddmyn_mitigation_detection": "Avoid storing information under the FTP root directory.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Launch Daemon (T1543.004)?\nEncrypting a file using a cryptographic key.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Daemon (T1543.004)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Information Discovery (T1082)?\nBlocking the execution of files on a host in accordance with defined application policy rules.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Additional Cloud Roles (T1098.003)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Additional Cloud Roles (T1098.003)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Information Discovery (T1082) by using the strategy below?\nEmploying a pattern matching rule language to analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nWhile double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Macro Symbols (CWE-152)",
      "ddmyn_mitigation_detection": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1090.002 (External Proxy)?\nRestricting network traffic originating from a private host or enclave destined towards untrusted networks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1090.002 (External Proxy)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Golden Ticket (T1558.001)?\nCredential Eviction techniques disable or remove compromised credentials from a computer network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1055.009 (Proc Memory) by using the strategy below?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.009 (Proc Memory)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Thread Execution Hijacking (T1055.003)?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Thread Execution Hijacking (T1055.003)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Add Malicious File to Shared Webroot (CAPEC-563)?\nImplementation: Disable scripting languages such as JavaScript in browser\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Add Malicious File to Shared Webroot (CAPEC-563)",
      "ddmyn_mitigation_detection": "Implementation: Disable scripting languages such as JavaScript in browser",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Email Forwarding Rule (T1114.003) by using the strategy below?\nInitiating a host's reboot sequence to terminate all running processes.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmyn_mitigation_detection": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rootkit (T1014)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1567 (Exfiltration Over Web Service)?\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1567 (Exfiltration Over Web Service)",
      "ddmyn_mitigation_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Local Data Staging (T1074.001) by using the strategy below?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Data Staging (T1074.001)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-93 (Log Injection-Tampering-Forging) by using the strategy below?\nUse synchronization to control the flow of execution.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-93 (Log Injection-Tampering-Forging)",
      "ddmyn_mitigation_detection": "Use synchronization to control the flow of execution.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Storage of File With Sensitive Data Under FTP Root (CWE-220)?\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Storage of File With Sensitive Data Under FTP Root (CWE-220)",
      "ddmyn_mitigation_detection": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nIdentify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmyn_mitigation_detection": "Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Launch Agent (T1543.001)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Agent (T1543.001)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Security Software Discovery (T1518.001)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Collapse of Data into Unsafe Value (CWE-182)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Collapse of Data into Unsafe Value (CWE-182)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-263 (Password Aging with Long Expiration)?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-263 (Password Aging with Long Expiration)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate External Proxy (T1090.002)?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "External Proxy (T1090.002)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rogue Domain Controller (T1207)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-252 (Unchecked Return Value)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-252 (Unchecked Return Value)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Path Traversal: '/absolute/pathname/here' (CWE-37)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Path Traversal: '/absolute/pathname/here' (CWE-37)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Services File Permissions Weakness (T1574.010)?\nReplacing old software on a computer system component.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmyn_mitigation_detection": "Replacing old software on a computer system component.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate External Defacement (T1491.002) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "External Defacement (T1491.002)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Ownership Management (CWE-282)?\nFollow the principle of least privilege when assigning access rights to entities in a software system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Ownership Management (CWE-282)",
      "ddmyn_mitigation_detection": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Web Protocols (T1071.001)?\nRemove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Protocols (T1071.001)",
      "ddmyn_mitigation_detection": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-91 (XML Injection (aka Blind XPath Injection))?\nCheck the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-91 (XML Injection (aka Blind XPath Injection))",
      "ddmyn_mitigation_detection": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001) by using the strategy below?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1548.003 (Sudo and Sudo Caching)?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1548.003 (Sudo and Sudo Caching)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Validation of Syntactic Correctness of Input (CWE-1286)?\nInsert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Validation of Syntactic Correctness of Input (CWE-1286)",
      "ddmyn_mitigation_detection": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Unchecked Return Value (CWE-252)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Unchecked Return Value (CWE-252)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Archive via Utility (T1560.001) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Archive via Utility (T1560.001)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-304 (TCP Null Scan) by using the strategy below?\nEmploy a robust network defensive posture that includes a managed IDS/IPS.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-304 (TCP Null Scan)",
      "ddmyn_mitigation_detection": "Employ a robust network defensive posture that includes a managed IDS/IPS.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Keylogging (T1056.001)?\nOperating system level mechanisms to prevent abusive input device exploitation.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Keylogging (T1056.001)",
      "ddmyn_mitigation_detection": "Operating system level mechanisms to prevent abusive input device exploitation.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Network Connections Discovery (T1049)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Network Connections Discovery (T1049)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Sensitive Cookie with Improper SameSite Attribute (CWE-1275) by using the strategy below?\nResolve all URIs to absolute or canonical representations before processing.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sensitive Cookie with Improper SameSite Attribute (CWE-1275)",
      "ddmyn_mitigation_detection": "Resolve all URIs to absolute or canonical representations before processing.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Proc Memory (T1055.009)?\nPhysical link mapping identifies and models the link connectivity of the network devices within a physical network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Proc Memory (T1055.009)",
      "ddmyn_mitigation_detection": "Physical link mapping identifies and models the link connectivity of the network devices within a physical network.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1574.004 (Dylib Hijacking)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1574.004 (Dylib Hijacking)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Control Panel (T1218.002)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Control Panel (T1218.002)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-Stage Channels (T1104) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Launch Daemon (T1543.004)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Daemon (T1543.004)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1539 (Steal Web Session Cookie)?\nInitiating a host's reboot sequence to terminate all running processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1539 (Steal Web Session Cookie)",
      "ddmyn_mitigation_detection": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploits (T1587.004)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploits (T1587.004)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Architecture with Number of Horizontal Layers Outside of Expected Range (CWE-1044)?\nAutomated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Architecture with Number of Horizontal Layers Outside of Expected Range (CWE-1044)",
      "ddmyn_mitigation_detection": "Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Credentials in Registry (T1552.002)?\nRestricting system configuration modifications to a specific user or group of users.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credentials in Registry (T1552.002)",
      "ddmyn_mitigation_detection": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Portable Executable Injection (T1055.002) by using the strategy below?\nCollecting network communication protocol metadata and identifying statistical outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Portable Executable Injection (T1055.002)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Email Forwarding Rule (T1114.003)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Local Accounts (T1078.003) by using the strategy below?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Accounts (T1078.003)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Clear Linux or Mac System Logs (T1070.002) by using the strategy below?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate UNIX Symbolic Link (Symlink) Following (CWE-61)?\nAn application must, at all times, keep track of allocated resources and meter their usage appropriately.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "UNIX Symbolic Link (Symlink) Following (CWE-61)",
      "ddmyn_mitigation_detection": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Incorrect Comparison Logic Granularity (CWE-1254)?\nThe hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Comparison Logic Granularity (CWE-1254)",
      "ddmyn_mitigation_detection": "The hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1615 (Group Policy Discovery) by using the strategy below?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1615 (Group Policy Discovery)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Stored Data Manipulation (T1565.001)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Credential API Hooking (T1056.004)?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential API Hooking (T1056.004)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Downgrade Attack (T1562.010)?\nSystem vulnerability assessment relates all the vulnerabilities of a system's components in the context of their configuration and internal dependencies and can also include assessing risk emerging from the system's design as a whole, not just the sum of individual component vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Downgrade Attack (T1562.010)",
      "ddmyn_mitigation_detection": "System vulnerability assessment relates all the vulnerabilities of a system's components in the context of their configuration and internal dependencies and can also include assessing risk emerging from the system's design as a whole, not just the sum of individual component vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Dictionary-based Password Attack (CAPEC-16)?\nMany invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Dictionary-based Password Attack (CAPEC-16)",
      "ddmyn_mitigation_detection": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Delete Cloud Instance (T1578.003) by using the strategy below?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Delete Cloud Instance (T1578.003)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Replication Through Removable Media (T1091)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Replication Through Removable Media (T1091)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Code Signing Certificates (T1587.002) by using the strategy below?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Code Signing Certificates (T1587.002)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Exposed Unsafe ActiveX Method (CWE-618)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exposed Unsafe ActiveX Method (CWE-618)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect SQL Stored Procedures (T1505.001)?\nOn a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "SQL Stored Procedures (T1505.001)",
      "ddmyn_mitigation_detection": "On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate AppInit DLLs (T1546.010) by using the strategy below?\nControlling access to local computer system resources with kernel-level capabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-1223 (Race Condition for Write-Once Attributes)?\nIf they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1223 (Race Condition for Write-Once Attributes)",
      "ddmyn_mitigation_detection": "If they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Email Hiding Rules (T1564.008)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Hiding Rules (T1564.008)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exfiltration Over Bluetooth (T1011.001)?\nMake configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Bluetooth (T1011.001)",
      "ddmyn_mitigation_detection": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-157 (Sniffing Attacks) by using the strategy below?\nEncrypt sensitive information when transmitted on insecure mediums to prevent interception.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-157 (Sniffing Attacks)",
      "ddmyn_mitigation_detection": "Encrypt sensitive information when transmitted on insecure mediums to prevent interception.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate File and Directory Discovery (T1083) by using the strategy below?\nEmploying a pattern matching algorithm to statically analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Discovery (T1083)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Serialized Data Parameter Blowup (CAPEC-229)?\nMitigation may limit the number of configuration parameters per dataset.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Serialized Data Parameter Blowup (CAPEC-229)",
      "ddmyn_mitigation_detection": "Mitigation may limit the number of configuration parameters per dataset.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cleartext Storage in the Registry (CWE-314)?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cleartext Storage in the Registry (CWE-314)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Outlook Forms (T1137.003) by using the strategy below?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Outlook Forms (T1137.003)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Deobfuscate/Decode Files or Information (T1140)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rootkit (T1014)?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Determine Physical Locations (T1591.001)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Determine Physical Locations (T1591.001)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unprotected Primary Channel (CWE-419) by using the strategy below?\nProtect the administrative/restricted functionality with a strong authentication mechanism.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unprotected Primary Channel (CWE-419)",
      "ddmyn_mitigation_detection": "Protect the administrative/restricted functionality with a strong authentication mechanism.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1498.002 (Reflection Amplification)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1498.002 (Reflection Amplification)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Eavesdropping (CAPEC-651)?\nImplementation: Use possible permissions on file access when developing and deploying web applications.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Eavesdropping (CAPEC-651)",
      "ddmyn_mitigation_detection": "Implementation: Use possible permissions on file access when developing and deploying web applications.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Privilege Escalation (T1068) by using the strategy below?\nComparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmyn_mitigation_detection": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-220 (Storage of File With Sensitive Data Under FTP Root) by using the strategy below?\nAccess control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-220 (Storage of File With Sensitive Data Under FTP Root)",
      "ddmyn_mitigation_detection": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Path Traversal: '/../filedir' (CWE-25)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Path Traversal: '/../filedir' (CWE-25)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Authentication Package (T1547.002)?\nMonitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.  (Citations: Graeber 2014, Microsoft Configure LSA)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Authentication Package (T1547.002)",
      "ddmyn_mitigation_detection": "Monitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.  (Citations: Graeber 2014, Microsoft Configure LSA)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Install Rootkit  (CAPEC-552) by using the strategy below?\nPrevent adversary access to privileged accounts necessary to install rootkits.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Install Rootkit  (CAPEC-552)",
      "ddmyn_mitigation_detection": "Prevent adversary access to privileged accounts necessary to install rootkits.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Return of Wrong Status Code (CWE-393)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Return of Wrong Status Code (CWE-393)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect LC_LOAD_DYLIB Addition (T1546.006)?\nMonitor processes for those that may be used to modify binary headers. Monitor file systems for changes to application binaries and invalid checksums/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "LC_LOAD_DYLIB Addition (T1546.006)",
      "ddmyn_mitigation_detection": "Monitor processes for those that may be used to modify binary headers. Monitor file systems for changes to application binaries and invalid checksums/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-197 (Exponential Data Expansion)?\nAvoid emailing important documents and configurations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-197 (Exponential Data Expansion)",
      "ddmyn_mitigation_detection": "Avoid emailing important documents and configurations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Use of Password Hash With Insufficient Computational Effort (CWE-916) by using the strategy below?\nUse an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Password Hash With Insufficient Computational Effort (CWE-916)",
      "ddmyn_mitigation_detection": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1090.003 (Multi-hop Proxy) by using the strategy below?\nWhen observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as Tor) or known adversary infrastructure that uses this technique. In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers. Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization. Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted. Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1090.003 (Multi-hop Proxy)",
      "ddmyn_mitigation_detection": "When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as Tor) or known adversary infrastructure that uses this technique. In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers. Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization. Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted. Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate DNS/Passive DNS (T1596.001)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "DNS/Passive DNS (T1596.001)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Defense Evasion (T1211) by using the strategy below?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Subvert Trust Controls (T1553) by using the strategy below?\nSet and enforce secure password policies for accounts.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Subvert Trust Controls (T1553)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Race Condition within a Thread (CWE-366)?\nEnsure that protocols have specific limits of scale placed on them.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Race Condition within a Thread (CWE-366)",
      "ddmyn_mitigation_detection": "Ensure that protocols have specific limits of scale placed on them.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Pass the Ticket (T1550.003) by using the strategy below?\nAudit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. Event ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to \"Integrity check on decrypted field failed\" and indicates misuse by a previously invalidated golden ticket.(Citations: CERT-EU Golden Ticket Protection)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Pass the Ticket (T1550.003)",
      "ddmyn_mitigation_detection": "Audit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. Event ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to \"Integrity check on decrypted field failed\" and indicates misuse by a previously invalidated golden ticket.(Citations: CERT-EU Golden Ticket Protection)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate TCP RPC Scan (CAPEC-307)?\nDisable MSSQL xp_cmdshell directive on the database\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "TCP RPC Scan (CAPEC-307)",
      "ddmyn_mitigation_detection": "Disable MSSQL xp_cmdshell directive on the database",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Object Injection (CAPEC-586)?\nWhen client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Object Injection (CAPEC-586)",
      "ddmyn_mitigation_detection": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LSASS Driver (T1547.008)?\nApplication Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Incorrect Privilege Assignment (CWE-266) by using the strategy below?\nUse techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Privilege Assignment (CWE-266)",
      "ddmyn_mitigation_detection": "Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Permissive Cross-domain Policy with Untrusted Domains (CWE-942)?\nSetup default error messages so that unexpected errors do not disclose sensitive information.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive Cross-domain Policy with Untrusted Domains (CWE-942)",
      "ddmyn_mitigation_detection": "Setup default error messages so that unexpected errors do not disclose sensitive information.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Lock Behavior After Power State Transition (CWE-1232) by using the strategy below?\nPrevention schemes mirror that of hard-coded password storage.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Lock Behavior After Power State Transition (CWE-1232)",
      "ddmyn_mitigation_detection": "Prevention schemes mirror that of hard-coded password storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Domain Properties (T1590.001) by using the strategy below?\nUse secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Properties (T1590.001)",
      "ddmyn_mitigation_detection": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-461 (Web Services API Signature Forgery Leveraging Hash Function Extension Weakness)?\nStrong physical security of all devices that contain secret key information. (even when devices are not in use)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-461 (Web Services API Signature Forgery Leveraging Hash Function Extension Weakness)",
      "ddmyn_mitigation_detection": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1606.001 (Web Cookies)?\nMonitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1606.001 (Web Cookies)",
      "ddmyn_mitigation_detection": "Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)?\nAssess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC-445)",
      "ddmyn_mitigation_detection": "Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Upload Malware (T1608.001) by using the strategy below?\nManage the creation, modification, use, and permissions associated to user accounts.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Upload Malware (T1608.001)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cross-Site Request Forgery (CSRF) (CWE-352)?\nEnsure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "ddmyn_mitigation_detection": "Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Incorrect Regular Expression (CWE-185)?\nEnsure that proper authentication is included in the system design.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Regular Expression (CWE-185)",
      "ddmyn_mitigation_detection": "Ensure that proper authentication is included in the system design.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Cloud Accounts (T1078.004) by using the strategy below?\nCollecting network communication protocol metadata and identifying statistical outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect XML Injection (CAPEC-250)?\nAuthentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "XML Injection (CAPEC-250)",
      "ddmyn_mitigation_detection": "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Spearphishing via Service (T1566.003)?\nDetermining if a URL is benign or malicious by analyzing the URL or its components.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "Determining if a URL is benign or malicious by analyzing the URL or its components.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Internal Proxy (T1090.001)?\nOnce adversaries have provisioned software on a compromised server (ex: for use as a command and control server), internet scans may reveal servers that adversaries have compromised. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.(Citations: ThreatConnect Infrastructure Dec 2020, Mandiant SCANdalous Jul 2020, Koczwara Beacon Hunting Sep 2021)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Once adversaries have provisioned software on a compromised server (ex: for use as a command and control server), internet scans may reveal servers that adversaries have compromised. Consider looking for identifiable patterns such as services listening, certificates in use, SSL/TLS negotiation features, or other response artifacts associated with adversary C2 software. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.(Citations: ThreatConnect Infrastructure Dec 2020, Mandiant SCANdalous Jul 2020, Koczwara Beacon Hunting Sep 2021)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Symlink Attack (CAPEC-132)?\nImplementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symlink Attack (CAPEC-132)",
      "ddmyn_mitigation_detection": "Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Non-Standard Port (T1571)?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1195.003 (Compromise Hardware Supply Chain)?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1195.003 (Compromise Hardware Supply Chain)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Develop Capabilities (T1587)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Develop Capabilities (T1587)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Trust Discovery (T1482)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Trust Discovery (T1482)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Cleartext Storage of Sensitive Information (CWE-312) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Cleartext Storage of Sensitive Information (CWE-312)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Leveraging Race Conditions (CAPEC-26)?\nStrong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Leveraging Race Conditions (CAPEC-26)",
      "ddmyn_mitigation_detection": "Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Spearphishing via Service (T1566.003)?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Reflection Amplification (T1498.002)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Portable Executable Injection (T1055.002) by using the strategy below?\nAnalyzing changes in service binary files by comparing to a source of truth.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Portable Executable Injection (T1055.002)",
      "ddmyn_mitigation_detection": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Collect Data from Clipboard (CAPEC-637)?\nImplement robust physical security countermeasures and monitoring.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Collect Data from Clipboard (CAPEC-637)",
      "ddmyn_mitigation_detection": "Implement robust physical security countermeasures and monitoring.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Protections Against Hardware Overheating (CWE-1338)?\nAvoid making conversion between numeric types. Always check for the allowed ranges.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Protections Against Hardware Overheating (CWE-1338)",
      "ddmyn_mitigation_detection": "Avoid making conversion between numeric types. Always check for the allowed ranges.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Credential Stuffing (T1110.004) by using the strategy below?\nRestoring the data in a database.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential Stuffing (T1110.004)",
      "ddmyn_mitigation_detection": "Restoring the data in a database.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Proc Memory (T1055.009)?\nAnalyzing changes in service binary files by comparing to a source of truth.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Proc Memory (T1055.009)",
      "ddmyn_mitigation_detection": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Deobfuscate/Decode Files or Information (T1140) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Spearphishing via Service (T1566.003) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate AppInit DLLs (T1546.010)?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect AppCert DLLs (T1546.009)?\nProcesses that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to local storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "AppCert DLLs (T1546.009)",
      "ddmyn_mitigation_detection": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging. Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell. Consider monitoring accesses and modifications to local storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Dead Drop Resolver (T1102.001)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dead Drop Resolver (T1102.001)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Incorrect Chaining or Granularity of Debug Components (CWE-1296)?\nEnsure that debug components are properly chained and their granularity is maintained at different authentication levels.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Chaining or Granularity of Debug Components (CWE-1296)",
      "ddmyn_mitigation_detection": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Logon Script (Windows) (T1037.001)?\nAs information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies. The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents.  Sharepoint audit logging can also be configured to report when a user shares a resource.  The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter.  Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities.(Citations: Microsoft SharePoint Logging, Sharepoint Sharing Events, Atlassian Confluence Logging)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies. The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents.  Sharepoint audit logging can also be configured to report when a user shares a resource.  The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter.  Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities.(Citations: Microsoft SharePoint Logging, Sharepoint Sharing Events, Atlassian Confluence Logging)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-1325 (Improperly Controlled Sequential Memory Allocation)?\nUse a tool that dynamically detects memory management problems, such as valgrind.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1325 (Improperly Controlled Sequential Memory Allocation)",
      "ddmyn_mitigation_detection": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Scanning IP Blocks (T1595.001)?\nUse process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded. (Citations: Carbon Black Squiblydoo Apr 2016)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Scanning IP Blocks (T1595.001)",
      "ddmyn_mitigation_detection": "Use process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded. (Citations: Carbon Black Squiblydoo Apr 2016)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Mavinject (T1218.013)?\nMonitor the execution and arguments of mavinject.exe. Compare recent invocations of mavinject.exe with prior history of known good arguments and injected DLLs to determine anomalous and potentially adversarial activity. Adversaries may rename abusable binaries to evade detections, but the argument <code>INJECTRUNNING</code> is required for mavinject.exe to perform Dynamic-link Library Injection and may therefore be monitored to alert malicious activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Mavinject (T1218.013)",
      "ddmyn_mitigation_detection": "Monitor the execution and arguments of mavinject.exe. Compare recent invocations of mavinject.exe with prior history of known good arguments and injected DLLs to determine anomalous and potentially adversarial activity. Adversaries may rename abusable binaries to evade detections, but the argument <code>INJECTRUNNING</code> is required for mavinject.exe to perform Dynamic-link Library Injection and may therefore be monitored to alert malicious activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Data Transfer Size Limits (T1030)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data Transfer Size Limits (T1030)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Golden Ticket (T1558.001) by using the strategy below?\nRandomizing the base (start) address of one or more segments of memory during the initialization of a process.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Direct Network Flood (T1498.001)?\nEmulating instructions in a file looking for specific patterns.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Emulating instructions in a file looking for specific patterns.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Inclusion of Sensitive Information in Source Code Comments (CWE-615)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Inclusion of Sensitive Information in Source Code Comments (CWE-615)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Incorrect Type Conversion or Cast (CWE-704)?\nUse an abstraction library to abstract away risky APIs. This is not a complete solution.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Type Conversion or Cast (CWE-704)",
      "ddmyn_mitigation_detection": "Use an abstraction library to abstract away risky APIs. This is not a complete solution.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Double Free (CWE-415)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Double Free (CWE-415)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Credential API Hooking (T1056.004) by using the strategy below?\nRandomizing the base (start) address of one or more segments of memory during the initialization of a process.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential API Hooking (T1056.004)",
      "ddmyn_mitigation_detection": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1110.004 (Credential Stuffing)?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1110.004 (Credential Stuffing)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Neutralization of Macro Symbols (CWE-152)?\nEnsure the design does not allow error injection in modes intended for normal run-time operation. Provide access controls on interfaces for injecting errors.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Macro Symbols (CWE-152)",
      "ddmyn_mitigation_detection": "Ensure the design does not allow error injection in modes intended for normal run-time operation. Provide access controls on interfaces for injecting errors.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1548.001 (Setuid and Setgid)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1548.001 (Setuid and Setgid)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect SAML Tokens (T1606.002) by using the strategy below?\nThis technique may be difficult to detect as SAML tokens are signed by a trusted certificate. The forging process may not be detectable since it is likely to happen outside of a defender's visibility, but subsequent usage of the forged token may be seen. Monitor for anomalous logins using SAML tokens created by a compromised or adversary generated token-signing certificate. These logins may occur on any on-premises resources as well as from any cloud environment that trusts the certificate. Search for logins to service providers using SAML SSO which do not have corresponding 4769, 1200, and 1202 events in the Domain. Consider modifying SAML responses to include custom elements for each service provider. Monitor these custom elements in service provider access logs to detect any anomalous requests.(Citations: Microsoft SolarWinds Customer Guidance, Sygnia Golden SAML, Sygnia Golden SAML)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "SAML Tokens (T1606.002)",
      "ddmyn_mitigation_detection": "This technique may be difficult to detect as SAML tokens are signed by a trusted certificate. The forging process may not be detectable since it is likely to happen outside of a defender's visibility, but subsequent usage of the forged token may be seen. Monitor for anomalous logins using SAML tokens created by a compromised or adversary generated token-signing certificate. These logins may occur on any on-premises resources as well as from any cloud environment that trusts the certificate. Search for logins to service providers using SAML SSO which do not have corresponding 4769, 1200, and 1202 events in the Domain. Consider modifying SAML responses to include custom elements for each service provider. Monitor these custom elements in service provider access logs to detect any anomalous requests.(Citations: Microsoft SolarWinds Customer Guidance, Sygnia Golden SAML, Sygnia Golden SAML)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate TCP Flood (CAPEC-482)?\nDesign: Use browser technologies that do not allow client side scripting.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "TCP Flood (CAPEC-482)",
      "ddmyn_mitigation_detection": "Design: Use browser technologies that do not allow client side scripting.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-784 (Reliance on Cookies without Validation and Integrity Checking in a Security Decision)?\nProtect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-784 (Reliance on Cookies without Validation and Integrity Checking in a Security Decision)",
      "ddmyn_mitigation_detection": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-475 (Signature Spoofing by Improper Validation)?\nUse programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-475 (Signature Spoofing by Improper Validation)",
      "ddmyn_mitigation_detection": "Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Email Forwarding Rule (T1114.003)?\nApplication Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmyn_mitigation_detection": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Logon Script (Windows) (T1037.001)?\nEmploying a pattern matching rule language to analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Reflection Amplification (T1498.002) by using the strategy below?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Thread Execution Hijacking (T1055.003)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Thread Execution Hijacking (T1055.003)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Modification of Registry Run Keys (CAPEC-270)?\nIdentify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Modification of Registry Run Keys (CAPEC-270)",
      "ddmyn_mitigation_detection": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unchecked Input for Loop Condition (CWE-606)?\nWhen the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unchecked Input for Loop Condition (CWE-606)",
      "ddmyn_mitigation_detection": "When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Unverified Ownership (CWE-283)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unverified Ownership (CWE-283)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Rootkit (T1014) by using the strategy below?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Network Sniffing (T1040) by using the strategy below?\nRestoring a file for an entity to access.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Network Sniffing (T1040)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Email Hiding Rules (T1564.008)?\nApplication Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Hiding Rules (T1564.008)",
      "ddmyn_mitigation_detection": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Authorization of Index Containing Sensitive Information (CWE-612) by using the strategy below?\nWithin Java, use .equals() to compare string values. Within JavaScript, use == to compare string values. Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Authorization of Index Containing Sensitive Information (CWE-612)",
      "ddmyn_mitigation_detection": "Within Java, use .equals() to compare string values. Within JavaScript, use == to compare string values. Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Setuid and Setgid (T1548.001)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Setuid and Setgid (T1548.001)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Outlook Forms (T1137.003)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Outlook Forms (T1137.003)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1565.002 (Transmitted Data Manipulation)?\nProtect sensitive information with strong encryption.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1565.002 (Transmitted Data Manipulation)",
      "ddmyn_mitigation_detection": "Protect sensitive information with strong encryption.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Protection of Physical Side Channels (CWE-1300) by using the strategy below?\nSecurity identifier decoders must be reviewed for design consistency and common weaknesses.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Protection of Physical Side Channels (CWE-1300)",
      "ddmyn_mitigation_detection": "Security identifier decoders must be reviewed for design consistency and common weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reliance on a Single Factor in a Security Decision (CWE-654)?\nUse multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on a Single Factor in a Security Decision (CWE-654)",
      "ddmyn_mitigation_detection": "Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Audio Capture (T1123) by using the strategy below?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Audio Capture (T1123)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate TCP RPC Scan (CAPEC-307) by using the strategy below?\nTypically, an IDS/IPS system is very effective against this type of attack.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "TCP RPC Scan (CAPEC-307)",
      "ddmyn_mitigation_detection": "Typically, an IDS/IPS system is very effective against this type of attack.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Validation of Specified Index, Position, or Offset in Input (CWE-1285) by using the strategy below?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Validation of Specified Index, Position, or Offset in Input (CWE-1285)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CAPEC-7 (Blind SQL Injection) by using the strategy below?\nThe only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CAPEC-7 (Blind SQL Injection)",
      "ddmyn_mitigation_detection": "The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Inclusion of Sensitive Information in Test Code (CWE-531)?\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inclusion of Sensitive Information in Test Code (CWE-531)",
      "ddmyn_mitigation_detection": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Lateral Tool Transfer (T1570)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Insertion of Sensitive Information Into Debugging Code (CWE-215)?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Insertion of Sensitive Information Into Debugging Code (CWE-215)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Launch Agent (T1543.001) by using the strategy below?\nMonitor Launch Agent creation through additional plist files and utilities such as Objective-See\u2019s KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications. Ensure Launch Agent's <code> ProgramArguments </code> key pointing to executables located in the <code>/tmp</code> or <code>/shared</code> folders are in alignment with enterprise policy. Ensure all Launch Agents with the <code>RunAtLoad</code> key set to <code>true</code> are in alignment with policy.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Launch Agent (T1543.001)",
      "ddmyn_mitigation_detection": "Monitor Launch Agent creation through additional plist files and utilities such as Objective-See\u2019s KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications. Ensure Launch Agent's <code> ProgramArguments </code> key pointing to executables located in the <code>/tmp</code> or <code>/shared</code> folders are in alignment with enterprise policy. Ensure all Launch Agents with the <code>RunAtLoad</code> key set to <code>true</code> are in alignment with policy.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Thread Execution Hijacking (T1055.003)?\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Thread Execution Hijacking (T1055.003)",
      "ddmyn_mitigation_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: Elastic Process Injection July 2017)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Transmitted Data Manipulation (T1565.002)?\nSet and enforce secure password policies for accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Services File Permissions Weakness (T1574.010)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Non-Standard Port (T1571)?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Subvert Trust Controls (T1553)?\nImplement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Subvert Trust Controls (T1553)",
      "ddmyn_mitigation_detection": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Owner/User Discovery (T1033) by using the strategy below?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-787 (Out-of-bounds Write)?\nAnalyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-787 (Out-of-bounds Write)",
      "ddmyn_mitigation_detection": "Analyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Privilege Context Switching Error (CWE-270)?\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Privilege Context Switching Error (CWE-270)",
      "ddmyn_mitigation_detection": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-157 (Failure to Sanitize Paired Delimiters) by using the strategy below?\nFuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-157 (Failure to Sanitize Paired Delimiters)",
      "ddmyn_mitigation_detection": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1114.003 (Email Forwarding Rule)?\nImplement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1114.003 (Email Forwarding Rule)",
      "ddmyn_mitigation_detection": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Port Knocking (T1205.001) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Knocking (T1205.001)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1560.001 (Archive via Utility)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1560.001 (Archive via Utility)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Email Forwarding Rule (T1114.003)?\nModifying system configuration to increase password strength.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmyn_mitigation_detection": "Modifying system configuration to increase password strength.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1137.004 (Outlook Home Page) by using the strategy below?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1137.004 (Outlook Home Page)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Bash History (T1552.003) by using the strategy below?\nEmploying a pattern matching rule language to analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Privilege Escalation (T1068)?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Memory Allocation with Excessive Size Value (CWE-789) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Memory Allocation with Excessive Size Value (CWE-789)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1562.009 (Safe Mode Boot)?\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1562.009 (Safe Mode Boot)",
      "ddmyn_mitigation_detection": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Portable Executable Injection (T1055.002)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Portable Executable Injection (T1055.002)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Default Accounts (T1078.001)?\nConsider verifying the checksum of the operating system file and verifying the image of the operating system in memory. Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as Modify System Image.(Citations: Cisco IOS Software Integrity Assurance - Image File Verification, Cisco IOS Software Integrity Assurance - Run-Time Memory Verification)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Default Accounts (T1078.001)",
      "ddmyn_mitigation_detection": "Consider verifying the checksum of the operating system file and verifying the image of the operating system in memory. Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as Modify System Image.(Citations: Cisco IOS Software Integrity Assurance - Image File Verification, Cisco IOS Software Integrity Assurance - Run-Time Memory Verification)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Protection of Physical Side Channels (CWE-1300)?\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Protection of Physical Side Channels (CWE-1300)",
      "ddmyn_mitigation_detection": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Incorrect Regular Expression (CWE-185)?\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Regular Expression (CWE-185)",
      "ddmyn_mitigation_detection": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Use After Free (CWE-416)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Use After Free (CWE-416)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Inclusion of Undocumented Features or Chicken Bits (CWE-1242)?\nThe implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inclusion of Undocumented Features or Chicken Bits (CWE-1242)",
      "ddmyn_mitigation_detection": "The implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Restriction of Write-Once Bit Fields (CWE-1224)?\nCheck your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Restriction of Write-Once Bit Fields (CWE-1224)",
      "ddmyn_mitigation_detection": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Symmetric Cryptography (T1573.001)?\nThe file removal technique deletes malicious artifacts or programs from a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)?\nDo not attempt to process an error or attempt to mask it.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)",
      "ddmyn_mitigation_detection": "Do not attempt to process an error or attempt to mask it.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Ownership Management (CWE-282)?\nVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Ownership Management (CWE-282)",
      "ddmyn_mitigation_detection": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CMSTP (T1218.003)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CMSTP (T1218.003)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-Stage Channels (T1104) by using the strategy below?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1074.001 (Local Data Staging)?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1074.001 (Local Data Staging)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1218.003 (CMSTP) by using the strategy below?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1218.003 (CMSTP)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-257 (Storing Passwords in a Recoverable Format)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-257 (Storing Passwords in a Recoverable Format)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-182 (Collapse of Data into Unsafe Value) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-182 (Collapse of Data into Unsafe Value)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1546.012 (Image File Execution Options Injection) by using the strategy below?\nRestoring an object for an entity to access. This is the broadest class for object restoral.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.012 (Image File Execution Options Injection)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Application Window Discovery (T1010)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Window Discovery (T1010)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-157 (Sniffing Attacks)?\nAdditionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-157 (Sniffing Attacks)",
      "ddmyn_mitigation_detection": "Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Null Termination (CWE-170)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Null Termination (CWE-170)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-278 (Web Services Protocol Manipulation)?\nConduct rigorous threat assessments of suppliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-278 (Web Services Protocol Manipulation)",
      "ddmyn_mitigation_detection": "Conduct rigorous threat assessments of suppliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exfiltration over USB (T1052.001)?\nReplacing old software on a computer system component.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration over USB (T1052.001)",
      "ddmyn_mitigation_detection": "Replacing old software on a computer system component.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-706 (Use of Incorrectly-Resolved Name or Reference)?\nAutomated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-706 (Use of Incorrectly-Resolved Name or Reference)",
      "ddmyn_mitigation_detection": "Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nComparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Declaration of Catch for Generic Exception (CWE-396)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Declaration of Catch for Generic Exception (CWE-396)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Extra Window Memory Injection (T1055.011) by using the strategy below?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Extra Window Memory Injection (T1055.011)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Privilege Context Switching Error (CWE-270)?\nVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Privilege Context Switching Error (CWE-270)",
      "ddmyn_mitigation_detection": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Lateral Tool Transfer (T1570) by using the strategy below?\nUse intrusion detection signatures to block traffic at network boundaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Logon Script (Windows) (T1037.001) by using the strategy below?\nDetecting any suspicious changes to files in a computer system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Double Free (CWE-415)?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Double Free (CWE-415)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-1119 (Excessive Use of Unconditional Branching)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-1119 (Excessive Use of Unconditional Branching)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Internal Proxy (T1090.001) by using the strategy below?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Accounts (T1078.002)?\nMonitoring the existence of or changes to Domain User Accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "Monitoring the existence of or changes to Domain User Accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Process Argument Spoofing (T1564.010)?\nDetection of process argument spoofing may be difficult as adversaries may momentarily modify stored arguments used for malicious execution. These changes may bypass process creation detection and/or later process memory analysis. Consider monitoring for Process Hollowing, which includes monitoring for process creation (especially those in a suspended state) as well as access and/or modifications of these processes (especially by the parent process) via Windows API calls. Analyze process behavior to determine if a process is performing actions it usually does not and/or do no align with its logged command-line arguments.(Citations: Nviso Spoof Command Line 2020, Mandiant Endpoint Evading 2019)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Process Argument Spoofing (T1564.010)",
      "ddmyn_mitigation_detection": "Detection of process argument spoofing may be difficult as adversaries may momentarily modify stored arguments used for malicious execution. These changes may bypass process creation detection and/or later process memory analysis. Consider monitoring for Process Hollowing, which includes monitoring for process creation (especially those in a suspended state) as well as access and/or modifications of these processes (especially by the parent process) via Windows API calls. Analyze process behavior to determine if a process is performing actions it usually does not and/or do no align with its logged command-line arguments.(Citations: Nviso Spoof Command Line 2020, Mandiant Endpoint Evading 2019)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Time Discovery (T1124) by using the strategy below?\nFile eviction techniques evict files from system storage.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Time Discovery (T1124)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1207 (Rogue Domain Controller)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1207 (Rogue Domain Controller)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-426 (Untrusted Search Path)?\nUse monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-426 (Untrusted Search Path)",
      "ddmyn_mitigation_detection": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Subvert Trust Controls (T1553) by using the strategy below?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Subvert Trust Controls (T1553)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1033 (System Owner/User Discovery)?\nInitiating a host's shutdown sequence to terminate all running processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1033 (System Owner/User Discovery)",
      "ddmyn_mitigation_detection": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1543.001 (Launch Agent)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1543.001 (Launch Agent)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate LSASS Driver (T1547.008)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Direct Network Flood (T1498.001)?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect NoSQL Injection (CAPEC-676)?\nToo many exceptions generated by the application as a result of malformed XPath queries\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "NoSQL Injection (CAPEC-676)",
      "ddmyn_mitigation_detection": "Too many exceptions generated by the application as a result of malformed XPath queries",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Line Delimiters (CWE-144)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1558.001 (Golden Ticket)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1558.001 (Golden Ticket)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Scheduled Task (T1053.005) by using the strategy below?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Services File Permissions Weakness (T1574.010) by using the strategy below?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Manipulate Registry Information (CAPEC-203) by using the strategy below?\nAn organization should provide regular, robust cybersecurity training to its employees.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Manipulate Registry Information (CAPEC-203)",
      "ddmyn_mitigation_detection": "An organization should provide regular, robust cybersecurity training to its employees.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1074.001 (Local Data Staging) by using the strategy below?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1074.001 (Local Data Staging)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-184 (Incomplete List of Disallowed Inputs) by using the strategy below?\nThis weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-184 (Incomplete List of Disallowed Inputs)",
      "ddmyn_mitigation_detection": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nThe detection of an internal host relaying traffic between the internal network and the external network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Scheduled Task (T1053.005)?\nBlocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Spearphishing Service (T1598.001)?\nTrain users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing Service (T1598.001)",
      "ddmyn_mitigation_detection": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-522 (Insufficiently Protected Credentials)?\nMake any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-522 (Insufficiently Protected Credentials)",
      "ddmyn_mitigation_detection": "Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-1300 (Improper Protection of Physical Side Channels)?\nEnsure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1300 (Improper Protection of Physical Side Channels)",
      "ddmyn_mitigation_detection": "Ensure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Data Destruction (T1485)?\nUse process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as SDelete. Monitor for the creation of suspicious files as well as high unusual file modification activity. In particular, look for large quantities of file modifications in user directories and under <code>C:\\Windows\\System32\\</code>. In cloud environments, the occurrence of anomalous high-volume deletion events, such as the <code>DeleteDBCluster</code> and <code>DeleteGlobalCluster</code> events in AWS, or a high quantity of data deletion events, such as <code>DeleteBucket</code>, within a short period of time may indicate suspicious activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Data Destruction (T1485)",
      "ddmyn_mitigation_detection": "Use process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as SDelete. Monitor for the creation of suspicious files as well as high unusual file modification activity. In particular, look for large quantities of file modifications in user directories and under <code>C:\\Windows\\System32\\</code>. In cloud environments, the occurrence of anomalous high-volume deletion events, such as the <code>DeleteDBCluster</code> and <code>DeleteGlobalCluster</code> events in AWS, or a high quantity of data deletion events, such as <code>DeleteBucket</code>, within a short period of time may indicate suspicious activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Reflection Amplification (T1498.002)?\nMonitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe. Monitor for calls to <code>OpenProcess</code> that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Monitor for suspicious additions to the /Library/Security/SecurityAgentPlugins directory. Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access). Monitor property changes in Group Policy that manage authentication mechanisms (i.e. Group Policy Modification). The <code>Store passwords using reversible encryption</code> configuration should be set to Disabled. Additionally, monitor and/or block suspicious command/script execution of <code>-AllowReversiblePasswordEncryption $true</code>, <code>Set-ADUser</code> and <code>Set-ADAccountControl</code>. Finally, monitor Fine-Grained Password Policies and regularly audit user accounts and group settings.(Citations: Clymb3r Function Hook Passwords Sept 2013, Dell Skeleton, Xorrior Authorization Plugins, TechNet Audit Policy, dump_pwd_dcsync)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages</code>) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe. Monitor for calls to <code>OpenProcess</code> that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Monitor PAM configuration and module paths (ex: <code>/etc/pam.d/</code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Monitor for suspicious additions to the /Library/Security/SecurityAgentPlugins directory. Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access). Monitor property changes in Group Policy that manage authentication mechanisms (i.e. Group Policy Modification). The <code>Store passwords using reversible encryption</code> configuration should be set to Disabled. Additionally, monitor and/or block suspicious command/script execution of <code>-AllowReversiblePasswordEncryption $true</code>, <code>Set-ADUser</code> and <code>Set-ADAccountControl</code>. Finally, monitor Fine-Grained Password Policies and regularly audit user accounts and group settings.(Citations: Clymb3r Function Hook Passwords Sept 2013, Dell Skeleton, Xorrior Authorization Plugins, TechNet Audit Policy, dump_pwd_dcsync)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Golden Ticket (T1558.001)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Try All Common Switches (CAPEC-133)?\nDesign: Minimize switch and option functionality to only that necessary for correct function of the command.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Try All Common Switches (CAPEC-133)",
      "ddmyn_mitigation_detection": "Design: Minimize switch and option functionality to only that necessary for correct function of the command.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Local Data Staging (T1074.001)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Data Staging (T1074.001)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Archive via Utility (T1560.001)?\nEncrypting a file using a cryptographic key.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Archive via Utility (T1560.001)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Space after Filename (T1036.006)?\nInitiating a host's shutdown sequence to terminate all running processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Space after Filename (T1036.006)",
      "ddmyn_mitigation_detection": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cross Site Tracing (CAPEC-107)?\nPatch web browser against known security origin policy bypass exploits.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cross Site Tracing (CAPEC-107)",
      "ddmyn_mitigation_detection": "Patch web browser against known security origin policy bypass exploits.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Change Default File Association (T1546.001)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Change Default File Association (T1546.001)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Operation on Resource in Wrong Phase of Lifetime (CWE-666)?\nExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Operation on Resource in Wrong Phase of Lifetime (CWE-666)",
      "ddmyn_mitigation_detection": "Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-243 (XSS Targeting HTML Attributes)?\nAssume all input is malicious. Consider all potentially relevant properties when validating input.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-243 (XSS Targeting HTML Attributes)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Consider all potentially relevant properties when validating input.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-243 (XSS Targeting HTML Attributes)?\nImplementation: The victim should configure the browser to minimize active content from untrusted sources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-243 (XSS Targeting HTML Attributes)",
      "ddmyn_mitigation_detection": "Implementation: The victim should configure the browser to minimize active content from untrusted sources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Process Discovery (T1057)?\nBlocking the execution of files on a host in accordance with defined application policy rules.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Process Discovery (T1057)",
      "ddmyn_mitigation_detection": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Redirect Access to Libraries (CAPEC-159)?\nImplementation: Check the integrity of the dynamically linked libraries before use them.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Redirect Access to Libraries (CAPEC-159)",
      "ddmyn_mitigation_detection": "Implementation: Check the integrity of the dynamically linked libraries before use them.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Network Connections Discovery (T1049)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Network Connections Discovery (T1049)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Application Window Discovery (T1010)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Window Discovery (T1010)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Compromise Software Dependencies and Development Tools (T1195.001) by using the strategy below?\nUse signatures or heuristics to detect malicious software.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "ddmyn_mitigation_detection": "Use signatures or heuristics to detect malicious software.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)?\nBest practices should be used to design cryptographic systems.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cryptographic Operations are run Before Supporting Units are Ready (CWE-1279)",
      "ddmyn_mitigation_detection": "Best practices should be used to design cryptographic systems.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Upload Tool (T1608.002)?\nIf SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. (Citations: Fifield Blocking Resistent Communication through domain fronting 2015)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Upload Tool (T1608.002)",
      "ddmyn_mitigation_detection": "If SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. (Citations: Fifield Blocking Resistent Communication through domain fronting 2015)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exposure of Sensitive Information to an Unauthorized Actor (CWE-200) by using the strategy below?\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exposure of Sensitive Information to an Unauthorized Actor (CWE-200)",
      "ddmyn_mitigation_detection": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate One-Way Communication (T1102.003) by using the strategy below?\nRestrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "One-Way Communication (T1102.003)",
      "ddmyn_mitigation_detection": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Use of Function with Inconsistent Implementations (CWE-474)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Use of Function with Inconsistent Implementations (CWE-474)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Malicious Logic Insertion (CAPEC-441)?\nAn organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Malicious Logic Insertion (CAPEC-441)",
      "ddmyn_mitigation_detection": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Permissive List of Allowed Inputs (CWE-183) by using the strategy below?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive List of Allowed Inputs (CWE-183)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations (CWE-1252)?\nWhen using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations (CWE-1252)",
      "ddmyn_mitigation_detection": "When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1211 (Exploitation for Defense Evasion)?\nActively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1211 (Exploitation for Defense Evasion)",
      "ddmyn_mitigation_detection": "Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Space after Filename (T1036.006)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Space after Filename (T1036.006)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Serialized Data with Nested Payloads (CAPEC-230)?\nIdentify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Serialized Data with Nested Payloads (CAPEC-230)",
      "ddmyn_mitigation_detection": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Inclusion of Undocumented Features or Chicken Bits (CWE-1242)?\nMicroarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inclusion of Undocumented Features or Chicken Bits (CWE-1242)",
      "ddmyn_mitigation_detection": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Passing Mutable Objects to an Untrusted Method (CWE-374) by using the strategy below?\nAvoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Passing Mutable Objects to an Untrusted Method (CWE-374)",
      "ddmyn_mitigation_detection": "Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Missing Release of Memory after Effective Lifetime (CWE-401)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Missing Release of Memory after Effective Lifetime (CWE-401)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-520 (Counterfeit Hardware Component Inserted During Product Assembly)?\nHardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-520 (Counterfeit Hardware Component Inserted During Product Assembly)",
      "ddmyn_mitigation_detection": "Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nLimiting the transmission of a credential to a scoped set of relying parties.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Security Support Provider (T1547.005) by using the strategy below?\nMonitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.  (Citations: Graeber 2014, Microsoft Configure LSA)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Security Support Provider (T1547.005)",
      "ddmyn_mitigation_detection": "Monitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.  (Citations: Graeber 2014, Microsoft Configure LSA)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reflection Amplification (T1498.002)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-942 (Permissive Cross-domain Policy with Untrusted Domains) by using the strategy below?\nAccess and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-942 (Permissive Cross-domain Policy with Untrusted Domains)",
      "ddmyn_mitigation_detection": "Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate TCP Null Scan (CAPEC-304) by using the strategy below?\nMaintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "TCP Null Scan (CAPEC-304)",
      "ddmyn_mitigation_detection": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Stored Data Manipulation (T1565.001) by using the strategy below?\nRemoving tokens or credentials from an authentication cache to prevent further user associated account accesses.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Scheduled Task (T1053.005) by using the strategy below?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Launch Agent (T1543.001)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Agent (T1543.001)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Insufficient Logging (CWE-778) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insufficient Logging (CWE-778)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Data from Network Shared Drive (T1039)?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data from Network Shared Drive (T1039)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-623 (Compromising Emanations Attack)?\nImplement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-623 (Compromising Emanations Attack)",
      "ddmyn_mitigation_detection": "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Incorrect Behavior Order: Authorization Before Parsing and Canonicalization (CWE-551)?\nURL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization (CWE-551)",
      "ddmyn_mitigation_detection": "URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Vulnerability Scanning (T1595.002) by using the strategy below?\nMonitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Vulnerability Scanning (T1595.002)",
      "ddmyn_mitigation_detection": "Monitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Free of Pointer not at Start of Buffer (CWE-761)?\nIdentify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Free of Pointer not at Start of Buffer (CWE-761)",
      "ddmyn_mitigation_detection": "Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Defense Evasion (T1211)?\nExecuting or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Expanding Control over the Operating System from the Database (CAPEC-470) by using the strategy below?\nDesign: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Expanding Control over the Operating System from the Database (CAPEC-470)",
      "ddmyn_mitigation_detection": "Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Neutralization of Invalid Characters in Identifiers in Web Pages (CWE-86) by using the strategy below?\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Invalid Characters in Identifiers in Web Pages (CWE-86)",
      "ddmyn_mitigation_detection": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LSASS Driver (T1547.008)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Permissive Cross-domain Policy with Untrusted Domains (CWE-942) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Permissive Cross-domain Policy with Untrusted Domains (CWE-942)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Exposed Unsafe ActiveX Method (CWE-618)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exposed Unsafe ActiveX Method (CWE-618)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1037.005 (Startup Items)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1037.005 (Startup Items)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-916 (Use of Password Hash With Insufficient Computational Effort)?\nRemove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-916 (Use of Password Hash With Insufficient Computational Effort)",
      "ddmyn_mitigation_detection": "Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compromise Hardware Supply Chain (T1195.003)?\nSuspending a running process on a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Hardware Supply Chain (T1195.003)",
      "ddmyn_mitigation_detection": "Suspending a running process on a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Non-Standard Port (T1571) by using the strategy below?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Elevated Execution with Prompt (T1548.004)?\nBlock execution of code on a system through application control, and/or script blocking.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Elevated Execution with Prompt (T1548.004)",
      "ddmyn_mitigation_detection": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Reflection Amplification (T1498.002)?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Exposed Dangerous Method or Function (CWE-749) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exposed Dangerous Method or Function (CWE-749)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Observable Internal Behavioral Discrepancy (CWE-206) by using the strategy below?\nSetup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Internal Behavioral Discrepancy (CWE-206)",
      "ddmyn_mitigation_detection": "Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1558.003 (Kerberoasting)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1558.003 (Kerberoasting)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Logon Script (Windows) (T1037.001)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Owner/User Discovery (T1033)?\nApplication Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Stored Data Manipulation (T1565.001)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate File and Directory Discovery (T1083) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Discovery (T1083)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-488 (Exposure of Data Element to Wrong Session) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-488 (Exposure of Data Element to Wrong Session)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1542.003 (Bootkit) by using the strategy below?\nUse secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1542.003 (Bootkit)",
      "ddmyn_mitigation_detection": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Symmetric Cryptography (T1573.001) by using the strategy below?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate AppInit DLLs (T1546.010)?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1558.003 (Kerberoasting) by using the strategy below?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1558.003 (Kerberoasting)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Botnet (T1583.005)?\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Botnet (T1583.005)",
      "ddmyn_mitigation_detection": "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Traffic Signaling (T1205) by using the strategy below?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Traffic Signaling (T1205)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-230 (Serialized Data with Nested Payloads) by using the strategy below?\nPerform validation on canonical data.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-230 (Serialized Data with Nested Payloads)",
      "ddmyn_mitigation_detection": "Perform validation on canonical data.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Predictable Value Range from Previous Values (CWE-343)?\nDo not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Predictable Value Range from Previous Values (CWE-343)",
      "ddmyn_mitigation_detection": "Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Race Condition within a Thread (CWE-366) by using the strategy below?\nUse locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Race Condition within a Thread (CWE-366)",
      "ddmyn_mitigation_detection": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Accounts (T1078.002)?\nRestoring an entity's access to resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "Restoring an entity's access to resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Use of Path Manipulation Function without Maximum-sized Buffer (CWE-785) by using the strategy below?\nAlways specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Path Manipulation Function without Maximum-sized Buffer (CWE-785)",
      "ddmyn_mitigation_detection": "Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate HTTP Verb Tampering (CAPEC-274) by using the strategy below?\nDesign: Do not use HTTP verbs as factors in access decisions.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "HTTP Verb Tampering (CAPEC-274)",
      "ddmyn_mitigation_detection": "Design: Do not use HTTP verbs as factors in access decisions.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Image File Execution Options Injection (T1546.012)?\nRestoring an software configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Image File Execution Options Injection (T1546.012)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Application Layer Protocol (T1071)?\nArchitect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Layer Protocol (T1071)",
      "ddmyn_mitigation_detection": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Audio Capture (T1123) by using the strategy below?\nThe file removal technique deletes malicious artifacts or programs from a computer system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Audio Capture (T1123)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Struts: Form Bean Does Not Extend Validation Class (CWE-104)?\nFuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Struts: Form Bean Does Not Extend Validation Class (CWE-104)",
      "ddmyn_mitigation_detection": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Stored Data Manipulation (T1565.001) by using the strategy below?\nA file created for the purposes of deceiving an adversary.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Bash History (T1552.003) by using the strategy below?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect LC_LOAD_DYLIB Addition (T1546.006)?\nHost data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "LC_LOAD_DYLIB Addition (T1546.006)",
      "ddmyn_mitigation_detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Comparing instead of Assigning (CWE-482) by using the strategy below?\nProgramming languages and supporting technologies might be chosen which are not subject to these issues.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Comparing instead of Assigning (CWE-482)",
      "ddmyn_mitigation_detection": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Steal Application Access Token (T1528)?\nLimiting the transmission of a credential to a scoped set of relying parties.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Application Access Token (T1528)",
      "ddmyn_mitigation_detection": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Scheduled Task (T1053.005) by using the strategy below?\nControlling access to local computer system resources with kernel-level capabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1205 (Traffic Signaling) by using the strategy below?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1205 (Traffic Signaling)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Integer Overflow or Wraparound (CWE-190)?\nDo not allow users to control names of resources used on the server side.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Integer Overflow or Wraparound (CWE-190)",
      "ddmyn_mitigation_detection": "Do not allow users to control names of resources used on the server side.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)?\nPerform proper forward and reverse DNS lookups to detect DNS spoofing.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)",
      "ddmyn_mitigation_detection": "Perform proper forward and reverse DNS lookups to detect DNS spoofing.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nRestoring an entity's access to resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Restoring an entity's access to resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Launch Agent (T1543.001) by using the strategy below?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Agent (T1543.001)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Improper Resource Locking (CWE-413)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Resource Locking (CWE-413)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Information Discovery (T1082)?\nThe file removal technique deletes malicious artifacts or programs from a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Protection against Electromagnetic Fault Injection (EM-FI) (CWE-1319)?\nUtilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Protection against Electromagnetic Fault Injection (EM-FI) (CWE-1319)",
      "ddmyn_mitigation_detection": "Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Using Malicious Files (CAPEC-17) by using the strategy below?\nDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Malicious Files (CAPEC-17)",
      "ddmyn_mitigation_detection": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1082 (System Information Discovery) by using the strategy below?\nRestoring a entity's access to a computer network.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1082 (System Information Discovery)",
      "ddmyn_mitigation_detection": "Restoring a entity's access to a computer network.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-288 (Authentication Bypass Using an Alternate Path or Channel) by using the strategy below?\nFunnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-288 (Authentication Bypass Using an Alternate Path or Channel)",
      "ddmyn_mitigation_detection": "Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Scheduled Task (T1053.005) by using the strategy below?\nControlling access to local computer system resources with kernel-level capabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CAPEC-600 (Credential Stuffing)?\nThe login attempts use passwords that have been used previously by the user account in question.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CAPEC-600 (Credential Stuffing)",
      "ddmyn_mitigation_detection": "The login attempts use passwords that have been used previously by the user account in question.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Internal Proxy (T1090.001)?\nControlling access to local computer system resources with kernel-level capabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007) by using the strategy below?\nEvery identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007)",
      "ddmyn_mitigation_detection": "Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Owner/User Discovery (T1033)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Email Hiding Rules (T1564.008) by using the strategy below?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Hiding Rules (T1564.008)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Gather Victim Org Information (T1591)?\nUse a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Gather Victim Org Information (T1591)",
      "ddmyn_mitigation_detection": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Subvert Trust Controls (T1553)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Subvert Trust Controls (T1553)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-474 (Use of Function with Inconsistent Implementations)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-474 (Use of Function with Inconsistent Implementations)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Bytecode Weakness Analysis - including disassembler + source code weakness analysis Cost effective for partial coverage: Binary Weakness Analysis - including disassembler + source code weakness analysis",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Control Panel (T1218.002) by using the strategy below?\nMake configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Control Panel (T1218.002)",
      "ddmyn_mitigation_detection": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Multi-Factor Authentication Request Generation (T1621)?\nMonitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Multi-Factor Authentication Request Generation (T1621)",
      "ddmyn_mitigation_detection": "Monitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Forced Integer Overflow (CAPEC-92) by using the strategy below?\nDo not allow accounts to be a local administrator on more than one system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Forced Integer Overflow (CAPEC-92)",
      "ddmyn_mitigation_detection": "Do not allow accounts to be a local administrator on more than one system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Web Service (T1102)?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Compromise Software Dependencies and Development Tools (T1195.001)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect T1137.006 (Add-ins)?\nAnalyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1137.006 (Add-ins)",
      "ddmyn_mitigation_detection": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1547.008 (LSASS Driver)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1547.008 (LSASS Driver)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1546.010 (AppInit DLLs) by using the strategy below?\nA file created for the purposes of deceiving an adversary.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.010 (AppInit DLLs)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unverified Ownership (CWE-283)?\nHandle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unverified Ownership (CWE-283)",
      "ddmyn_mitigation_detection": "Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Owner/User Discovery (T1033) by using the strategy below?\nProcess eviction techniques terminate or remove running process.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Process eviction techniques terminate or remove running process.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-548 (Exposure of Information Through Directory Listing)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-548 (Exposure of Information Through Directory Listing)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Session Credential Falsification through Forging (CAPEC-196)?\nImplementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Session Credential Falsification through Forging (CAPEC-196)",
      "ddmyn_mitigation_detection": "Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-306 (Missing Authentication for Critical Function)?\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-306 (Missing Authentication for Critical Function)",
      "ddmyn_mitigation_detection": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Disable Windows Event Logging (T1562.002) by using the strategy below?\nDetermining which credentials may have been compromised by analyzing the user logon history of a particular system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Disable Windows Event Logging (T1562.002)",
      "ddmyn_mitigation_detection": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Expanding Control over the Operating System from the Database (CAPEC-470) by using the strategy below?\nDeletion of data should be completed promptly when requested.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Expanding Control over the Operating System from the Database (CAPEC-470)",
      "ddmyn_mitigation_detection": "Deletion of data should be completed promptly when requested.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rootkit (T1014)?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Relative Path Traversal (CWE-23)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Relative Path Traversal (CWE-23)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Services File Permissions Weakness (T1574.010)?\nSoftware inventorying identifies and records the software items in the organization's architecture.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmyn_mitigation_detection": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nRun time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "ddmyn_mitigation_detection": "Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Archive via Utility (T1560.001)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Archive via Utility (T1560.001)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1176 (Browser Extensions) by using the strategy below?\nInventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates. Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation. On macOS, monitor the command line for usage of the profiles tool, such as <code>profiles install -type=configuration</code>. Additionally, all installed extensions maintain a <code>plist</code> file in the <code>/Library/Managed Preferences/username/</code> directory. Ensure all listed files are in alignment with approved extensions.(Citations: xorrior chrome extensions macOS)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1176 (Browser Extensions)",
      "ddmyn_mitigation_detection": "Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates. Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation. On macOS, monitor the command line for usage of the profiles tool, such as <code>profiles install -type=configuration</code>. Additionally, all installed extensions maintain a <code>plist</code> file in the <code>/Library/Managed Preferences/username/</code> directory. Ensure all listed files are in alignment with approved extensions.(Citations: xorrior chrome extensions macOS)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1033 (System Owner/User Discovery) by using the strategy below?\nConsider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Detection efforts may be focused on related behaviors, such as Web Protocols or Asymmetric Cryptography.(Citations: Splunk Kovar Certificates 2017)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1033 (System Owner/User Discovery)",
      "ddmyn_mitigation_detection": "Consider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Detection efforts may be focused on related behaviors, such as Web Protocols or Asymmetric Cryptography.(Citations: Splunk Kovar Certificates 2017)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681) by using the strategy below?\nReview generation of security identifiers for design inconsistencies and common weaknesses.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC-681)",
      "ddmyn_mitigation_detection": "Review generation of security identifiers for design inconsistencies and common weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Group Policy Discovery (T1615)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Group Policy Discovery (T1615)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Password Recovery Exploitation (CAPEC-50) by using the strategy below?\nAuthentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Password Recovery Exploitation (CAPEC-50)",
      "ddmyn_mitigation_detection": "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Internal Proxy (T1090.001) by using the strategy below?\nUse intrusion detection signatures to block traffic at network boundaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Port Monitors (T1547.010)?\nAnalysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Monitors (T1547.010)",
      "ddmyn_mitigation_detection": "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exfiltration Over Alternative Protocol (T1048)?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Escaping Virtualization (CAPEC-480)?\nEnsure virtualization software is current and up-to-date.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Escaping Virtualization (CAPEC-480)",
      "ddmyn_mitigation_detection": "Ensure virtualization software is current and up-to-date.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Control Panel (T1218.002)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Control Panel (T1218.002)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Removal of Sensitive Information Before Storage or Transfer (CWE-212) by using the strategy below?\nAlways check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Removal of Sensitive Information Before Storage or Transfer (CWE-212)",
      "ddmyn_mitigation_detection": "Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Web Service (T1102)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rogue Domain Controller (T1207)?\nEmulating instructions in a file looking for specific patterns.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Emulating instructions in a file looking for specific patterns.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Export of Android Application Components (CWE-926)?\nIf you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmyn_mitigation_detection": "If you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Indirect Command Execution (T1202)?\nMonitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections. (Citations: RSA Forfiles Aug 2017)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Indirect Command Execution (T1202)",
      "ddmyn_mitigation_detection": "Monitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections. (Citations: RSA Forfiles Aug 2017)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Command Delimiters (CAPEC-15)?\nDesign: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Command Delimiters (CAPEC-15)",
      "ddmyn_mitigation_detection": "Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Exposure of Sensitive System Information to an Unauthorized Control Sphere (CWE-497) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exposure of Sensitive System Information to an Unauthorized Control Sphere (CWE-497)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))?\nUtilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))",
      "ddmyn_mitigation_detection": "Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Kerberoasting (T1558.003)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Kerberoasting (T1558.003)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Defense Evasion (T1211)?\nDetermining which credentials may have been compromised by analyzing the user logon history of a particular system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Steal Application Access Token (T1528) by using the strategy below?\nIdentification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Application Access Token (T1528)",
      "ddmyn_mitigation_detection": "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1082 (System Information Discovery)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1082 (System Information Discovery)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-190 (Integer Overflow or Wraparound) by using the strategy below?\nEnsure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-190 (Integer Overflow or Wraparound)",
      "ddmyn_mitigation_detection": "Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate XSS Targeting Non-Script Elements (CAPEC-18)?\nDesign: Limit which types can be deserialized.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "XSS Targeting Non-Script Elements (CAPEC-18)",
      "ddmyn_mitigation_detection": "Design: Limit which types can be deserialized.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Dynamic Resolution (T1568)?\nExpiring an existing set of credentials and reissuing a new valid set\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "Expiring an existing set of credentials and reissuing a new valid set",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate SIP and Trust Provider Hijacking (T1553.003)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SIP and Trust Provider Hijacking (T1553.003)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1528 (Steal Application Access Token)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1528 (Steal Application Access Token)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reusing a Nonce, Key Pair in Encryption (CWE-323)?\nRefuse to reuse nonce values.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reusing a Nonce, Key Pair in Encryption (CWE-323)",
      "ddmyn_mitigation_detection": "Refuse to reuse nonce values.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-702 (Exploiting Incorrect Chaining or Granularity of Hardware Debug Components)?\nMake sure your web server is up-to-date with all patches to protect against known vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-702 (Exploiting Incorrect Chaining or Granularity of Hardware Debug Components)",
      "ddmyn_mitigation_detection": "Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Same Seed in Pseudo-Random Number Generator (PRNG) (CWE-336) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Same Seed in Pseudo-Random Number Generator (PRNG) (CWE-336)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cross-Site Request Forgery (CSRF) (CWE-352)?\nEnsure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "ddmyn_mitigation_detection": "Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Encryption Brute Forcing (CAPEC-20) by using the strategy below?\nNone. This attack happens offline.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Encryption Brute Forcing (CAPEC-20)",
      "ddmyn_mitigation_detection": "None. This attack happens offline.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1539 (Steal Web Session Cookie)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1539 (Steal Web Session Cookie)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Bash History (T1552.003)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Email Hiding Rules (T1564.008) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Hiding Rules (T1564.008)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Permissive List of Allowed Inputs (CWE-183) by using the strategy below?\nDevelopers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive List of Allowed Inputs (CWE-183)",
      "ddmyn_mitigation_detection": "Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1205.001 (Port Knocking)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1205.001 (Port Knocking)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Content Spoofing (CAPEC-148)?\nStrong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Content Spoofing (CAPEC-148)",
      "ddmyn_mitigation_detection": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Lateral Tool Transfer (T1570) by using the strategy below?\nRestricting network traffic originating from untrusted networks destined towards a private host or enclave.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from untrusted networks destined towards a private host or enclave.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Port Monitors (T1547.010)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Monitors (T1547.010)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Using Malicious Files (CAPEC-17)?\nRemove potentially sensitive information that is not necessary for the application's functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Malicious Files (CAPEC-17)",
      "ddmyn_mitigation_detection": "Remove potentially sensitive information that is not necessary for the application's functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nCredential Eviction techniques disable or remove compromised credentials from a computer network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Kerberoasting (T1558.003)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Kerberoasting (T1558.003)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Using Referer Field for Authentication (CWE-293)?\nIn order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Referer Field for Authentication (CWE-293)",
      "ddmyn_mitigation_detection": "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Bidirectional Communication (T1102.002)?\nPrevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bidirectional Communication (T1102.002)",
      "ddmyn_mitigation_detection": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Remote Email Collection (T1114.002) by using the strategy below?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Remote Email Collection (T1114.002)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Double Free (CWE-415) by using the strategy below?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Double Free (CWE-415)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Symmetric Cryptography (T1573.001) by using the strategy below?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Credential Stuffing (CAPEC-600)?\nMany invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Credential Stuffing (CAPEC-600)",
      "ddmyn_mitigation_detection": "Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Information Discovery (T1082)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1140 (Deobfuscate/Decode Files or Information)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Permissive List of Allowed Inputs (CWE-183) by using the strategy below?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive List of Allowed Inputs (CWE-183)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Control Panel (T1218.002)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Control Panel (T1218.002)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect XDG Autostart Entries (T1547.013) by using the strategy below?\nMalicious XDG autostart entries may be detected by auditing file creation and modification events within the <code>/etc/xdg/autostart</code> and <code>~/.config/autostart</code> directories. Depending on individual configurations, defenders may need to query the environment variables <code>$XDG_CONFIG_HOME</code> or <code>$XDG_CONFIG_DIRS</code> to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline. Suspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "XDG Autostart Entries (T1547.013)",
      "ddmyn_mitigation_detection": "Malicious XDG autostart entries may be detected by auditing file creation and modification events within the <code>/etc/xdg/autostart</code> and <code>~/.config/autostart</code> directories. Depending on individual configurations, defenders may need to query the environment variables <code>$XDG_CONFIG_HOME</code> or <code>$XDG_CONFIG_DIRS</code> to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline. Suspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Poison Web Service Registry (CAPEC-51)?\nLook for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Poison Web Service Registry (CAPEC-51)",
      "ddmyn_mitigation_detection": "Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CMSTP (T1218.003)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CMSTP (T1218.003)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate COR_PROFILER (T1574.012) by using the strategy below?\nSoftware inventorying identifies and records the software items in the organization's architecture.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "COR_PROFILER (T1574.012)",
      "ddmyn_mitigation_detection": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Password Managers (T1555.005) by using the strategy below?\nUse network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Password Managers (T1555.005)",
      "ddmyn_mitigation_detection": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate XQuery Injection (CAPEC-84) by using the strategy below?\nImplementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "XQuery Injection (CAPEC-84)",
      "ddmyn_mitigation_detection": "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate NTDS (T1003.003)?\nProtect sensitive information with strong encryption.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "NTDS (T1003.003)",
      "ddmyn_mitigation_detection": "Protect sensitive information with strong encryption.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Web Service (T1102) by using the strategy below?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Inhibit System Recovery (T1490)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inhibit System Recovery (T1490)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Improper Neutralization of Data within XPath Expressions ('XPath Injection') (CWE-643)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection') (CWE-643)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Expanding Control over the Operating System from the Database (CAPEC-470)?\nUsage: Do not use the DBMS machine for anything else other than the database\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Expanding Control over the Operating System from the Database (CAPEC-470)",
      "ddmyn_mitigation_detection": "Usage: Do not use the DBMS machine for anything else other than the database",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exfiltration Over C2 Channel (T1041)?\nUse a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over C2 Channel (T1041)",
      "ddmyn_mitigation_detection": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect HTTP Response Smuggling (CAPEC-273)?\nDifferences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "HTTP Response Smuggling (CAPEC-273)",
      "ddmyn_mitigation_detection": "Differences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Security Support Provider (T1547.005)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Support Provider (T1547.005)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate AppInit DLLs (T1546.010) by using the strategy below?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Stored Data Manipulation (T1565.001)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Use of Predictable Algorithm in Random Number Generator (CWE-1241)?\nA true random number generator should be specified for cryptographic algorithms.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Predictable Algorithm in Random Number Generator (CWE-1241)",
      "ddmyn_mitigation_detection": "A true random number generator should be specified for cryptographic algorithms.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Owner/User Discovery (T1033) by using the strategy below?\nFile eviction techniques evict files from system storage.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Service Discovery (T1007)?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Service Discovery (T1007)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Finite State Machines (FSMs) in Hardware Logic (CWE-1245)?\nDefine all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Finite State Machines (FSMs) in Hardware Logic (CWE-1245)",
      "ddmyn_mitigation_detection": "Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-484 (Omitted Break Statement in Switch)?\nAvoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-484 (Omitted Break Statement in Switch)",
      "ddmyn_mitigation_detection": "Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Serializable Data Element Containing non-Serializable Item Elements (CWE-1070) by using the strategy below?\nPerform a type check before interpreting files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Serializable Data Element Containing non-Serializable Item Elements (CWE-1070)",
      "ddmyn_mitigation_detection": "Perform a type check before interpreting files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Defense Evasion (T1211)?\nComparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1552.002 (Credentials in Registry) by using the strategy below?\nRestricting network traffic originating from a private host or enclave destined towards untrusted networks.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1552.002 (Credentials in Registry)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Information Discovery (T1082)?\nEmulating instructions in a file looking for specific patterns.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "Emulating instructions in a file looking for specific patterns.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Portable Executable Injection (T1055.002)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Portable Executable Injection (T1055.002)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate XSS Targeting Non-Script Elements (CAPEC-18)?\nAll output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "XSS Targeting Non-Script Elements (CAPEC-18)",
      "ddmyn_mitigation_detection": "All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Non-Application Layer Protocol (T1095)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Dangerous Signal Handler not Disabled During Sensitive Operations (CWE-432)?\nTurn off dangerous handlers when performing sensitive operations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dangerous Signal Handler not Disabled During Sensitive Operations (CWE-432)",
      "ddmyn_mitigation_detection": "Turn off dangerous handlers when performing sensitive operations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Netsh Helper DLL (T1546.007) by using the strategy below?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Null Termination (CWE-170) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Null Termination (CWE-170)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Security Software Discovery (T1518.001)?\nAnalyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Cross-Site Request Forgery (CSRF) (CWE-352)?\nUse the \"double-submitted cookie\" method as described by Felten and Zeller: When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same. Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult. This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "ddmyn_mitigation_detection": "Use the \"double-submitted cookie\" method as described by Felten and Zeller: When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same. Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult. This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Bash History (T1552.003) by using the strategy below?\nRestoring an object for an entity to access. This is the broadest class for object restoral.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Spearphishing via Service (T1566.003)?\nTaking known malicious identifiers and determining if they are present in a system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "Taking known malicious identifiers and determining if they are present in a system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1546.009 (AppCert DLLs)?\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location.   Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.(Citations: Elastic Process Injection July 2017, TechNet Autoruns, Sysinternals AppCertDlls Oct 2007)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1546.009 (AppCert DLLs)",
      "ddmyn_mitigation_detection": "Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location.   Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.(Citations: Elastic Process Injection July 2017, TechNet Autoruns, Sysinternals AppCertDlls Oct 2007)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Group Policy Preferences (T1552.006) by using the strategy below?\nRestoring an object for an entity to access. This is the broadest class for object restoral.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Group Policy Preferences (T1552.006)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Transmitted Data Manipulation (T1565.002) by using the strategy below?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate DNS Cache Poisoning (CAPEC-142)?\nRequire elevated privileges for distribution of software and software updates.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "DNS Cache Poisoning (CAPEC-142)",
      "ddmyn_mitigation_detection": "Require elevated privileges for distribution of software and software updates.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Symmetric Cryptography (T1573.001) by using the strategy below?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Handling of Unexpected Data Type (CWE-241) by using the strategy below?\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Handling of Unexpected Data Type (CWE-241)",
      "ddmyn_mitigation_detection": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Android Intent Intercept (CAPEC-499)?\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Android Intent Intercept (CAPEC-499)",
      "ddmyn_mitigation_detection": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Direct Network Flood (T1498.001)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unix Shell Configuration Modification (T1546.004) by using the strategy below?\nA file created for the purposes of deceiving an adversary.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Defense Evasion (T1211) by using the strategy below?\nPreventing execution of any address in a memory region other than the code segment.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Preventing execution of any address in a memory region other than the code segment.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nComparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  }
]