[
  {
    "instruction": "Can you mitigate Logon Script (Windows) (T1037.001) by using the strategy below?\nBlocking the execution of files on a host in accordance with defined application policy rules.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-152 (Improper Neutralization of Macro Symbols)?\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-152 (Improper Neutralization of Macro Symbols)",
      "ddmyn_mitigation_detection": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1574.012 (COR_PROFILER)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1574.012 (COR_PROFILER)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1606 (Forge Web Credentials)?\nDetecting the use of a hidden file system may be exceptionally difficult depending on the implementation. Emphasis may be placed on detecting related aspects of the adversary lifecycle, such as how malware interacts with the hidden file system or how a hidden file system is loaded. Consider looking for anomalous interactions with the Registry or with a particular file on disk. Likewise, if the hidden file system is loaded on boot from reserved disk space, consider shifting focus to detecting Bootkit activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1606 (Forge Web Credentials)",
      "ddmyn_mitigation_detection": "Detecting the use of a hidden file system may be exceptionally difficult depending on the implementation. Emphasis may be placed on detecting related aspects of the adversary lifecycle, such as how malware interacts with the hidden file system or how a hidden file system is loaded. Consider looking for anomalous interactions with the Registry or with a particular file on disk. Likewise, if the hidden file system is loaded on boot from reserved disk space, consider shifting focus to detecting Bootkit activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Race Condition within a Thread (CWE-366) by using the strategy below?\nUse locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Race Condition within a Thread (CWE-366)",
      "ddmyn_mitigation_detection": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate XQuery Injection (CAPEC-84) by using the strategy below?\nImplementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "XQuery Injection (CAPEC-84)",
      "ddmyn_mitigation_detection": "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Default Accounts (T1078.001)?\nSet and enforce secure password policies for accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Default Accounts (T1078.001)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Setuid and Setgid (T1548.001) by using the strategy below?\nNetwork traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Setuid and Setgid (T1548.001)",
      "ddmyn_mitigation_detection": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1558.003 (Kerberoasting)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1558.003 (Kerberoasting)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1583.006 (Web Services)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1583.006 (Web Services)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Covert Storage Channel (CWE-515)?\nImplement password aging functionality that requires passwords be changed after a certain point.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Covert Storage Channel (CWE-515)",
      "ddmyn_mitigation_detection": "Implement password aging functionality that requires passwords be changed after a certain point.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Inclusion of Sensitive Information in Source Code Comments (CWE-615)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Inclusion of Sensitive Information in Source Code Comments (CWE-615)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Owner/User Discovery (T1033) by using the strategy below?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Email Forwarding Rule (T1114.003) by using the strategy below?\nInitiating a host's reboot sequence to terminate all running processes.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmyn_mitigation_detection": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-652 (Use of Known Kerberos Credentials) by using the strategy below?\nConfiguration: front-end HTTP agents notice ambiguous requests.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-652 (Use of Known Kerberos Credentials)",
      "ddmyn_mitigation_detection": "Configuration: front-end HTTP agents notice ambiguous requests.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Resource Shutdown or Release (CWE-404)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Resource Shutdown or Release (CWE-404)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-117 (Improper Output Neutralization for Logs) by using the strategy below?\nCreate a strategy for presenting information, and plan for how to display unusual characters.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-117 (Improper Output Neutralization for Logs)",
      "ddmyn_mitigation_detection": "Create a strategy for presenting information, and plan for how to display unusual characters.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate XSS Targeting HTML Attributes (CAPEC-243)?\nImplementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "XSS Targeting HTML Attributes (CAPEC-243)",
      "ddmyn_mitigation_detection": "Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1573.001 (Symmetric Cryptography)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1573.001 (Symmetric Cryptography)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-Stage Channels (T1104) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Control Panel (T1218.002)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Control Panel (T1218.002)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Privilege Escalation (T1068) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-1021 (Improper Restriction of Rendered UI Layers or Frames)?\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1021 (Improper Restriction of Rendered UI Layers or Frames)",
      "ddmyn_mitigation_detection": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Information Discovery (T1082)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nLimiting the transmission of a credential to a scoped set of relying parties.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate User-Controlled Filename (CAPEC-73)?\nReset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "User-Controlled Filename (CAPEC-73)",
      "ddmyn_mitigation_detection": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate XSS Targeting Non-Script Elements (CAPEC-18)?\nAll output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "XSS Targeting Non-Script Elements (CAPEC-18)",
      "ddmyn_mitigation_detection": "All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Handling of Unexpected Data Type (CWE-241)?\nSystem software can mitigate this weakness by invoking predictor-state-sanitizing operations (for example, the indirect branch prediction barrier on Intel x86) when switching from one context to another, according to the hardware vendor's recommendations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Handling of Unexpected Data Type (CWE-241)",
      "ddmyn_mitigation_detection": "System software can mitigate this weakness by invoking predictor-state-sanitizing operations (for example, the indirect branch prediction barrier on Intel x86) when switching from one context to another, according to the hardware vendor's recommendations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1564.009 (Resource Forking)?\nThis mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1564.009 (Resource Forking)",
      "ddmyn_mitigation_detection": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Information Discovery (T1082)?\nEmploying a pattern matching rule language to analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate EJB Bad Practices: Use of Java I/O (CWE-576)?\nUse expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "EJB Bad Practices: Use of Java I/O (CWE-576)",
      "ddmyn_mitigation_detection": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Missing Protection Mechanism for Alternate Hardware Interface (CWE-1299)?\nProtect assets from accesses against all potential interfaces and alternate paths.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Protection Mechanism for Alternate Hardware Interface (CWE-1299)",
      "ddmyn_mitigation_detection": "Protect assets from accesses against all potential interfaces and alternate paths.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Lateral Tool Transfer (T1570) by using the strategy below?\nRestricting network traffic originating from untrusted networks destined towards a private host or enclave.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from untrusted networks destined towards a private host or enclave.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-149 (Improper Neutralization of Quoting Syntax) by using the strategy below?\nLogic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-149 (Improper Neutralization of Quoting Syntax)",
      "ddmyn_mitigation_detection": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Launch Agent (T1543.001)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Agent (T1543.001)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Storage of File With Sensitive Data Under FTP Root (CWE-220)?\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Storage of File With Sensitive Data Under FTP Root (CWE-220)",
      "ddmyn_mitigation_detection": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Observable Behavioral Discrepancy (CWE-205)?\nFully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Behavioral Discrepancy (CWE-205)",
      "ddmyn_mitigation_detection": "Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Browser Extensions (T1176)?\nChanges to service Registry entries and command line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool PsExec.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Browser Extensions (T1176)",
      "ddmyn_mitigation_detection": "Changes to service Registry entries and command line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool PsExec.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Add Malicious File to Shared Webroot (CAPEC-563)?\nImplementation: Disable scripting languages such as JavaScript in browser\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Add Malicious File to Shared Webroot (CAPEC-563)",
      "ddmyn_mitigation_detection": "Implementation: Disable scripting languages such as JavaScript in browser",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Cleartext Storage of Sensitive Information (CWE-312) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Cleartext Storage of Sensitive Information (CWE-312)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate HTML Smuggling (T1027.006) by using the strategy below?\nRestrict execution of code to a virtual environment on or in transit to an endpoint system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "HTML Smuggling (T1027.006)",
      "ddmyn_mitigation_detection": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Modify Registry (T1112) by using the strategy below?\nRestricting system configuration modifications to a specific user or group of users.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Modify Registry (T1112)",
      "ddmyn_mitigation_detection": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-257 (Storing Passwords in a Recoverable Format)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-257 (Storing Passwords in a Recoverable Format)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Credential Stuffing (T1110.004) by using the strategy below?\nRestoring the data in a database.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential Stuffing (T1110.004)",
      "ddmyn_mitigation_detection": "Restoring the data in a database.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1176 (Browser Extensions) by using the strategy below?\nInventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates. Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation. On macOS, monitor the command line for usage of the profiles tool, such as <code>profiles install -type=configuration</code>. Additionally, all installed extensions maintain a <code>plist</code> file in the <code>/Library/Managed Preferences/username/</code> directory. Ensure all listed files are in alignment with approved extensions.(Citations: xorrior chrome extensions macOS)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1176 (Browser Extensions)",
      "ddmyn_mitigation_detection": "Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates. Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation. On macOS, monitor the command line for usage of the profiles tool, such as <code>profiles install -type=configuration</code>. Additionally, all installed extensions maintain a <code>plist</code> file in the <code>/Library/Managed Preferences/username/</code> directory. Ensure all listed files are in alignment with approved extensions.(Citations: xorrior chrome extensions macOS)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99) by using the strategy below?\nSet the lock bit. Attempt to modify the information protected by the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmyn_mitigation_detection": "Set the lock bit. Attempt to modify the information protected by the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Encryption Brute Forcing (CAPEC-20) by using the strategy below?\nNone. This attack happens offline.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Encryption Brute Forcing (CAPEC-20)",
      "ddmyn_mitigation_detection": "None. This attack happens offline.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Spearphishing via Service (T1566.003) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Content Spoofing (CAPEC-148)?\nImplementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Content Spoofing (CAPEC-148)",
      "ddmyn_mitigation_detection": "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Ownership Management (CWE-282)?\nVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Ownership Management (CWE-282)",
      "ddmyn_mitigation_detection": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Non-Application Layer Protocol (T1095)?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1490 (Inhibit System Recovery) by using the strategy below?\nTake and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1490 (Inhibit System Recovery)",
      "ddmyn_mitigation_detection": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1574.005 (Executable Installer File Permissions Weakness) by using the strategy below?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1574.005 (Executable Installer File Permissions Weakness)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-Stage Channels (T1104) by using the strategy below?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Double Free (CWE-415)?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Double Free (CWE-415)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Using Referer Field for Authentication (CWE-293)?\nIn order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Referer Field for Authentication (CWE-293)",
      "ddmyn_mitigation_detection": "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1570 (Lateral Tool Transfer)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1570 (Lateral Tool Transfer)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Non-Standard Port (T1571)?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Golden Ticket (T1558.001) by using the strategy below?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1560.001 (Archive via Utility)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1560.001 (Archive via Utility)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1548.003 (Sudo and Sudo Caching)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1548.003 (Sudo and Sudo Caching)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CMSTP (T1218.003) by using the strategy below?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CMSTP (T1218.003)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-1300 (Improper Protection of Physical Side Channels)?\nAccess and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1300 (Improper Protection of Physical Side Channels)",
      "ddmyn_mitigation_detection": "Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Web Services API Signature Forgery Leveraging Hash Function Extension Weakness (CAPEC-461)?\nDesign: Use a secure message authentication code (MAC) function such as an HMAC-SHA1\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness (CAPEC-461)",
      "ddmyn_mitigation_detection": "Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Password Filter DLL (T1556.002) by using the strategy below?\nUse intrusion detection signatures to block traffic at network boundaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Password Filter DLL (T1556.002)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1207 (Rogue Domain Controller)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1207 (Rogue Domain Controller)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') (CWE-757) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') (CWE-757)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Use of Persistent Cookies Containing Sensitive Information (CWE-539) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Use of Persistent Cookies Containing Sensitive Information (CWE-539)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Isolation of Shared Resources in Network On Chip (NoC) (CWE-1331)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Debugger",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Install Digital Certificate (T1608.003)?\nConsider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Detection efforts may be focused on related behaviors, such as Web Protocols or Asymmetric Cryptography.(Citations: Splunk Kovar Certificates 2017)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Install Digital Certificate (T1608.003)",
      "ddmyn_mitigation_detection": "Consider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Detection efforts may be focused on related behaviors, such as Web Protocols or Asymmetric Cryptography.(Citations: Splunk Kovar Certificates 2017)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1568 (Dynamic Resolution)?\nBlocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1568 (Dynamic Resolution)",
      "ddmyn_mitigation_detection": "Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-157 (Failure to Sanitize Paired Delimiters) by using the strategy below?\nFuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-157 (Failure to Sanitize Paired Delimiters)",
      "ddmyn_mitigation_detection": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploits (T1587.004)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploits (T1587.004)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Privilege Escalation (T1068)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Archive via Utility (T1560.001)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Archive via Utility (T1560.001)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Password Spraying (T1110.003) by using the strategy below?\nUse two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Password Spraying (T1110.003)",
      "ddmyn_mitigation_detection": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Inducing Account Lockout (CAPEC-2)?\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inducing Account Lockout (CAPEC-2)",
      "ddmyn_mitigation_detection": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations (CWE-1252)?\nImplement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit).\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations (CWE-1252)",
      "ddmyn_mitigation_detection": "Implement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Struts: Unvalidated Action Form (CWE-108)?\nMap every Action Form to a corresponding validation form. An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Struts: Unvalidated Action Form (CWE-108)",
      "ddmyn_mitigation_detection": "Map every Action Form to a corresponding validation form. An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))?\nUtilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))",
      "ddmyn_mitigation_detection": "Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Run Software at Logon (CAPEC-564)?\nRestrict write access to logon scripts to necessary administrators.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Run Software at Logon (CAPEC-564)",
      "ddmyn_mitigation_detection": "Restrict write access to logon scripts to necessary administrators.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-252 (Unchecked Return Value)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-252 (Unchecked Return Value)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Dylib Hijacking (T1574.004) by using the strategy below?\nRestoring a file for an entity to access.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dylib Hijacking (T1574.004)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Direct Network Flood (T1498.001)?\nRestoring an software configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1112 (Modify Registry)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1112 (Modify Registry)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1587.004 (Exploits) by using the strategy below?\nLook for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1587.004 (Exploits)",
      "ddmyn_mitigation_detection": "Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Unrestricted Externally Accessible Lock (CWE-412) by using the strategy below?\nAutomated code analysis techniques might not be able to reliably detect this weakness, since the application's behavior and general security model dictate which resource locks are critical. Interpretation of the weakness might require knowledge of the environment, e.g. if the existence of a file is used as a lock, but the file is created in a world-writable directory.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Unrestricted Externally Accessible Lock (CWE-412)",
      "ddmyn_mitigation_detection": "Automated code analysis techniques might not be able to reliably detect this weakness, since the application's behavior and general security model dictate which resource locks are critical. Interpretation of the weakness might require knowledge of the environment, e.g. if the existence of a file is used as a lock, but the file is created in a world-writable directory.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Scheduled Task (T1053.005)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Reflection Amplification (T1498.002) by using the strategy below?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Match Legitimate Name or Location (T1036.005)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-229 (Serialized Data Parameter Blowup)?\nThis attack may be mitigated completely by using a parser that is not using a vulnerable container.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-229 (Serialized Data Parameter Blowup)",
      "ddmyn_mitigation_detection": "This attack may be mitigated completely by using a parser that is not using a vulnerable container.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-445 (Malicious Logic Insertion into Product Software via Configuration Management Manipulation)?\nKeep patches up to date by installing weekly or daily if possible.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-445 (Malicious Logic Insertion into Product Software via Configuration Management Manipulation)",
      "ddmyn_mitigation_detection": "Keep patches up to date by installing weekly or daily if possible.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-486 (UDP Flood)?\nTo help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-486 (UDP Flood)",
      "ddmyn_mitigation_detection": "To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Buffer Access with Incorrect Length Value (CWE-805)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Buffer Access with Incorrect Length Value (CWE-805)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Automated Monitored Execution",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1048.001 (Exfiltration Over Symmetric Encrypted Non-C2 Protocol)?\nExecuting or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1048.001 (Exfiltration Over Symmetric Encrypted Non-C2 Protocol)",
      "ddmyn_mitigation_detection": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Design for FPGA Maliciously Altered (CAPEC-674)?\nUtilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Design for FPGA Maliciously Altered (CAPEC-674)",
      "ddmyn_mitigation_detection": "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Web Cookies (T1606.001)?\nNetwork intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link. Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once User Execution occurs.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Web Cookies (T1606.001)",
      "ddmyn_mitigation_detection": "Network intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link. Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once User Execution occurs.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Direct Network Flood (T1498.001)?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1205.001 (Port Knocking) by using the strategy below?\nUsing kernel-level capabilities to isolate processes.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1205.001 (Port Knocking)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Bidirectional Communication (T1102.002)?\nRestrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bidirectional Communication (T1102.002)",
      "ddmyn_mitigation_detection": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Targeted Malware (CAPEC-542)?\nSoftware being run on a system matches a file signature found in a malware database\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Targeted Malware (CAPEC-542)",
      "ddmyn_mitigation_detection": "Software being run on a system matches a file signature found in a malware database",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Credential Stuffing (T1110.004) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential Stuffing (T1110.004)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Stored Data Manipulation (T1565.001)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Steal Web Session Cookie (T1539) by using the strategy below?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Web Session Cookie (T1539)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate File and Directory Discovery (T1083)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Discovery (T1083)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Safe Mode Boot (T1562.009)?\nAnalysis of any system process startup configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Safe Mode Boot (T1562.009)",
      "ddmyn_mitigation_detection": "Analysis of any system process startup configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Local Data Staging (T1074.001)?\nAnalyzing failed connections in a network to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Data Staging (T1074.001)",
      "ddmyn_mitigation_detection": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Cloud Accounts (T1078.004) by using the strategy below?\nCollecting network communication protocol metadata and identifying statistical outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Targeted Malware (CAPEC-542)?\nMessages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Targeted Malware (CAPEC-542)",
      "ddmyn_mitigation_detection": "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Leading Special Elements (CWE-160)",
      "ddmyn_mitigation_detection": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Image File Execution Options Injection (T1546.012) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Image File Execution Options Injection (T1546.012)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CMSTP (T1218.003)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CMSTP (T1218.003)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1547.002 (Authentication Package) by using the strategy below?\nIdentify network traffic sent or received by untrusted hosts or networks that expose MIB content or use unauthorized protocols.(Citations: Cisco Advisory SNMP v3 Authentication Vulnerabilities)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1547.002 (Authentication Package)",
      "ddmyn_mitigation_detection": "Identify network traffic sent or received by untrusted hosts or networks that expose MIB content or use unauthorized protocols.(Citations: Cisco Advisory SNMP v3 Authentication Vulnerabilities)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Data Transfer Size Limits (T1030)?\nHardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data Transfer Size Limits (T1030)",
      "ddmyn_mitigation_detection": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Run Virtual Instance (T1564.006)?\nBlock execution of code on a system through application control, and/or script blocking.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Run Virtual Instance (T1564.006)",
      "ddmyn_mitigation_detection": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Session Credential Falsification through Forging (CAPEC-196)?\nImplementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Session Credential Falsification through Forging (CAPEC-196)",
      "ddmyn_mitigation_detection": "Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-312 (Cleartext Storage of Sensitive Information)?\nDuring the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-312 (Cleartext Storage of Sensitive Information)",
      "ddmyn_mitigation_detection": "During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Active Setup (T1547.014) by using the strategy below?\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Active Setup (T1547.014)",
      "ddmyn_mitigation_detection": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Dynamic Resolution (T1568)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Validation of Function Hook Arguments (CWE-622)?\nMake all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Validation of Function Hook Arguments (CWE-622)",
      "ddmyn_mitigation_detection": "Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1037.005 (Startup Items)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1037.005 (Startup Items)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Scheduled Task (T1053.005)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Rogue Domain Controller (T1207)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-470 (Expanding Control over the Operating System from the Database) by using the strategy below?\nUsage: Use an intrusion detection system to monitor network connections and logs on the database host.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-470 (Expanding Control over the Operating System from the Database)",
      "ddmyn_mitigation_detection": "Usage: Use an intrusion detection system to monitor network connections and logs on the database host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Scheduled Task (T1053.005) by using the strategy below?\nAnalyzing spawn arguments or attributes of a process to detect processes that are unauthorized.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Information Discovery (T1082)?\nAn environment created for the purpose of attracting attackers and eliciting their behaviors that is not connected to any production enterprise systems.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "An environment created for the purpose of attracting attackers and eliciting their behaviors that is not connected to any production enterprise systems.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Incorrect Selection of Fuse Values (CWE-1253)?\nLogic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Selection of Fuse Values (CWE-1253)",
      "ddmyn_mitigation_detection": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1070.002 (Clear Linux or Mac System Logs)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1070.002 (Clear Linux or Mac System Logs)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Upload Tool (T1608.002)?\nIf SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. (Citations: Fifield Blocking Resistent Communication through domain fronting 2015)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Upload Tool (T1608.002)",
      "ddmyn_mitigation_detection": "If SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. (Citations: Fifield Blocking Resistent Communication through domain fronting 2015)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-271 (Schema Poisoning)?\nImplementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-271 (Schema Poisoning)",
      "ddmyn_mitigation_detection": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Protection against Electromagnetic Fault Injection (EM-FI) (CWE-1319)?\nUtilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Protection against Electromagnetic Fault Injection (EM-FI) (CWE-1319)",
      "ddmyn_mitigation_detection": "Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information. When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-509 (Replicating Malicious Code (Virus or Worm))?\nAvoid using hard-coded constants. Configuration files offer a more flexible solution.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-509 (Replicating Malicious Code (Virus or Worm))",
      "ddmyn_mitigation_detection": "Avoid using hard-coded constants. Configuration files offer a more flexible solution.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)?\nDesign: Tunnel communications through a secure proxy\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy (CAPEC-466)",
      "ddmyn_mitigation_detection": "Design: Tunnel communications through a secure proxy",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Portable Executable Injection (T1055.002)?\nAnalyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Portable Executable Injection (T1055.002)",
      "ddmyn_mitigation_detection": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1568 (Dynamic Resolution)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1568 (Dynamic Resolution)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rootkit (T1014)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77) by using the strategy below?\nIf at all possible, use library calls rather than external processes to recreate the desired functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "ddmyn_mitigation_detection": "If at all possible, use library calls rather than external processes to recreate the desired functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Setuid and Setgid (T1548.001)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Setuid and Setgid (T1548.001)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Use of Path Manipulation Function without Maximum-sized Buffer (CWE-785)?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. Use a list of approved URLs or domains to be used for redirection.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Path Manipulation Function without Maximum-sized Buffer (CWE-785)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. Use a list of approved URLs or domains to be used for redirection.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1014 (Rootkit) by using the strategy below?\nDetecting any suspicious changes to files in a computer system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1014 (Rootkit)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1542.003 (Bootkit) by using the strategy below?\nUse secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1542.003 (Bootkit)",
      "ddmyn_mitigation_detection": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate File and Directory Discovery (T1083)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Discovery (T1083)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Credential API Hooking (T1056.004) by using the strategy below?\nRandomizing the base (start) address of one or more segments of memory during the initialization of a process.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential API Hooking (T1056.004)",
      "ddmyn_mitigation_detection": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Deobfuscate/Decode Files or Information (T1140) by using the strategy below?\nExecuting or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmyn_mitigation_detection": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)?\nSome instances of improper input validation can be detected using automated static analysis. A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present. Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "ASP.NET Misconfiguration: Missing Custom Error Page (CWE-12)",
      "ddmyn_mitigation_detection": "Some instances of improper input validation can be detected using automated static analysis. A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present. Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Bash History (T1552.003)?\nMake configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Expanding Control over the Operating System from the Database (CAPEC-470)?\nUsage: Do not use the DBMS machine for anything else other than the database\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Expanding Control over the Operating System from the Database (CAPEC-470)",
      "ddmyn_mitigation_detection": "Usage: Do not use the DBMS machine for anything else other than the database",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1585 (Establish Accounts)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1585 (Establish Accounts)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Proc Memory (T1055.009)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Proc Memory (T1055.009)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Unverified Ownership (CWE-283)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unverified Ownership (CWE-283)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Removal of Sensitive Information Before Storage or Transfer (CWE-212)?\nAvoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Removal of Sensitive Information Before Storage or Transfer (CWE-212)",
      "ddmyn_mitigation_detection": "Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Match Legitimate Name or Location (T1036.005)?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Launch Daemon (T1543.004)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Daemon (T1543.004)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-622 (Improper Validation of Function Hook Arguments) by using the strategy below?\nOnly free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-622 (Improper Validation of Function Hook Arguments)",
      "ddmyn_mitigation_detection": "Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Security Software Discovery (T1518.001)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect T1137.006 (Add-ins)?\nAnalyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1137.006 (Add-ins)",
      "ddmyn_mitigation_detection": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1574.011 (Services Registry Permissions Weakness) by using the strategy below?\nRestrict the ability to modify certain hives or keys in the Windows Registry.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1574.011 (Services Registry Permissions Weakness)",
      "ddmyn_mitigation_detection": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-91 (XML Injection (aka Blind XPath Injection))?\nCheck the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-91 (XML Injection (aka Blind XPath Injection))",
      "ddmyn_mitigation_detection": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Finite State Machines (FSMs) in Hardware Logic (CWE-1245)?\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Finite State Machines (FSMs) in Hardware Logic (CWE-1245)",
      "ddmyn_mitigation_detection": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nThe detection of an internal host relaying traffic between the internal network and the external network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Match Legitimate Name or Location (T1036.005)?\nProcess eviction techniques terminate or remove running process.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "Process eviction techniques terminate or remove running process.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect T1016 (System Network Configuration Discovery)?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, {{LinkById|T1059.008} commands may also be used to gather system and network information with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1016 (System Network Configuration Discovery)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, {{LinkById|T1059.008} commands may also be used to gather system and network information with built-in features native to the network device platform. Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Dead Drop Resolver (T1102.001)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dead Drop Resolver (T1102.001)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1033 (System Owner/User Discovery) by using the strategy below?\nConsider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Detection efforts may be focused on related behaviors, such as Web Protocols or Asymmetric Cryptography.(Citations: Splunk Kovar Certificates 2017)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1033 (System Owner/User Discovery)",
      "ddmyn_mitigation_detection": "Consider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Detection efforts may be focused on related behaviors, such as Web Protocols or Asymmetric Cryptography.(Citations: Splunk Kovar Certificates 2017)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Restriction of Rendered UI Layers or Frames (CWE-1021)?\nThe use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content. The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Restriction of Rendered UI Layers or Frames (CWE-1021)",
      "ddmyn_mitigation_detection": "The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content. The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-26 (Leveraging Race Conditions) by using the strategy below?\nAlthough less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-26 (Leveraging Race Conditions)",
      "ddmyn_mitigation_detection": "Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1025 (Data from Removable Media)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1025 (Data from Removable Media)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Privilege Escalation (T1068)?\nThe detection of an internal host relaying traffic between the internal network and the external network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmyn_mitigation_detection": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect SQL Stored Procedures (T1505.001)?\nOn a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "SQL Stored Procedures (T1505.001)",
      "ddmyn_mitigation_detection": "On a MSSQL Server, consider monitoring for xp_cmdshell usage. Consider enabling audit features that can log malicious startup activities.(Citations: NetSPI Startup Stored Procedures)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Fronting (T1090.004)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Fronting (T1090.004)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Web Services Protocol Manipulation (CAPEC-278) by using the strategy below?\nDesign: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Services Protocol Manipulation (CAPEC-278)",
      "ddmyn_mitigation_detection": "Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Web Services Protocol Manipulation (CAPEC-278) by using the strategy below?\nMonitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Services Protocol Manipulation (CAPEC-278)",
      "ddmyn_mitigation_detection": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Exposure of Information Through Directory Listing (CWE-548)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exposure of Information Through Directory Listing (CWE-548)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1562.009 (Safe Mode Boot)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1562.009 (Safe Mode Boot)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1568 (Dynamic Resolution)?\nBlocking DNS queries that are deceptively similar to legitimate domain names.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1568 (Dynamic Resolution)",
      "ddmyn_mitigation_detection": "Blocking DNS queries that are deceptively similar to legitimate domain names.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sharepoint (T1213.002)?\nDeploying a network resource for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sharepoint (T1213.002)",
      "ddmyn_mitigation_detection": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1555.005 (Password Managers)?\nSet and enforce secure password policies for accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1555.005 (Password Managers)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Use of Default Cryptographic Key (CWE-1394)?\nCarefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Default Cryptographic Key (CWE-1394)",
      "ddmyn_mitigation_detection": "Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Wordlist Scanning (T1595.003)?\nUse network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Wordlist Scanning (T1595.003)",
      "ddmyn_mitigation_detection": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Golden Ticket (T1558.001)?\nAn authentication token created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "An authentication token created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-522 (Insufficiently Protected Credentials)?\nMake any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-522 (Insufficiently Protected Credentials)",
      "ddmyn_mitigation_detection": "Make any static fields private and constant. A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Sudo and Sudo Caching (T1548.003)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Dylib Hijacking (T1574.004) by using the strategy below?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dylib Hijacking (T1574.004)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Windows Service (T1543.003)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Windows Service (T1543.003)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate AppInit DLLs (T1546.010) by using the strategy below?\nUsing a digital signature to authenticate a file before opening.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Disk Structure Wipe (T1561.002) by using the strategy below?\nTake and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Disk Structure Wipe (T1561.002)",
      "ddmyn_mitigation_detection": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Stored Data Manipulation (T1565.001) by using the strategy below?\nEmploying a pattern matching algorithm to statically analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Sudo and Sudo Caching (T1548.003) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Free of Memory not on the Heap (CWE-590)?\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Free of Memory not on the Heap (CWE-590)",
      "ddmyn_mitigation_detection": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, glibc in Linux provides protection against free of invalid pointers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Dynamic Resolution (T1568) by using the strategy below?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate DTD Injection (CAPEC-228) by using the strategy below?\nImplementation: Disallow the inclusion of DTDs as part of incoming messages.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "DTD Injection (CAPEC-228)",
      "ddmyn_mitigation_detection": "Implementation: Disallow the inclusion of DTDs as part of incoming messages.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Multi-Stage Channels (T1104)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Vulnerability Scanning (T1595.002)?\nMonitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Vulnerability Scanning (T1595.002)",
      "ddmyn_mitigation_detection": "Monitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Reflective Code Loading (T1620) by using the strategy below?\nRestricting network traffic originating from a private host or enclave destined towards untrusted networks.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflective Code Loading (T1620)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Email Forwarding Rule (T1114.003)?\nApplication Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmyn_mitigation_detection": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-25 (Path Traversal: '/../filedir')?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-25 (Path Traversal: '/../filedir')",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Insufficient Session Expiration (CWE-613) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Host Application Interface Scanner Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Forced Path Execution?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insufficient Session Expiration (CWE-613)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Host Application Interface Scanner Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Forced Path Execution",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate TCP Flood (CAPEC-482)?\nTo mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "TCP Flood (CAPEC-482)",
      "ddmyn_mitigation_detection": "To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cross Site Tracing (CAPEC-107)?\nPatch web browser against known security origin policy bypass exploits.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cross Site Tracing (CAPEC-107)",
      "ddmyn_mitigation_detection": "Patch web browser against known security origin policy bypass exploits.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exposure of Sensitive Information to an Unauthorized Actor (CWE-200) by using the strategy below?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exposure of Sensitive Information to an Unauthorized Actor (CWE-200)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Traffic Signaling (T1205)?\nDetermining which credentials may have been compromised by analyzing the user logon history of a particular system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Traffic Signaling (T1205)",
      "ddmyn_mitigation_detection": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LNK Icon Smuggling (T1027.012)?\nConfigure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LNK Icon Smuggling (T1027.012)",
      "ddmyn_mitigation_detection": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compiler Removal of Code to Clear Buffers (CWE-14)?\nBefore calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compiler Removal of Code to Clear Buffers (CWE-14)",
      "ddmyn_mitigation_detection": "Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Spearphishing Service (T1598.001)?\nTrain users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing Service (T1598.001)",
      "ddmyn_mitigation_detection": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1585.001 (Social Media Accounts)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1585.001 (Social Media Accounts)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-702 (Exploiting Incorrect Chaining or Granularity of Hardware Debug Components) by using the strategy below?\nConfirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-702 (Exploiting Incorrect Chaining or Granularity of Hardware Debug Components)",
      "ddmyn_mitigation_detection": "Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Accounts (T1078.002)?\nRestoring an entity's access to resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "Restoring an entity's access to resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate PubPrn (T1216.001) by using the strategy below?\nUse a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "PubPrn (T1216.001)",
      "ddmyn_mitigation_detection": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate File and Directory Discovery (T1083)?\nRequiring proof of two or more pieces of evidence in order to authenticate a user.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Discovery (T1083)",
      "ddmyn_mitigation_detection": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unix Shell Configuration Modification (T1546.004) by using the strategy below?\nA file created for the purposes of deceiving an adversary.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1570 (Lateral Tool Transfer)?\nUse a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1570 (Lateral Tool Transfer)",
      "ddmyn_mitigation_detection": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Web Protocols (T1071.001)?\nUse intrusion detection signatures to block traffic at network boundaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Protocols (T1071.001)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Deployment of Wrong Handler (CWE-430) by using the strategy below?\nStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deployment of Wrong Handler (CWE-430)",
      "ddmyn_mitigation_detection": "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Deobfuscate/Decode Files or Information (T1140) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate LSASS Memory (T1003.001)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Memory (T1003.001)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1559.002 (Dynamic Data Exchange)?\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1559.002 (Dynamic Data Exchange)",
      "ddmyn_mitigation_detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Golden Ticket (T1558.001) by using the strategy below?\nCollecting network communication protocol metadata and identifying statistical outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Insertion of Sensitive Information Into Debugging Code (CWE-215) by using the strategy below?\nCredential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insertion of Sensitive Information Into Debugging Code (CWE-215)",
      "ddmyn_mitigation_detection": "Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nUse an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of a One-Way Hash without a Salt (CWE-759)",
      "ddmyn_mitigation_detection": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Golden Ticket (T1558.001)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1574.010 (Services File Permissions Weakness)?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1574.010 (Services File Permissions Weakness)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Downgrade Attack (T1562.010) by using the strategy below?\nEmploying file hash comparisons to detect known malware.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Downgrade Attack (T1562.010)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Defense Evasion (T1211)?\nCollecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Use of Known Operating System Credentials (CAPEC-653) by using the strategy below?\nBad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "ddmyn_mitigation_detection": "Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Infected Software (CAPEC-442) by using the strategy below?\nAn organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Infected Software (CAPEC-442)",
      "ddmyn_mitigation_detection": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Developer Signing Maliciously Altered Software (CAPEC-673)?\nEnsure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Developer Signing Maliciously Altered Software (CAPEC-673)",
      "ddmyn_mitigation_detection": "Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unchecked Input for Loop Condition (CWE-606)?\nWhen the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unchecked Input for Loop Condition (CWE-606)",
      "ddmyn_mitigation_detection": "When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Multi-Factor Authentication Interception (T1111)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Factor Authentication Interception (T1111)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Web Service (T1102)?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1090.004 (Domain Fronting)?\nComparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1090.004 (Domain Fronting)",
      "ddmyn_mitigation_detection": "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Process Argument Spoofing (T1564.010)?\nCollect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Process Argument Spoofing (T1564.010)",
      "ddmyn_mitigation_detection": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.  Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.(Citations: Elastic Masquerade Ball, Twitter ItsReallyNick Masquerading Update, Docker Images)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Email Forwarding Rule (T1114.003) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Steal Application Access Token (T1528) by using the strategy below?\nA Credential created for the purpose of deceiving an adversary.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Application Access Token (T1528)",
      "ddmyn_mitigation_detection": "A Credential created for the purpose of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Spoofing of UDDI/ebXML Messages (CAPEC-218)?\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spoofing of UDDI/ebXML Messages (CAPEC-218)",
      "ddmyn_mitigation_detection": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1003.003 (NTDS)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1003.003 (NTDS)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Process Discovery (T1057)?\nBlocking the execution of files on a host in accordance with defined application policy rules.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Process Discovery (T1057)",
      "ddmyn_mitigation_detection": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Password Spraying (T1110.003) by using the strategy below?\nUse intrusion detection signatures to block traffic at network boundaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Password Spraying (T1110.003)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Email Collection (T1114)?\nUse remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Collection (T1114)",
      "ddmyn_mitigation_detection": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Data Transfer Size Limits (T1030) by using the strategy below?\nEmploying a pattern matching rule language to analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data Transfer Size Limits (T1030)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect HTTP Response Smuggling (CAPEC-273)?\nCredential prompts that appear illegitimate or unexpected.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "HTTP Response Smuggling (CAPEC-273)",
      "ddmyn_mitigation_detection": "Credential prompts that appear illegitimate or unexpected.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Cleartext Storage of Sensitive Information in a Cookie (CWE-315) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Cleartext Storage of Sensitive Information in a Cookie (CWE-315)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-266 (Incorrect Privilege Assignment)?\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-266 (Incorrect Privilege Assignment)",
      "ddmyn_mitigation_detection": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Golden Ticket (T1558.001)?\nDeleting a set of credentials permanently to prevent them from being used to authenticate.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1213.002 (Sharepoint) by using the strategy below?\nComparing client-server request and response payloads to a baseline profile to identify outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1213.002 (Sharepoint)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exfiltration Over C2 Channel (T1041) by using the strategy below?\nUse intrusion detection signatures to block traffic at network boundaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over C2 Channel (T1041)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)?\nPerform proper forward and reverse DNS lookups to detect DNS spoofing.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)",
      "ddmyn_mitigation_detection": "Perform proper forward and reverse DNS lookups to detect DNS spoofing.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Sudo and Sudo Caching (T1548.003) by using the strategy below?\nOn Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the <code>LOG_INPUT</code> and <code>LOG_OUTPUT</code> directives in the <code>/etc/sudoers</code> file.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the <code>LOG_INPUT</code> and <code>LOG_OUTPUT</code> directives in the <code>/etc/sudoers</code> file.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate SIP and Trust Provider Hijacking (T1553.003)?\nEmploying a pattern matching rule language to analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SIP and Trust Provider Hijacking (T1553.003)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-149 (Improper Neutralization of Quoting Syntax) by using the strategy below?\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-149 (Improper Neutralization of Quoting Syntax)",
      "ddmyn_mitigation_detection": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)?\nUse other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350)",
      "ddmyn_mitigation_detection": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Safe Mode Boot (T1562.009) by using the strategy below?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Safe Mode Boot (T1562.009)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate AppInit DLLs (T1546.010)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1033 (System Owner/User Discovery) by using the strategy below?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1033 (System Owner/User Discovery)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Web Shell (T1505.003) by using the strategy below?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Interaction with the Windows Registry may come from the command line using utilities such as Reg or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Web Shell (T1505.003)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Interaction with the Windows Registry may come from the command line using utilities such as Reg or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1565.002 (Transmitted Data Manipulation)?\nProtect sensitive information with strong encryption.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1565.002 (Transmitted Data Manipulation)",
      "ddmyn_mitigation_detection": "Protect sensitive information with strong encryption.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1010 (Application Window Discovery)?\nBlocking the execution of files on a host in accordance with defined application policy rules.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1010 (Application Window Discovery)",
      "ddmyn_mitigation_detection": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Cloud Groups (T1069.003)?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Activity and account logs for the cloud services can also be monitored for suspicious commands that are anomalous compared to a baseline of normal activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Cloud Groups (T1069.003)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Activity and account logs for the cloud services can also be monitored for suspicious commands that are anomalous compared to a baseline of normal activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Launch Daemon (T1543.004)?\nEncrypting a file using a cryptographic key.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Daemon (T1543.004)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Email Hiding Rules (T1564.008) by using the strategy below?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Hiding Rules (T1564.008)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Serialized Data Parameter Blowup (CAPEC-229)?\nMitigation may limit the number of configuration parameters per dataset.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Serialized Data Parameter Blowup (CAPEC-229)",
      "ddmyn_mitigation_detection": "Mitigation may limit the number of configuration parameters per dataset.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption) by using the strategy below?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-323 (Reusing a Nonce, Key Pair in Encryption)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Operator Precedence Logic Error (CWE-783) by using the strategy below?\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Operator Precedence Logic Error (CWE-783)",
      "ddmyn_mitigation_detection": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate HTML Smuggling (T1027.006)?\nUse signatures or heuristics to detect malicious software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "HTML Smuggling (T1027.006)",
      "ddmyn_mitigation_detection": "Use signatures or heuristics to detect malicious software.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Web Server Logs Tampering (CAPEC-81)?\nTurn off JavaScript, Flash and disable CSS.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Server Logs Tampering (CAPEC-81)",
      "ddmyn_mitigation_detection": "Turn off JavaScript, Flash and disable CSS.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Incorrect Regular Expression (CWE-185)?\nEnsure that proper authentication is included in the system design.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Regular Expression (CWE-185)",
      "ddmyn_mitigation_detection": "Ensure that proper authentication is included in the system design.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unprotected Primary Channel (CWE-419) by using the strategy below?\nTest the volatile-memory protections to ensure they are safe from modification or untrusted code.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unprotected Primary Channel (CWE-419)",
      "ddmyn_mitigation_detection": "Test the volatile-memory protections to ensure they are safe from modification or untrusted code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Upload Malware (T1608.001) by using the strategy below?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Upload Malware (T1608.001)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-643 (Improper Neutralization of Data within XPath Expressions ('XPath Injection'))?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-643 (Improper Neutralization of Data within XPath Expressions ('XPath Injection'))",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Windows Service (T1543.003)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Windows Service (T1543.003)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Dynamic Resolution (T1568)?\nMonitor for the deployment of suspicious or unknown container images and pods in your environment, particularly containers running as root. Additionally, monitor for unexpected usage of syscalls such as <code>mount</code> (as well as resulting process activity) that may indicate an attempt to escape from a privileged container to host. In Kubernetes, monitor for cluster-level events associated with changing containers' volume configurations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "Monitor for the deployment of suspicious or unknown container images and pods in your environment, particularly containers running as root. Additionally, monitor for unexpected usage of syscalls such as <code>mount</code> (as well as resulting process activity) that may indicate an attempt to escape from a privileged container to host. In Kubernetes, monitor for cluster-level events associated with changing containers' volume configurations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Use of Default Cryptographic Key (CWE-1394)?\nIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Default Cryptographic Key (CWE-1394)",
      "ddmyn_mitigation_detection": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exfiltration Over Alternative Protocol (T1048) by using the strategy below?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Dylib Hijacking (T1574.004)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dylib Hijacking (T1574.004)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Weak Password Requirements (CWE-521) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Weak Password Requirements (CWE-521)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Dynamic Resolution (T1568) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Session Credential Falsification through Forging (CAPEC-196)?\nEnsure the most recent version of a NoSQL database and it's corresponding API are used by the application.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Session Credential Falsification through Forging (CAPEC-196)",
      "ddmyn_mitigation_detection": "Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-570 (Expression is Always False)?\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-570 (Expression is Always False)",
      "ddmyn_mitigation_detection": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Inclusion of Undocumented Features or Chicken Bits (CWE-1242)?\nMicroarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inclusion of Undocumented Features or Chicken Bits (CWE-1242)",
      "ddmyn_mitigation_detection": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Scheduled Task (T1053.005)?\nMonitor process execution from the <code>svchost.exe</code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe</code> for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Monitor process execution from the <code>svchost.exe</code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe</code> for older versions of Windows.  If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.  Several events will then be logged on scheduled task activity, including:  * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.(Citations: Twitter Leoloobeek Scheduled Task, TechNet Forum Scheduled Task Operational Setting, TechNet Scheduled Task Events, Microsoft Scheduled Task Events Win10, TechNet Autoruns)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Kerberoasting (T1558.003)?\nEnable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).(Citations: Microsoft Detecting Kerberoasting Feb 2018, AdSecurity Cracking Kerberos Dec 2015)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Kerberoasting (T1558.003)",
      "ddmyn_mitigation_detection": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).(Citations: Microsoft Detecting Kerberoasting Feb 2018, AdSecurity Cracking Kerberos Dec 2015)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Forced Deadlock (CAPEC-25) by using the strategy below?\nUse known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Forced Deadlock (CAPEC-25)",
      "ddmyn_mitigation_detection": "Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Malicious File (T1204.002)?\nMonitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Malicious File (T1204.002)",
      "ddmyn_mitigation_detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Archive via Utility (T1560.001)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Archive via Utility (T1560.001)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Multi-hop Proxy (T1090.003)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Expanding Control over the Operating System from the Database (CAPEC-470) by using the strategy below?\nForceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Expanding Control over the Operating System from the Database (CAPEC-470)",
      "ddmyn_mitigation_detection": "Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Compiled HTML File (T1218.001)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compiled HTML File (T1218.001)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001) by using the strategy below?\nMonitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Commonly abused command arguments include <code>chmod +x</code>, <code>chmod -R 755</code>, and <code>chmod 777</code>. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.(Citations: 20 macOS Common Tools and Techniques)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Commonly abused command arguments include <code>chmod +x</code>, <code>chmod -R 755</code>, and <code>chmod 777</code>. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.(Citations: 20 macOS Common Tools and Techniques)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Direct Network Flood (T1498.001) by using the strategy below?\nRestricting a user account's access to resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Restricting a user account's access to resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Modify System Image (T1601)?\nMost embedded network devices provide a command to print the version of the currently running operating system. Use this command to query the operating system for its version number and compare it to what is expected for the device in question. Because this method may be used in conjunction with Patch System Image, it may be appropriate to also verify the integrity of the vendor provided operating system image file. Compare the checksum of the operating system file with the checksum of a known good copy from a trusted source. Some embedded network device platforms may have the capability to calculate the checksum of the file, while others may not. Even for those platforms that have the capability, it is recommended to download a copy of the file to a trusted computer to calculate the checksum with software that is not compromised.  Many vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory. If a compromise of the operating system is suspected, contact the vendor technical support and seek such services for a more thorough inspection of the current running system. (Citations: Cisco IOS Software Integrity Assurance - Image File Verification, Cisco IOS Software Integrity Assurance - Run-Time Memory Verification)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Modify System Image (T1601)",
      "ddmyn_mitigation_detection": "Most embedded network devices provide a command to print the version of the currently running operating system. Use this command to query the operating system for its version number and compare it to what is expected for the device in question. Because this method may be used in conjunction with Patch System Image, it may be appropriate to also verify the integrity of the vendor provided operating system image file. Compare the checksum of the operating system file with the checksum of a known good copy from a trusted source. Some embedded network device platforms may have the capability to calculate the checksum of the file, while others may not. Even for those platforms that have the capability, it is recommended to download a copy of the file to a trusted computer to calculate the checksum with software that is not compromised.  Many vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory. If a compromise of the operating system is suspected, contact the vendor technical support and seek such services for a more thorough inspection of the current running system. (Citations: Cisco IOS Software Integrity Assurance - Image File Verification, Cisco IOS Software Integrity Assurance - Run-Time Memory Verification)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Pass the Hash (T1550.002)?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Pass the Hash (T1550.002)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate AppInit DLLs (T1546.010) by using the strategy below?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Internal Proxy (T1090.001)?\nAnalyzing failed connections in a network to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-374 (Passing Mutable Objects to an Untrusted Method)?\nClone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-374 (Passing Mutable Objects to an Untrusted Method)",
      "ddmyn_mitigation_detection": "Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Inhibit System Recovery (T1490)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inhibit System Recovery (T1490)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Mavinject (T1218.013) by using the strategy below?\nRemove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Mavinject (T1218.013)",
      "ddmyn_mitigation_detection": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Observable Behavioral Discrepancy (CWE-205)?\nUse spyware detection and removal software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Behavioral Discrepancy (CWE-205)",
      "ddmyn_mitigation_detection": "Use spyware detection and removal software.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Internal Proxy (T1090.001)?\nControlling access to local computer system resources with kernel-level capabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Line Delimiters (CWE-144)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)?\nUse non-predictable inputs for seed generation.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Predictable Seed in Pseudo-Random Number Generator (PRNG) (CWE-337)",
      "ddmyn_mitigation_detection": "Use non-predictable inputs for seed generation.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rogue Domain Controller (T1207)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Non-Standard Port (T1571) by using the strategy below?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Multi-Factor Authentication Interception (T1111)?\nHardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Factor Authentication Interception (T1111)",
      "ddmyn_mitigation_detection": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate COR_PROFILER (T1574.012)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "COR_PROFILER (T1574.012)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-499 (Android Intent Intercept)?\nTo mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-499 (Android Intent Intercept)",
      "ddmyn_mitigation_detection": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Privilege Escalation (T1068) by using the strategy below?\nAnalyzing a call stack for return addresses which point to unexpected memory locations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmyn_mitigation_detection": "Analyzing a call stack for return addresses which point to unexpected memory locations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Comparing instead of Assigning (CWE-482) by using the strategy below?\nProgramming languages and supporting technologies might be chosen which are not subject to these issues.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Comparing instead of Assigning (CWE-482)",
      "ddmyn_mitigation_detection": "Programming languages and supporting technologies might be chosen which are not subject to these issues.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Rootkit (T1014) by using the strategy below?\nSoftware inventorying identifies and records the software items in the organization's architecture.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1014 (Rootkit)?\nComparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1014 (Rootkit)",
      "ddmyn_mitigation_detection": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Session Fixation (CAPEC-61)?\nAfter downloading open-source software, ensure integrity values have not changed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Session Fixation (CAPEC-61)",
      "ddmyn_mitigation_detection": "After downloading open-source software, ensure integrity values have not changed.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Security Software Discovery (T1518.001)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1207 (Rogue Domain Controller)?\nDetection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1207 (Rogue Domain Controller)",
      "ddmyn_mitigation_detection": "Detection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Make and Impersonate Token (T1134.003)?\nUse signatures or heuristics to detect malicious software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Make and Impersonate Token (T1134.003)",
      "ddmyn_mitigation_detection": "Use signatures or heuristics to detect malicious software.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1570 (Lateral Tool Transfer)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1570 (Lateral Tool Transfer)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Masquerade Task or Service (T1036.004)?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Masquerade Task or Service (T1036.004)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate TCP RPC Scan (CAPEC-307)?\nDisable MSSQL xp_cmdshell directive on the database\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "TCP RPC Scan (CAPEC-307)",
      "ddmyn_mitigation_detection": "Disable MSSQL xp_cmdshell directive on the database",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Incomplete Cleanup (CWE-459) by using the strategy below?\nTemporary files and other supporting resources should be deleted/released immediately after they are no longer needed.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incomplete Cleanup (CWE-459)",
      "ddmyn_mitigation_detection": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Processor Optimization Removal or Modification of Security-critical Code (CWE-1037)?\nIn theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Processor Optimization Removal or Modification of Security-critical Code (CWE-1037)",
      "ddmyn_mitigation_detection": "In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Group Policy Discovery (T1615)?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Group Policy Discovery (T1615)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Credential Stuffing (T1110.004) by using the strategy below?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential Stuffing (T1110.004)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Following of a Certificate's Chain of Trust (CWE-296)?\nEnsure that proper certificate checking is included in the system design.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Following of a Certificate's Chain of Trust (CWE-296)",
      "ddmyn_mitigation_detection": "Ensure that proper certificate checking is included in the system design.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nAvoid storing passwords in easily accessible locations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Line Delimiters (CWE-144)",
      "ddmyn_mitigation_detection": "Avoid storing passwords in easily accessible locations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Use of Default Credentials (CWE-1392)?\nIt can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmyn_mitigation_detection": "It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LNK Icon Smuggling (T1027.012)?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LNK Icon Smuggling (T1027.012)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1090.002 (External Proxy) by using the strategy below?\nAnalyzing spawn arguments or attributes of a process to detect processes that are unauthorized.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1090.002 (External Proxy)",
      "ddmyn_mitigation_detection": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Logon Script (Windows) (T1037.001) by using the strategy below?\nDetecting any suspicious changes to files in a computer system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate One-Way Communication (T1102.003) by using the strategy below?\nRestrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "One-Way Communication (T1102.003)",
      "ddmyn_mitigation_detection": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Try All Common Switches (CAPEC-133)?\nDesign: Minimize switch and option functionality to only that necessary for correct function of the command.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Try All Common Switches (CAPEC-133)",
      "ddmyn_mitigation_detection": "Design: Minimize switch and option functionality to only that necessary for correct function of the command.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Launch Agent (T1543.001)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Agent (T1543.001)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Services Registry Permissions Weakness (T1574.011)?\nUse a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Services Registry Permissions Weakness (T1574.011)",
      "ddmyn_mitigation_detection": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Race Condition for Write-Once Attributes (CWE-1223) by using the strategy below?\nDuring hardware design all register write-once or sticky fields must be evaluated for proper configuration.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Race Condition for Write-Once Attributes (CWE-1223)",
      "ddmyn_mitigation_detection": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Return of Wrong Status Code (CWE-393)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Return of Wrong Status Code (CWE-393)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Configuration Checker",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Portable Executable Injection (T1055.002)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Portable Executable Injection (T1055.002)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Access Control for Register Interface (CWE-1262)?\nDesign proper policies for hardware register access from software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Access Control for Register Interface (CWE-1262)",
      "ddmyn_mitigation_detection": "Design proper policies for hardware register access from software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Design for FPGA Maliciously Altered (CAPEC-674) by using the strategy below?\nHarden centralized repositories against attack.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Design for FPGA Maliciously Altered (CAPEC-674)",
      "ddmyn_mitigation_detection": "Harden centralized repositories against attack.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Owner/User Discovery (T1033)?\nRandomizing the base (start) address of one or more segments of memory during the initialization of a process.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Stored Data Manipulation (T1565.001)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Rogue Domain Controller (T1207) by using the strategy below?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Unchecked Error Condition (CWE-391)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Unchecked Error Condition (CWE-391)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner Web Services Scanner Database Scanners",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate COR_PROFILER (T1574.012) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "COR_PROFILER (T1574.012)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Generation of Weak Initialization Vector (IV) (CWE-1204) by using the strategy below?\nRegular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Generation of Weak Initialization Vector (IV) (CWE-1204)",
      "ddmyn_mitigation_detection": "Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Altered Installed BIOS (CAPEC-532) by using the strategy below?\nDeploy strong code integrity policies to allow only authorized apps to run.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmyn_mitigation_detection": "Deploy strong code integrity policies to allow only authorized apps to run.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-1275 (Sensitive Cookie with Improper SameSite Attribute)?\nSet the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1275 (Sensitive Cookie with Improper SameSite Attribute)",
      "ddmyn_mitigation_detection": "Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Export of Android Application Components (CWE-926)?\nIf you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmyn_mitigation_detection": "If you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Object Relational Mapping Injection (CAPEC-109) by using the strategy below?\nLeverage multi-factor authentication for all authentication services.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Object Relational Mapping Injection (CAPEC-109)",
      "ddmyn_mitigation_detection": "Leverage multi-factor authentication for all authentication services.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Steal Web Session Cookie (T1539)?\nExpiring an existing set of credentials and reissuing a new valid set\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Web Session Cookie (T1539)",
      "ddmyn_mitigation_detection": "Expiring an existing set of credentials and reissuing a new valid set",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Match Legitimate Name or Location (T1036.005)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Direct Network Flood (T1498.001)?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compromise Host Software Binary (T1554)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Host Software Binary (T1554)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Resource Injection (CAPEC-240) by using the strategy below?\nEnforce regular patching of software.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Resource Injection (CAPEC-240)",
      "ddmyn_mitigation_detection": "Enforce regular patching of software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Using Unicode Encoding to Bypass Validation Logic (CAPEC-71) by using the strategy below?\nImplementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Unicode Encoding to Bypass Validation Logic (CAPEC-71)",
      "ddmyn_mitigation_detection": "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Public cloneable() Method Without Final ('Object Hijack') (CWE-491) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Public cloneable() Method Without Final ('Object Hijack') (CWE-491)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1547.003 (Time Providers) by using the strategy below?\nAnalyzing the reputation of an identifier.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1547.003 (Time Providers)",
      "ddmyn_mitigation_detection": "Analyzing the reputation of an identifier.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-760 (Use of a One-Way Hash with a Predictable Salt) by using the strategy below?\nInvalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-760 (Use of a One-Way Hash with a Predictable Salt)",
      "ddmyn_mitigation_detection": "Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Multi-hop Proxy (T1090.003)?\nDetermining which credentials may have been compromised by analyzing the user logon history of a particular system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmyn_mitigation_detection": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1102.001 (Dead Drop Resolver)?\nUse intrusion detection signatures to block traffic at network boundaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1102.001 (Dead Drop Resolver)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784) by using the strategy below?\nAdd integrity checks to detect tampering.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784)",
      "ddmyn_mitigation_detection": "Add integrity checks to detect tampering.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Insufficiently Protected Credentials (CWE-522)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insufficiently Protected Credentials (CWE-522)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Bash History (T1552.003)?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate SIP and Trust Provider Hijacking (T1553.003)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SIP and Trust Provider Hijacking (T1553.003)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Port Knocking (T1205.001) by using the strategy below?\nRestoring an object for an entity to access. This is the broadest class for object restoral.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Knocking (T1205.001)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Collect Data from Clipboard (CAPEC-637)?\nLeverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Collect Data from Clipboard (CAPEC-637)",
      "ddmyn_mitigation_detection": "Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Process Discovery (T1057)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Process Discovery (T1057)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Socket Filters (T1205.002)?\nUse secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Socket Filters (T1205.002)",
      "ddmyn_mitigation_detection": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Outlook Home Page (T1137.004)?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Outlook Home Page (T1137.004)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Accounts (T1078.002)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Location Discovery (T1614)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Location Discovery (T1614)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-1190 (DMA Device Enabled Too Early in Boot Phase)?\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1190 (DMA Device Enabled Too Early in Boot Phase)",
      "ddmyn_mitigation_detection": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Defense Evasion (T1211) by using the strategy below?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-141 (Cache Poisoning) by using the strategy below?\nConfiguration: Disable client side caching.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-141 (Cache Poisoning)",
      "ddmyn_mitigation_detection": "Configuration: Disable client side caching.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-415 (Double Free) by using the strategy below?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-415 (Double Free)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-488 (Exposure of Data Element to Wrong Session) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-488 (Exposure of Data Element to Wrong Session)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Compare binary / bytecode to application permission manifest",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Services File Permissions Weakness (T1574.010) by using the strategy below?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Software (T1592.002)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Software (T1592.002)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Protection of Physical Side Channels (CWE-1300)?\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Protection of Physical Side Channels (CWE-1300)",
      "ddmyn_mitigation_detection": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-298 (UDP Ping)?\nConfigure your firewall to block egress ICMP messages.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-298 (UDP Ping)",
      "ddmyn_mitigation_detection": "Configure your firewall to block egress ICMP messages.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-494 (Download of Code Without Integrity Check)?\nDebugging information should not make its way into a production release.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-494 (Download of Code Without Integrity Check)",
      "ddmyn_mitigation_detection": "Debugging information should not make its way into a production release.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1218.003 (CMSTP) by using the strategy below?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1218.003 (CMSTP)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Predictable Value Range from Previous Values (CWE-343)?\nDo not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Predictable Value Range from Previous Values (CWE-343)",
      "ddmyn_mitigation_detection": "Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Sudo and Sudo Caching (T1548.003)?\nAnalyzing a Container Image with respect to a set of policies.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Analyzing a Container Image with respect to a set of policies.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Domains (T1583.001)?\nDomain registration information is, by design, captured in public registration logs. Consider use of services that may aid in tracking of newly acquired domains, such as WHOIS databases and/or passive DNS. In some cases it may be possible to pivot on known pieces of domain registration information to uncover other infrastructure purchased by the adversary. Consider monitoring for domains created with a similar structure to your own, including under a different TLD. Though various tools and services exist to track, query, and monitor domain name registration information, tracking across multiple DNS infrastructures can require multiple tools/services or more advanced analytics. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access and Command and Control.(Citations: ThreatConnect Infrastructure Dec 2020)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Domains (T1583.001)",
      "ddmyn_mitigation_detection": "Domain registration information is, by design, captured in public registration logs. Consider use of services that may aid in tracking of newly acquired domains, such as WHOIS databases and/or passive DNS. In some cases it may be possible to pivot on known pieces of domain registration information to uncover other infrastructure purchased by the adversary. Consider monitoring for domains created with a similar structure to your own, including under a different TLD. Though various tools and services exist to track, query, and monitor domain name registration information, tracking across multiple DNS infrastructures can require multiple tools/services or more advanced analytics. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access and Command and Control.(Citations: ThreatConnect Infrastructure Dec 2020)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exfiltration over USB (T1052.001)?\nLimiting access to computer input/output (IO) ports to restrict unauthorized devices.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration over USB (T1052.001)",
      "ddmyn_mitigation_detection": "Limiting access to computer input/output (IO) ports to restrict unauthorized devices.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Inclusion of Sensitive Information in Test Code (CWE-531)?\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inclusion of Sensitive Information in Test Code (CWE-531)",
      "ddmyn_mitigation_detection": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Direct Network Flood (T1498.001) by using the strategy below?\nAnalyzing inbound network session or connection attempt volume.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Analyzing inbound network session or connection attempt volume.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Accounts (T1078.002)?\nUsing biological measures in order to authenticate a user.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "Using biological measures in order to authenticate a user.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Symmetric Cryptography (T1573.001)?\nThe file removal technique deletes malicious artifacts or programs from a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1546.011 (Application Shimming)?\nPerform regular software updates to mitigate exploitation risk.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.011 (Application Shimming)",
      "ddmyn_mitigation_detection": "Perform regular software updates to mitigate exploitation risk.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Data Transfer Size Limits (T1030)?\nExecuting or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data Transfer Size Limits (T1030)",
      "ddmyn_mitigation_detection": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect T1114 (Email Collection)?\nThere are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection. File access of local system email files for Exfiltration, unusual processes connecting to an email server within a network, or unusual access patterns or authentication attempts on a public-facing webmail server may all be indicators of malicious activity. Monitor processes and command-line arguments for actions that could be taken to gather local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include <code>X-MS-Exchange-Organization-AutoForwarded</code> set to true, <code>X-MailFwdBy</code> and <code>X-Forwarded-To</code>. The <code>forwardingSMTPAddress</code> parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the <code>X-MS-Exchange-Organization-AutoForwarded</code> header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Microsoft Tim McMichael Exchange Mail Forwarding 2)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1114 (Email Collection)",
      "ddmyn_mitigation_detection": "There are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection. File access of local system email files for Exfiltration, unusual processes connecting to an email server within a network, or unusual access patterns or authentication attempts on a public-facing webmail server may all be indicators of malicious activity. Monitor processes and command-line arguments for actions that could be taken to gather local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include <code>X-MS-Exchange-Organization-AutoForwarded</code> set to true, <code>X-MailFwdBy</code> and <code>X-Forwarded-To</code>. The <code>forwardingSMTPAddress</code> parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox. High volumes of emails that bear the <code>X-MS-Exchange-Organization-AutoForwarded</code> header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.(Citations: Microsoft Tim McMichael Exchange Mail Forwarding 2)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LSASS Driver (T1547.008)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Steal Web Session Cookie (T1539) by using the strategy below?\nTrain users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Web Session Cookie (T1539)",
      "ddmyn_mitigation_detection": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1082 (System Information Discovery)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1082 (System Information Discovery)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Try All Common Switches (CAPEC-133)?\nImplementation: Remove all debug and testing options from production code.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Try All Common Switches (CAPEC-133)",
      "ddmyn_mitigation_detection": "Implementation: Remove all debug and testing options from production code.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1539 (Steal Web Session Cookie)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1539 (Steal Web Session Cookie)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Predictable Value Range from Previous Values (CWE-343)?\nNIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Predictable Value Range from Previous Values (CWE-343)",
      "ddmyn_mitigation_detection": "NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Weakening of Cellular Encryption (CAPEC-606) by using the strategy below?\nMonitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Weakening of Cellular Encryption (CAPEC-606)",
      "ddmyn_mitigation_detection": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Disable Windows Event Logging (T1562.002) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Disable Windows Event Logging (T1562.002)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Install Malicious Extension (CAPEC-698) by using the strategy below?\nConfirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Install Malicious Extension (CAPEC-698)",
      "ddmyn_mitigation_detection": "Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1213.002 (Sharepoint)?\nEmploying a pattern matching rule language to analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1213.002 (Sharepoint)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1562.002 (Disable Windows Event Logging)?\nRestoring an software configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1562.002 (Disable Windows Event Logging)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Golden Ticket (T1558.001) by using the strategy below?\nIssue a new credential to a user which supercedes their old credential.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Issue a new credential to a user which supercedes their old credential.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate COR_PROFILER (T1574.012)?\nThe file removal technique deletes malicious artifacts or programs from a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "COR_PROFILER (T1574.012)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Executable Installer File Permissions Weakness (T1574.005)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Executable Installer File Permissions Weakness (T1574.005)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1055.009 (Proc Memory)?\nMonitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.009 (Proc Memory)",
      "ddmyn_mitigation_detection": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Cloud Accounts (T1078.004)?\nOperational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Bash History (T1552.003) by using the strategy below?\nEmploying a pattern matching rule language to analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Disk Wipe (T1561) by using the strategy below?\nEstablish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Disk Wipe (T1561)",
      "ddmyn_mitigation_detection": "Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Owner/User Discovery (T1033) by using the strategy below?\nFile eviction techniques evict files from system storage.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Embedding NULL Bytes (CAPEC-52)?\nImplementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Embedding NULL Bytes (CAPEC-52)",
      "ddmyn_mitigation_detection": "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') (CWE-757)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') (CWE-757)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Domain Fronting (T1090.004)?\nMonitor processes for accesses to known archival libraries. This may yield a significant number of benign events, depending on how systems in the environment are typically used. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Domain Fronting (T1090.004)",
      "ddmyn_mitigation_detection": "Monitor processes for accesses to known archival libraries. This may yield a significant number of benign events, depending on how systems in the environment are typically used. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Cross-Domain Search Timing (CAPEC-462) by using the strategy below?\nAssess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cross-Domain Search Timing (CAPEC-462)",
      "ddmyn_mitigation_detection": "Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Brute Force (T1110)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Brute Force (T1110)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Application Layer Protocol (T1071) by using the strategy below?\nBlock execution of code on a system through application control, and/or script blocking.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Layer Protocol (T1071)",
      "ddmyn_mitigation_detection": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Service Discovery (T1007)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Service Discovery (T1007)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-566 (Authorization Bypass Through User-Controlled SQL Primary Key)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-566 (Authorization Bypass Through User-Controlled SQL Primary Key)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unprotected Windows Messaging Channel ('Shatter') (CWE-422) by using the strategy below?\nAlways verify and authenticate the source of the message.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unprotected Windows Messaging Channel ('Shatter') (CWE-422)",
      "ddmyn_mitigation_detection": "Always verify and authenticate the source of the message.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CMSTP (T1218.003)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CMSTP (T1218.003)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Traffic Signaling (T1205) by using the strategy below?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Traffic Signaling (T1205)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Owner/User Discovery (T1033) by using the strategy below?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Influence Perception of Reciprocation (CAPEC-418)?\nDesign: Do not rely on client validation or encoding for security purposes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Influence Perception of Reciprocation (CAPEC-418)",
      "ddmyn_mitigation_detection": "Design: Do not rely on client validation or encoding for security purposes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-787 (Out-of-bounds Write)?\nAnalyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-787 (Out-of-bounds Write)",
      "ddmyn_mitigation_detection": "Analyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1562.004 (Disable or Modify System Firewall) by using the strategy below?\nComparing client-server request and response payloads to a baseline profile to identify outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1562.004 (Disable or Modify System Firewall)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1036.006 (Space after Filename)?\nRestricting system configuration modifications to a specific user or group of users.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1036.006 (Space after Filename)",
      "ddmyn_mitigation_detection": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-1119 (Excessive Use of Unconditional Branching)?\nExploitation of a vulnerability with commonly-used manipulations might fail, but minor variations might succeed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-1119 (Excessive Use of Unconditional Branching)",
      "ddmyn_mitigation_detection": "Exploitation of a vulnerability with commonly-used manipulations might fail, but minor variations might succeed.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Application Window Discovery (T1010)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Window Discovery (T1010)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Internal Proxy (T1090.001)?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1090.002 (External Proxy)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1090.002 (External Proxy)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Lack of Administrator Control over Security (CWE-671) by using the strategy below?\nBreak up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lack of Administrator Control over Security (CWE-671)",
      "ddmyn_mitigation_detection": "Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Application Window Discovery (T1010)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Window Discovery (T1010)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect HTTP Response Smuggling (CAPEC-273)?\nDifferences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "HTTP Response Smuggling (CAPEC-273)",
      "ddmyn_mitigation_detection": "Differences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1033 (System Owner/User Discovery) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1033 (System Owner/User Discovery)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-500 (Public Static Field Not Marked Final) by using the strategy below?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-500 (Public Static Field Not Marked Final)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Process Discovery (T1057) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Process Discovery (T1057)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Downgrade Attack (T1562.010)?\nSystem vulnerability assessment relates all the vulnerabilities of a system's components in the context of their configuration and internal dependencies and can also include assessing risk emerging from the system's design as a whole, not just the sum of individual component vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Downgrade Attack (T1562.010)",
      "ddmyn_mitigation_detection": "System vulnerability assessment relates all the vulnerabilities of a system's components in the context of their configuration and internal dependencies and can also include assessing risk emerging from the system's design as a whole, not just the sum of individual component vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Insecure Security Identifier Mechanism (CWE-1294)?\nSecurity Identifier Decoders must be reviewed for design inconsistency and common weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Insecure Security Identifier Mechanism (CWE-1294)",
      "ddmyn_mitigation_detection": "Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Restriction of Names for Files and Other Resources (CWE-641)?\nPerform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Restriction of Names for Files and Other Resources (CWE-641)",
      "ddmyn_mitigation_detection": "Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Incorrect Behavior Order: Authorization Before Parsing and Canonicalization (CWE-551)?\nURL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization (CWE-551)",
      "ddmyn_mitigation_detection": "URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Filter Failure through Buffer Overflow (CAPEC-24)?\nUse endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Filter Failure through Buffer Overflow (CAPEC-24)",
      "ddmyn_mitigation_detection": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Restriction of Software Interfaces to Hardware Features (CWE-1256)?\nPerform a security evaluation of system-level architecture and design with software-aided physical attacks in scope.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Restriction of Software Interfaces to Hardware Features (CWE-1256)",
      "ddmyn_mitigation_detection": "Perform a security evaluation of system-level architecture and design with software-aided physical attacks in scope.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Dynamic Data Exchange (T1559.002) by using the strategy below?\nMonitor processes for abnormal behavior indicative of DDE abuse, such as Microsoft Office applications loading DLLs and other modules not typically associated with the application or these applications spawning unusual processes (such as cmd.exe). OLE, Office Open XML, CSV, and other files can be scanned for \u2018DDEAUTO', \u2018DDE\u2019, and other strings indicative of DDE execution.(Citations: NVisio Labs DDE Detection Oct 2017, OWASP CSV Injection, CSV Excel Macro Injection )?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Dynamic Data Exchange (T1559.002)",
      "ddmyn_mitigation_detection": "Monitor processes for abnormal behavior indicative of DDE abuse, such as Microsoft Office applications loading DLLs and other modules not typically associated with the application or these applications spawning unusual processes (such as cmd.exe). OLE, Office Open XML, CSV, and other files can be scanned for \u2018DDEAUTO', \u2018DDE\u2019, and other strings indicative of DDE execution.(Citations: NVisio Labs DDE Detection Oct 2017, OWASP CSV Injection, CSV Excel Macro Injection )",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Botnet (T1583.005)?\nConsider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Botnet (T1583.005)",
      "ddmyn_mitigation_detection": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate COR_PROFILER (T1574.012) by using the strategy below?\nSoftware inventorying identifies and records the software items in the organization's architecture.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "COR_PROFILER (T1574.012)",
      "ddmyn_mitigation_detection": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate File and Directory Discovery (T1083) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Discovery (T1083)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nThe file removal technique deletes malicious artifacts or programs from a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Match Legitimate Name or Location (T1036.005)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nIf the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmyn_mitigation_detection": "If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Web Service (T1102)?\nDetermining if a URL is benign or malicious by analyzing the URL or its components.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Determining if a URL is benign or malicious by analyzing the URL or its components.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Bidirectional Communication (T1102.002)?\nPrevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bidirectional Communication (T1102.002)",
      "ddmyn_mitigation_detection": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Process Doppelg\u00e4nging (T1055.013)?\nMonitor and analyze calls to <code>CreateTransaction</code>, <code>CreateFileTransacted</code>, <code>RollbackTransaction</code>, and other rarely used functions indicative of TxF activity. Process Doppelg\u00e4nging also invokes an outdated and undocumented implementation of the Windows process loader via calls to <code>NtCreateProcessEx</code> and <code>NtCreateThreadEx</code> as well as API calls used to modify memory within another process, such as <code>WriteProcessMemory</code>.   Scan file objects reported during the PsSetCreateProcessNotifyRoutine,  which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access.  Also consider comparing file objects loaded in memory to the corresponding file on disk.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: BlackHat Process Doppelg\u00e4nging Dec 2017, hasherezade Process Doppelg\u00e4nging Dec 2017, Microsoft PsSetCreateProcessNotifyRoutine routine, BlackHat Process Doppelg\u00e4nging Dec 2017, hasherezade Process Doppelg\u00e4nging Dec 2017)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Process Doppelg\u00e4nging (T1055.013)",
      "ddmyn_mitigation_detection": "Monitor and analyze calls to <code>CreateTransaction</code>, <code>CreateFileTransacted</code>, <code>RollbackTransaction</code>, and other rarely used functions indicative of TxF activity. Process Doppelg\u00e4nging also invokes an outdated and undocumented implementation of the Windows process loader via calls to <code>NtCreateProcessEx</code> and <code>NtCreateThreadEx</code> as well as API calls used to modify memory within another process, such as <code>WriteProcessMemory</code>.   Scan file objects reported during the PsSetCreateProcessNotifyRoutine,  which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access.  Also consider comparing file objects loaded in memory to the corresponding file on disk.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.(Citations: BlackHat Process Doppelg\u00e4nging Dec 2017, hasherezade Process Doppelg\u00e4nging Dec 2017, Microsoft PsSetCreateProcessNotifyRoutine routine, BlackHat Process Doppelg\u00e4nging Dec 2017, hasherezade Process Doppelg\u00e4nging Dec 2017)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate File and Directory Discovery (T1083) by using the strategy below?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Discovery (T1083)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Clear Linux or Mac System Logs (T1070.002) by using the strategy below?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Impair Command History Logging (T1562.003)?\nRestrict execution of code to a virtual environment on or in transit to an endpoint system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Impair Command History Logging (T1562.003)",
      "ddmyn_mitigation_detection": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Authorization Bypass Through User-Controlled Key (CWE-639)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Authorization Bypass Through User-Controlled Key (CWE-639)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Network Connections Discovery (T1049) by using the strategy below?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Network Connections Discovery (T1049)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Transmitted Data Manipulation (T1565.002)?\nSet and enforce secure password policies for accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Unchecked Return Value (CWE-252)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Unchecked Return Value (CWE-252)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CMSTP (T1218.003) by using the strategy below?\nUsing a digital signature to authenticate a file before opening.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CMSTP (T1218.003)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Ownership Management (CWE-282)?\nFollow the principle of least privilege when assigning access rights to entities in a software system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Ownership Management (CWE-282)",
      "ddmyn_mitigation_detection": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate LSASS Driver (T1547.008) by using the strategy below?\nIssue a new credential to a user which supercedes their old credential.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Issue a new credential to a user which supercedes their old credential.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Credentials in Registry (T1552.002)?\nRestricting system configuration modifications to a specific user or group of users.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credentials in Registry (T1552.002)",
      "ddmyn_mitigation_detection": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-784 (Reliance on Cookies without Validation and Integrity Checking in a Security Decision)?\nProtect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-784 (Reliance on Cookies without Validation and Integrity Checking in a Security Decision)",
      "ddmyn_mitigation_detection": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploiting Incorrect Chaining or Granularity of Hardware Debug Components (CAPEC-702) by using the strategy below?\nImplementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components (CAPEC-702)",
      "ddmyn_mitigation_detection": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LSASS Driver (T1547.008)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Forced Integer Overflow (CAPEC-92)?\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Forced Integer Overflow (CAPEC-92)",
      "ddmyn_mitigation_detection": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Bash History (T1552.003)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Email Hiding Rules (T1564.008)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Hiding Rules (T1564.008)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Neutralization of Invalid Characters in Identifiers in Web Pages (CWE-86)?\nSet sessions/credentials expiration date.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Invalid Characters in Identifiers in Web Pages (CWE-86)",
      "ddmyn_mitigation_detection": "Set sessions/credentials expiration date.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-197 (Exponential Data Expansion)?\nDesign: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-197 (Exponential Data Expansion)",
      "ddmyn_mitigation_detection": "Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-197 (Exponential Data Expansion)?\nAvoid emailing important documents and configurations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-197 (Exponential Data Expansion)",
      "ddmyn_mitigation_detection": "Avoid emailing important documents and configurations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reflection Amplification (T1498.002)?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Use of Uninitialized Variable (CWE-457) by using the strategy below?\nSpecify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Uninitialized Variable (CWE-457)",
      "ddmyn_mitigation_detection": "Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Proc Memory (T1055.009)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Proc Memory (T1055.009)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Port Monitors (T1547.010) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Monitors (T1547.010)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Time Providers (T1547.003) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Time Providers (T1547.003)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Use of Predictable Algorithm in Random Number Generator (CWE-1241) by using the strategy below?\nEnsure that access control policies for register access are implemented in accordance with the specified design.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Predictable Algorithm in Random Number Generator (CWE-1241)",
      "ddmyn_mitigation_detection": "Ensure that access control policies for register access are implemented in accordance with the specified design.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Non-Standard Port (T1571) by using the strategy below?\nEmploying a pattern matching rule language to analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Serializable Data Element Containing non-Serializable Item Elements (CWE-1070) by using the strategy below?\nUse an input validation framework such as Struts.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Serializable Data Element Containing non-Serializable Item Elements (CWE-1070)",
      "ddmyn_mitigation_detection": "Use an input validation framework such as Struts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Incorrect Regular Expression (CWE-185) by using the strategy below?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Regular Expression (CWE-185)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nThe client software should not install untrusted code from a non-authenticated server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Windows Admin Shares with Stolen Credentials (CAPEC-561)",
      "ddmyn_mitigation_detection": "The client software should not install untrusted code from a non-authenticated server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rogue Domain Controller (T1207)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate LSASS Memory (T1003.001)?\nInitiating a host's reboot sequence to terminate all running processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Memory (T1003.001)",
      "ddmyn_mitigation_detection": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Data from Removable Media (T1025)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data from Removable Media (T1025)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Client Execution (T1203) by using the strategy below?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Kerberoasting (T1558.003) by using the strategy below?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Kerberoasting (T1558.003)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Storage of File With Sensitive Data Under FTP Root (CWE-220) by using the strategy below?\nUse redundant operations or canaries to detect and respond to faults.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Storage of File With Sensitive Data Under FTP Root (CWE-220)",
      "ddmyn_mitigation_detection": "Use redundant operations or canaries to detect and respond to faults.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Security Software Discovery (T1518.001)?\nRestoring an software configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-31 (Accessing/Intercepting/Modifying HTTP Cookies)?\nDesign: Generate and validate MAC for cookies\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-31 (Accessing/Intercepting/Modifying HTTP Cookies)",
      "ddmyn_mitigation_detection": "Design: Generate and validate MAC for cookies",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Control Panel (T1218.002)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Control Panel (T1218.002)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Domain Accounts (T1078.002)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Control Panel (T1218.002)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Control Panel (T1218.002)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of a One-Way Hash without a Salt (CWE-759)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  }
]