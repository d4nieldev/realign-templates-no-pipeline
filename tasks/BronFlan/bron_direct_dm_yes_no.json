[
  {
    "instruction": "Can you mitigate Deployment of Wrong Handler (CWE-430) by using the strategy below?\nStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deployment of Wrong Handler (CWE-430)",
      "ddmyn_mitigation_detection": "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compromise Host Software Binary (T1554)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Host Software Binary (T1554)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1528 (Steal Application Access Token)?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1528 (Steal Application Access Token)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate AppInit DLLs (T1546.010)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Sudo and Sudo Caching (T1548.003) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Interception (CAPEC-117) by using the strategy below?\nLeverage encryption to encode the transmission of data thus making it accessible only to authorized parties.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Interception (CAPEC-117)",
      "ddmyn_mitigation_detection": "Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LNK Icon Smuggling (T1027.012)?\nConfigure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LNK Icon Smuggling (T1027.012)",
      "ddmyn_mitigation_detection": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1112 (Modify Registry)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1112 (Modify Registry)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Execution After Redirect (EAR) (CWE-698)?\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Execution After Redirect (EAR) (CWE-698)",
      "ddmyn_mitigation_detection": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Compromise Host Software Binary (T1554) by using the strategy below?\nImplement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Host Software Binary (T1554)",
      "ddmyn_mitigation_detection": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Information Discovery (T1082)?\nAn environment created for the purpose of attracting attackers and eliciting their behaviors that is not connected to any production enterprise systems.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "An environment created for the purpose of attracting attackers and eliciting their behaviors that is not connected to any production enterprise systems.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Time Providers (T1547.003) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Time Providers (T1547.003)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Data from Network Shared Drive (T1039)?\nDeploying a network resource for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data from Network Shared Drive (T1039)",
      "ddmyn_mitigation_detection": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Modify Registry (T1112)?\nRestoring the data in a database.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Modify Registry (T1112)",
      "ddmyn_mitigation_detection": "Restoring the data in a database.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Insufficient Logging (CWE-778) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insufficient Logging (CWE-778)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Remote Desktop Protocol (T1021.001) by using the strategy below?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Remote Desktop Protocol (T1021.001)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Install Digital Certificate (T1608.003)?\nConsider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Detection efforts may be focused on related behaviors, such as Web Protocols or Asymmetric Cryptography.(Citations: Splunk Kovar Certificates 2017)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Install Digital Certificate (T1608.003)",
      "ddmyn_mitigation_detection": "Consider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Detection efforts may be focused on related behaviors, such as Web Protocols or Asymmetric Cryptography.(Citations: Splunk Kovar Certificates 2017)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Internal Proxy (T1090.001) by using the strategy below?\nComparing client-server request and response payloads to a baseline profile to identify outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Altered Installed BIOS (CAPEC-532) by using the strategy below?\nDeploy strong code integrity policies to allow only authorized apps to run.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmyn_mitigation_detection": "Deploy strong code integrity policies to allow only authorized apps to run.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Lateral Tool Transfer (T1570)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Install Malicious Extension (CAPEC-698) by using the strategy below?\nConfirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Install Malicious Extension (CAPEC-698)",
      "ddmyn_mitigation_detection": "Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate LSASS Memory (T1003.001) by using the strategy below?\nControlling access to local computer system resources with kernel-level capabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Memory (T1003.001)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Handling of Missing Special Element (CWE-166) by using the strategy below?\nFollow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Handling of Missing Special Element (CWE-166)",
      "ddmyn_mitigation_detection": "Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Dynamic Resolution (T1568) by using the strategy below?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LSASS Driver (T1547.008)?\nProtect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Missing Write Protection for Parametric Data Values (CWE-1314)?\nRefactor the code so that internal program variables do not need to be dynamically identified.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Write Protection for Parametric Data Values (CWE-1314)",
      "ddmyn_mitigation_detection": "Refactor the code so that internal program variables do not need to be dynamically identified.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Signature Spoofing by Improper Validation (CAPEC-475)?\nDesign: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Signature Spoofing by Improper Validation (CAPEC-475)",
      "ddmyn_mitigation_detection": "Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Local Accounts (T1078.003)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Accounts (T1078.003)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Incorrect Type Conversion or Cast (CWE-704)?\nUse an abstraction library to abstract away risky APIs. This is not a complete solution.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Type Conversion or Cast (CWE-704)",
      "ddmyn_mitigation_detection": "Use an abstraction library to abstract away risky APIs. This is not a complete solution.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Insufficient Precision or Accuracy of a Real Number (CWE-1339)?\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Insufficient Precision or Accuracy of a Real Number (CWE-1339)",
      "ddmyn_mitigation_detection": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1552.002 (Credentials in Registry) by using the strategy below?\nRestricting network traffic originating from a private host or enclave destined towards untrusted networks.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1552.002 (Credentials in Registry)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from a private host or enclave destined towards untrusted networks.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Owner/User Discovery (T1033) by using the strategy below?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1207 (Rogue Domain Controller)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1207 (Rogue Domain Controller)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Out-of-bounds Write (CWE-787)?\nThis weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Out-of-bounds Write (CWE-787)",
      "ddmyn_mitigation_detection": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1055.009 (Proc Memory)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.009 (Proc Memory)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1546.004 (Unix Shell Configuration Modification) by using the strategy below?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.004 (Unix Shell Configuration Modification)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Finite State Machines (FSMs) in Hardware Logic (CWE-1245)?\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Finite State Machines (FSMs) in Hardware Logic (CWE-1245)",
      "ddmyn_mitigation_detection": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect T1585 (Establish Accounts)?\nMonitor for suspicious network traffic that could be indicative of probing for user information, such as large/iterative quantities of authentication requests originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1585 (Establish Accounts)",
      "ddmyn_mitigation_detection": "Monitor for suspicious network traffic that could be indicative of probing for user information, such as large/iterative quantities of authentication requests originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1095 (Non-Application Layer Protocol)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1095 (Non-Application Layer Protocol)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unix Shell Configuration Modification (T1546.004) by using the strategy below?\nRestoring an entity's access to resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "Restoring an entity's access to resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations (CWE-1252)?\nWhen using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations (CWE-1252)",
      "ddmyn_mitigation_detection": "When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Transmitted Data Manipulation (T1565.002) by using the strategy below?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Non-Application Layer Protocol (T1095)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-15 (Command Delimiters) by using the strategy below?\nDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-15 (Command Delimiters)",
      "ddmyn_mitigation_detection": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Memory Allocation with Excessive Size Value (CWE-789) by using the strategy below?\nFuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Memory Allocation with Excessive Size Value (CWE-789)",
      "ddmyn_mitigation_detection": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Cloud Groups (T1069.003) by using the strategy below?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with Domain Trust Discovery. Information may also be acquired through Windows system management tools such as PowerShell. The .NET method `GetAllTrustRelationships()` can be an indicator of Domain Trust Discovery.(Citations: Harmj0y Domain Trusts, Microsoft GetAllTrustRelationships)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Cloud Groups (T1069.003)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with Domain Trust Discovery. Information may also be acquired through Windows system management tools such as PowerShell. The .NET method `GetAllTrustRelationships()` can be an indicator of Domain Trust Discovery.(Citations: Harmj0y Domain Trusts, Microsoft GetAllTrustRelationships)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1033 (System Owner/User Discovery)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1033 (System Owner/User Discovery)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-117 (Improper Output Neutralization for Logs) by using the strategy below?\nCreate a strategy for presenting information, and plan for how to display unusual characters.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-117 (Improper Output Neutralization for Logs)",
      "ddmyn_mitigation_detection": "Create a strategy for presenting information, and plan for how to display unusual characters.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1498.001 (Direct Network Flood)?\nRestricting network traffic originating from any location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1498.001 (Direct Network Flood)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Determine Physical Locations (T1591.001)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Determine Physical Locations (T1591.001)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Use of Default Cryptographic Key (CWE-1394)?\nIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Default Cryptographic Key (CWE-1394)",
      "ddmyn_mitigation_detection": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Archive via Utility (T1560.001) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Archive via Utility (T1560.001)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Try All Common Switches (CAPEC-133)?\nDesign: Minimize switch and option functionality to only that necessary for correct function of the command.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Try All Common Switches (CAPEC-133)",
      "ddmyn_mitigation_detection": "Design: Minimize switch and option functionality to only that necessary for correct function of the command.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Credential Stuffing (CAPEC-600)?\nTraffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Credential Stuffing (CAPEC-600)",
      "ddmyn_mitigation_detection": "Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-461 (Web Services API Signature Forgery Leveraging Hash Function Extension Weakness)?\nStrong physical security of all devices that contain secret key information. (even when devices are not in use)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-461 (Web Services API Signature Forgery Leveraging Hash Function Extension Weakness)",
      "ddmyn_mitigation_detection": "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007)?\nAn application must make network resources available to a client commensurate with the client's access level.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007)",
      "ddmyn_mitigation_detection": "An application must make network resources available to a client commensurate with the client's access level.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect NoSQL Injection (CAPEC-676) by using the strategy below?\nToo many false or invalid queries to the database, especially those caused by malformed input.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "NoSQL Injection (CAPEC-676)",
      "ddmyn_mitigation_detection": "Too many false or invalid queries to the database, especially those caused by malformed input.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1134.002 (Create Process with Token)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1134.002 (Create Process with Token)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Credential API Hooking (T1056.004)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential API Hooking (T1056.004)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Data Transfer Size Limits (T1030)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data Transfer Size Limits (T1030)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1548.003 (Sudo and Sudo Caching) by using the strategy below?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1548.003 (Sudo and Sudo Caching)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Windows Hard Link (CWE-65)?\nRun time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Windows Hard Link (CWE-65)",
      "ddmyn_mitigation_detection": "Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Security Software Discovery (T1518.001)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect DNS Server (T1584.002)?\nConsider monitoring for anomalous resolution changes for domain addresses. Efforts may need to be tailored to specific domains of interest as benign resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "DNS Server (T1584.002)",
      "ddmyn_mitigation_detection": "Consider monitoring for anomalous resolution changes for domain addresses. Efforts may need to be tailored to specific domains of interest as benign resolution changes are a common occurrence on the internet. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Non-Standard Port (T1571) by using the strategy below?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Unchecked Return Value (CWE-252)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Unchecked Return Value (CWE-252)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Alternative Execution Due to Deceptive Filenames (CAPEC-635)?\nUtilize side-channel resistant implementations of all crypto algorithms.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Alternative Execution Due to Deceptive Filenames (CAPEC-635)",
      "ddmyn_mitigation_detection": "Utilize side-channel resistant implementations of all crypto algorithms.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Resource Shutdown or Release (CWE-404) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Resource Shutdown or Release (CWE-404)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Direct Volume Access (T1006)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Volume Access (T1006)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Security Software Footprinting (CAPEC-581)?\nDesign: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Footprinting (CAPEC-581)",
      "ddmyn_mitigation_detection": "Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nComparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Replication Through Removable Media (T1091)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Replication Through Removable Media (T1091)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Neutralization of Invalid Characters in Identifiers in Web Pages (CWE-86)?\nSet sessions/credentials expiration date.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Invalid Characters in Identifiers in Web Pages (CWE-86)",
      "ddmyn_mitigation_detection": "Set sessions/credentials expiration date.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Search Open Websites/Domains (T1593)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Search Open Websites/Domains (T1593)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate UNIX Symbolic Link (Symlink) Following (CWE-61)?\nAn application must, at all times, keep track of allocated resources and meter their usage appropriately.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "UNIX Symbolic Link (Symlink) Following (CWE-61)",
      "ddmyn_mitigation_detection": "An application must, at all times, keep track of allocated resources and meter their usage appropriately.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Developer Signing Maliciously Altered Software (CAPEC-673)?\nEnsure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Developer Signing Maliciously Altered Software (CAPEC-673)",
      "ddmyn_mitigation_detection": "Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Free of Memory not on the Heap (CWE-590) by using the strategy below?\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Free of Memory not on the Heap (CWE-590)",
      "ddmyn_mitigation_detection": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Buffer Access with Incorrect Length Value (CWE-805)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Buffer Access with Incorrect Length Value (CWE-805)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Web Application Scanner",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Safe Mode Boot (T1562.009)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Safe Mode Boot (T1562.009)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Security Software Discovery (T1518.001)?\nAnalyzing a Container Image with respect to a set of policies.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Analyzing a Container Image with respect to a set of policies.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption) by using the strategy below?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-323 (Reusing a Nonce, Key Pair in Encryption)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Reliance on a Single Factor in a Security Decision (CWE-654)?\nUse a tool that dynamically detects memory management problems, such as valgrind.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on a Single Factor in a Security Decision (CWE-654)",
      "ddmyn_mitigation_detection": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LSASS Memory (T1003.001)?\nRestricting network traffic originating from any location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Memory (T1003.001)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Spearphishing via Service (T1566.003)?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Domain Accounts (T1078.002)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1546.007 (Netsh Helper DLL)?\nControlling access to local computer system resources with kernel-level capabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.007 (Netsh Helper DLL)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate UNIX Symbolic Link (Symlink) Following (CWE-61)?\nSymbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "UNIX Symbolic Link (Symlink) Following (CWE-61)",
      "ddmyn_mitigation_detection": "Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Forced Integer Overflow (CAPEC-92)?\nUse a language or compiler that performs automatic bounds checking.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Forced Integer Overflow (CAPEC-92)",
      "ddmyn_mitigation_detection": "Use a language or compiler that performs automatic bounds checking.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-488 (Exposure of Data Element to Wrong Session) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-488 (Exposure of Data Element to Wrong Session)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1078.004 (Cloud Accounts)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1078.004 (Cloud Accounts)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Impair Command History Logging (T1562.003)?\nRestrict execution of code to a virtual environment on or in transit to an endpoint system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Impair Command History Logging (T1562.003)",
      "ddmyn_mitigation_detection": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1055.009 (Proc Memory)?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.009 (Proc Memory)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1546.011 (Application Shimming)?\nPerform regular software updates to mitigate exploitation risk.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.011 (Application Shimming)",
      "ddmyn_mitigation_detection": "Perform regular software updates to mitigate exploitation risk.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Use After Free (CWE-416)?\nWhen freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use After Free (CWE-416)",
      "ddmyn_mitigation_detection": "When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Relative Path Traversal (CWE-23)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Relative Path Traversal (CWE-23)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1565.002 (Transmitted Data Manipulation)?\nProtect sensitive information with strong encryption.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1565.002 (Transmitted Data Manipulation)",
      "ddmyn_mitigation_detection": "Protect sensitive information with strong encryption.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-144 (Improper Neutralization of Line Delimiters) by using the strategy below?\nBefore parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-144 (Improper Neutralization of Line Delimiters)",
      "ddmyn_mitigation_detection": "Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Defense Evasion (T1211)?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Fronting (T1090.004)?\nThe detection of an internal host relaying traffic between the internal network and the external network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Fronting (T1090.004)",
      "ddmyn_mitigation_detection": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Symmetric Cryptography (T1573.001)?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect RC Scripts (T1037.004)?\nMonitor for unexpected changes to RC scripts in the <code>/etc/</code> directory. Monitor process execution resulting from RC scripts for unusual or unknown applications or behavior. Monitor for <code>/etc/rc.local</code> file creation. Although types of RC scripts vary for each Unix-like distribution, several execute <code>/etc/rc.local</code> if present.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "RC Scripts (T1037.004)",
      "ddmyn_mitigation_detection": "Monitor for unexpected changes to RC scripts in the <code>/etc/</code> directory. Monitor process execution resulting from RC scripts for unusual or unknown applications or behavior. Monitor for <code>/etc/rc.local</code> file creation. Although types of RC scripts vary for each Unix-like distribution, several execute <code>/etc/rc.local</code> if present.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Non-Standard Port (T1571) by using the strategy below?\nEmploying a pattern matching rule language to analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Design Alteration (CAPEC-447)?\nEnsure to keep up to date with security relevant updates to the persistence framework used within your application.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Design Alteration (CAPEC-447)",
      "ddmyn_mitigation_detection": "Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Owner/User Discovery (T1033)?\nRestricting inter-domain trust by modifying domain configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Restricting inter-domain trust by modifying domain configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rootkit (T1014)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unprotected Windows Messaging Channel ('Shatter') (CWE-422) by using the strategy below?\nAlways verify and authenticate the source of the message.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unprotected Windows Messaging Channel ('Shatter') (CWE-422)",
      "ddmyn_mitigation_detection": "Always verify and authenticate the source of the message.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Content Spoofing (CAPEC-148)?\nStrong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Content Spoofing (CAPEC-148)",
      "ddmyn_mitigation_detection": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Domain Generation Algorithms (T1568.002)?\nUse intrusion detection signatures to block traffic at network boundaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Generation Algorithms (T1568.002)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Cloud Accounts (T1078.004)?\nOperational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Struts: Unvalidated Action Form (CWE-108)?\nMap every Action Form to a corresponding validation form. An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Struts: Unvalidated Action Form (CWE-108)",
      "ddmyn_mitigation_detection": "Map every Action Form to a corresponding validation form. An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploiting Incorrect Chaining or Granularity of Hardware Debug Components (CAPEC-702) by using the strategy below?\nImplementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components (CAPEC-702)",
      "ddmyn_mitigation_detection": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Double Free (CWE-415)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Double Free (CWE-415)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-93 (Log Injection-Tampering-Forging) by using the strategy below?\nUse synchronization to control the flow of execution.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-93 (Log Injection-Tampering-Forging)",
      "ddmyn_mitigation_detection": "Use synchronization to control the flow of execution.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Deserialization of Untrusted Data (CWE-502)?\nAcademic researchers have demonstrated that this weakness can be detected in hardware using software fuzzing tools that treat the underlying hardware as a black box ([REF-1406], [REF-1430])\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Deserialization of Untrusted Data (CWE-502)",
      "ddmyn_mitigation_detection": "Academic researchers have demonstrated that this weakness can be detected in hardware using software fuzzing tools that treat the underlying hardware as a black box ([REF-1406], [REF-1430])",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Dynamic Data Exchange (T1559.002) by using the strategy below?\nMonitor processes for abnormal behavior indicative of DDE abuse, such as Microsoft Office applications loading DLLs and other modules not typically associated with the application or these applications spawning unusual processes (such as cmd.exe). OLE, Office Open XML, CSV, and other files can be scanned for \u2018DDEAUTO', \u2018DDE\u2019, and other strings indicative of DDE execution.(Citations: NVisio Labs DDE Detection Oct 2017, OWASP CSV Injection, CSV Excel Macro Injection )?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Dynamic Data Exchange (T1559.002)",
      "ddmyn_mitigation_detection": "Monitor processes for abnormal behavior indicative of DDE abuse, such as Microsoft Office applications loading DLLs and other modules not typically associated with the application or these applications spawning unusual processes (such as cmd.exe). OLE, Office Open XML, CSV, and other files can be scanned for \u2018DDEAUTO', \u2018DDE\u2019, and other strings indicative of DDE execution.(Citations: NVisio Labs DDE Detection Oct 2017, OWASP CSV Injection, CSV Excel Macro Injection )",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Operation on Resource in Wrong Phase of Lifetime (CWE-666)?\nExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Operation on Resource in Wrong Phase of Lifetime (CWE-666)",
      "ddmyn_mitigation_detection": "Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Sudo and Sudo Caching (T1548.003) by using the strategy below?\nOn Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the <code>LOG_INPUT</code> and <code>LOG_OUTPUT</code> directives in the <code>/etc/sudoers</code> file.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the <code>LOG_INPUT</code> and <code>LOG_OUTPUT</code> directives in the <code>/etc/sudoers</code> file.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1218.003 (CMSTP)?\nAnalyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1218.003 (CMSTP)",
      "ddmyn_mitigation_detection": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Keylogging (T1056.001) by using the strategy below?\nAsset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Keylogging (T1056.001)",
      "ddmyn_mitigation_detection": "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-1300 (Improper Protection of Physical Side Channels)?\nAccess and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1300 (Improper Protection of Physical Side Channels)",
      "ddmyn_mitigation_detection": "Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1560.001 (Archive via Utility)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1560.001 (Archive via Utility)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Security Account Manager (T1003.002) by using the strategy below?\nHash dumpers open the Security Accounts Manager (SAM) on the local file system (<code>%SystemRoot%/system32/config/SAM</code>) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised Valid Accounts in-use by adversaries may help as well.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Security Account Manager (T1003.002)",
      "ddmyn_mitigation_detection": "Hash dumpers open the Security Accounts Manager (SAM) on the local file system (<code>%SystemRoot%/system32/config/SAM</code>) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised Valid Accounts in-use by adversaries may help as well.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1048.001 (Exfiltration Over Symmetric Encrypted Non-C2 Protocol)?\nExecuting or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1048.001 (Exfiltration Over Symmetric Encrypted Non-C2 Protocol)",
      "ddmyn_mitigation_detection": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain or Tenant Policy Modification (T1484)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain or Tenant Policy Modification (T1484)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-257 (Storing Passwords in a Recoverable Format)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-257 (Storing Passwords in a Recoverable Format)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Setuid and Setgid (T1548.001)?\nRestoring an software configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Setuid and Setgid (T1548.001)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Handling of Unexpected Data Type (CWE-241) by using the strategy below?\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Handling of Unexpected Data Type (CWE-241)",
      "ddmyn_mitigation_detection": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate AppInit DLLs (T1546.010)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Domain Fronting (T1090.004) by using the strategy below?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Fronting (T1090.004)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-25 (Path Traversal: '/../filedir')?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-25 (Path Traversal: '/../filedir')",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-41 (Using Meta-characters in E-mail Headers to Inject Malicious Payloads) by using the strategy below?\nOperational: Use OS-level preventative functionality. Not a complete solution.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-41 (Using Meta-characters in E-mail Headers to Inject Malicious Payloads)",
      "ddmyn_mitigation_detection": "Operational: Use OS-level preventative functionality. Not a complete solution.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1140 (Deobfuscate/Decode Files or Information)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1140 (Deobfuscate/Decode Files or Information)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Print Processors (T1547.012) by using the strategy below?\nUse intrusion detection signatures to block traffic at network boundaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Print Processors (T1547.012)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LSASS Memory (T1003.001)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Memory (T1003.001)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Incorrect Bitwise Shift of Integer (CWE-1335) by using the strategy below?\nEnsure that all arguments are verified, as defined by the API you are protecting.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Bitwise Shift of Integer (CWE-1335)",
      "ddmyn_mitigation_detection": "Ensure that all arguments are verified, as defined by the API you are protecting.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Multi-Factor Authentication Request Generation (T1621)?\nMonitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Multi-Factor Authentication Request Generation (T1621)",
      "ddmyn_mitigation_detection": "Monitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate External Proxy (T1090.002) by using the strategy below?\nExecuting or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "External Proxy (T1090.002)",
      "ddmyn_mitigation_detection": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Malicious File (T1204.002)?\nBlock execution of code on a system through application control, and/or script blocking.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Malicious File (T1204.002)",
      "ddmyn_mitigation_detection": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nThe client software should not install untrusted code from a non-authenticated server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Windows Admin Shares with Stolen Credentials (CAPEC-561)",
      "ddmyn_mitigation_detection": "The client software should not install untrusted code from a non-authenticated server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1205.001 (Port Knocking)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1205.001 (Port Knocking)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate LSASS Driver (T1547.008)?\nEmploying a pattern matching rule language to analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Active Setup (T1547.014)?\nMonitor Registry key additions and/or modifications to <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code>. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the Active Setup Registry locations and startup folders. Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.(Citations: TechNet Autoruns)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Active Setup (T1547.014)",
      "ddmyn_mitigation_detection": "Monitor Registry key additions and/or modifications to <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code>. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the Active Setup Registry locations and startup folders. Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.(Citations: TechNet Autoruns)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-706 (Use of Incorrectly-Resolved Name or Reference)?\nAutomated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-706 (Use of Incorrectly-Resolved Name or Reference)",
      "ddmyn_mitigation_detection": "Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate AppInit DLLs (T1546.010)?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-73 (User-Controlled Filename)?\nEnsure all content that is delivered to client is sanitized against an acceptable content specification.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-73 (User-Controlled Filename)",
      "ddmyn_mitigation_detection": "Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Sudo and Sudo Caching (T1548.003) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Internal Proxy (T1090.001) by using the strategy below?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Services File Permissions Weakness (T1574.010)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Match Legitimate Name or Location (T1036.005)?\nAnalyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Trusted Relationship (T1199)?\nAnalyzing failed connections in a network to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Trusted Relationship (T1199)",
      "ddmyn_mitigation_detection": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Delete Cloud Instance (T1578.003) by using the strategy below?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Delete Cloud Instance (T1578.003)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1102.001 (Dead Drop Resolver)?\nUse intrusion detection signatures to block traffic at network boundaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1102.001 (Dead Drop Resolver)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Thread Local Storage (T1055.005)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Thread Local Storage (T1055.005)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Validation of Syntactic Correctness of Input (CWE-1286)?\nInsert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Validation of Syntactic Correctness of Input (CWE-1286)",
      "ddmyn_mitigation_detection": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Logon Script (Windows) (T1037.001)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1588.001 (Malware) by using the strategy below?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1588.001 (Malware)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1518.001 (Security Software Discovery) by using the strategy below?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1518.001 (Security Software Discovery)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Non-Standard Port (T1571)?\nDeploying a network resource for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1498.002 (Reflection Amplification)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1498.002 (Reflection Amplification)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Information Discovery (T1082)?\nEmploying a pattern matching rule language to analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Component Firmware (T1542.002) by using the strategy below?\nData and telemetry from use of device drivers (i.e. processes and API calls) and/or provided by SMART (Self-Monitoring, Analysis and Reporting Technology) disk monitoring may reveal malicious manipulations of components. Otherwise, this technique may be difficult to detect since malicious activity is taking place on system components possibly outside the purview of OS security and integrity mechanisms. Disk check and forensic utilities may reveal indicators of malicious firmware such as strings, unexpected disk partition table entries, or blocks of otherwise unusual memory that warrant deeper investigation. Also consider comparing components, including hashes of component firmware and behavior, against known good images.(Citations: SanDisk SMART, SmartMontools, ITWorld Hard Disk Health Dec 2014)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Component Firmware (T1542.002)",
      "ddmyn_mitigation_detection": "Data and telemetry from use of device drivers (i.e. processes and API calls) and/or provided by SMART (Self-Monitoring, Analysis and Reporting Technology) disk monitoring may reveal malicious manipulations of components. Otherwise, this technique may be difficult to detect since malicious activity is taking place on system components possibly outside the purview of OS security and integrity mechanisms. Disk check and forensic utilities may reveal indicators of malicious firmware such as strings, unexpected disk partition table entries, or blocks of otherwise unusual memory that warrant deeper investigation. Also consider comparing components, including hashes of component firmware and behavior, against known good images.(Citations: SanDisk SMART, SmartMontools, ITWorld Hard Disk Health Dec 2014)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Service Discovery (T1007)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Service Discovery (T1007)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compiler Removal of Code to Clear Buffers (CWE-14)?\nFor security-sensitive assets accessible over debug/test interfaces, only allow trusted agents.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compiler Removal of Code to Clear Buffers (CWE-14)",
      "ddmyn_mitigation_detection": "For security-sensitive assets accessible over debug/test interfaces, only allow trusted agents.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Golden Ticket (T1558.001)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1539 (Steal Web Session Cookie)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1539 (Steal Web Session Cookie)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Kerberoasting (T1558.003)?\nEnable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).(Citations: Microsoft Detecting Kerberoasting Feb 2018, AdSecurity Cracking Kerberos Dec 2015)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Kerberoasting (T1558.003)",
      "ddmyn_mitigation_detection": "Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).(Citations: Microsoft Detecting Kerberoasting Feb 2018, AdSecurity Cracking Kerberos Dec 2015)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-215 (Insertion of Sensitive Information Into Debugging Code)?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-215 (Insertion of Sensitive Information Into Debugging Code)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Authorization Bypass Through User-Controlled Key (CWE-639)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Authorization Bypass Through User-Controlled Key (CWE-639)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Exposure of Sensitive System Information to an Unauthorized Control Sphere (CWE-497) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exposure of Sensitive System Information to an Unauthorized Control Sphere (CWE-497)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reliance on a Single Factor in a Security Decision (CWE-654)?\nOnce found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on a Single Factor in a Security Decision (CWE-654)",
      "ddmyn_mitigation_detection": "Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Key Exchange without Entity Authentication (CWE-322) by using the strategy below?\nEnsure that proper certificate checking is included in the system design.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Key Exchange without Entity Authentication (CWE-322)",
      "ddmyn_mitigation_detection": "Ensure that proper certificate checking is included in the system design.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Hide Artifacts (T1564)?\nBlock users or groups from installing unapproved software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Hide Artifacts (T1564)",
      "ddmyn_mitigation_detection": "Block users or groups from installing unapproved software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Netsh Helper DLL (T1546.007)?\nInitiating a host's shutdown sequence to terminate all running processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmyn_mitigation_detection": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-293 (Using Referer Field for Authentication)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-293 (Using Referer Field for Authentication)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1037 (Boot or Logon Initialization Scripts)?\nPrevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1037 (Boot or Logon Initialization Scripts)",
      "ddmyn_mitigation_detection": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Export of Android Application Components (CWE-926)?\nIf you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Export of Android Application Components (CWE-926)",
      "ddmyn_mitigation_detection": "If you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1528 (Steal Application Access Token) by using the strategy below?\nUsing a digital signature to authenticate a file before opening.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1528 (Steal Application Access Token)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Local Data Staging (T1074.001) by using the strategy below?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Data Staging (T1074.001)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate AppInit DLLs (T1546.010)?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Serialized Data with Nested Payloads (CAPEC-230)?\nCarefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Serialized Data with Nested Payloads (CAPEC-230)",
      "ddmyn_mitigation_detection": "Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001) by using the strategy below?\nCollecting network communication protocol metadata and identifying statistical outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99) by using the strategy below?\nSet the lock bit. Attempt to modify the information protected by the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmyn_mitigation_detection": "Set the lock bit. Attempt to modify the information protected by the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1083 (File and Directory Discovery)?\nEmulating instructions in a file looking for specific patterns.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1083 (File and Directory Discovery)",
      "ddmyn_mitigation_detection": "Emulating instructions in a file looking for specific patterns.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Brute Force (T1110)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Brute Force (T1110)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1200 (Hardware Additions)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1200 (Hardware Additions)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1218.005 (Mshta) by using the strategy below?\nMonitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1218.005 (Mshta)",
      "ddmyn_mitigation_detection": "Monitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. Monitor for any influxes or abnormal increases in DCOM related Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic (typically over port 135).(Citations: Enigma Outlook DCOM Lateral Movement Nov 2017, Fireeye Hunting COM June 2019, Enigma MMC20 COM Jan 2017)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Dylib Hijacking (T1574.004) by using the strategy below?\nOperational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dylib Hijacking (T1574.004)",
      "ddmyn_mitigation_detection": "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1137.004 (Outlook Home Page) by using the strategy below?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1137.004 (Outlook Home Page)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate PubPrn (T1216.001) by using the strategy below?\nUse a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "PubPrn (T1216.001)",
      "ddmyn_mitigation_detection": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Credential Stuffing (T1110.004) by using the strategy below?\nRestoring the data in a database.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential Stuffing (T1110.004)",
      "ddmyn_mitigation_detection": "Restoring the data in a database.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Local Data Staging (T1074.001)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Data Staging (T1074.001)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Direct Network Flood (T1498.001) by using the strategy below?\nRestricting a user account's access to resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Restricting a user account's access to resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1546.010 (AppInit DLLs)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.010 (AppInit DLLs)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1090.002 (External Proxy) by using the strategy below?\nComparing client-server request and response payloads to a baseline profile to identify outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1090.002 (External Proxy)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Compromise Software Dependencies and Development Tools (T1195.001)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Scheduled Task (T1053.005) by using the strategy below?\nAnalyzing spawn arguments or attributes of a process to detect processes that are unauthorized.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate VBA Stomping (T1564.007)?\nRemove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "VBA Stomping (T1564.007)",
      "ddmyn_mitigation_detection": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Defense Evasion (T1211) by using the strategy below?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Expression is Always False (CWE-570)?\nUse Static Analysis tools to spot such conditions.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Expression is Always False (CWE-570)",
      "ddmyn_mitigation_detection": "Use Static Analysis tools to spot such conditions.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Validation of Syntactic Correctness of Input (CWE-1286) by using the strategy below?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Validation of Syntactic Correctness of Input (CWE-1286)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Spearphishing via Service (T1566.003)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Insufficiently Protected Credentials (CWE-522) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insufficiently Protected Credentials (CWE-522)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Dynamic Resolution (T1568)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1003.001 (LSASS Memory)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1003.001 (LSASS Memory)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-73 (User-Controlled Filename)?\nImplementation: Perform output validation for all remote content.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-73 (User-Controlled Filename)",
      "ddmyn_mitigation_detection": "Implementation: Perform output validation for all remote content.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate DNS/Passive DNS (T1596.001)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "DNS/Passive DNS (T1596.001)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate XSS Targeting HTML Attributes (CAPEC-243)?\nImplementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "XSS Targeting HTML Attributes (CAPEC-243)",
      "ddmyn_mitigation_detection": "Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Owner/User Discovery (T1033)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Security Account Manager (T1003.002) by using the strategy below?\nUse process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Security Account Manager (T1003.002)",
      "ddmyn_mitigation_detection": "Use process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate LSASS Driver (T1547.008)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Direct Network Flood (T1498.001) by using the strategy below?\nAnalyzing inbound network session or connection attempt volume.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Direct Network Flood (T1498.001)",
      "ddmyn_mitigation_detection": "Analyzing inbound network session or connection attempt volume.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Reflection Amplification (T1498.002)?\nEncrypting a file using a cryptographic key.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1592.003 (Firmware)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1592.003 (Firmware)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Neutralization of Special Elements in Data Query Logic (CWE-943) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Neutralization of Special Elements in Data Query Logic (CWE-943)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Delete Cloud Instance (T1578.003)?\nThe deletion of a new instance or virtual machine is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, detecting a sequence of events such as the creation of an instance, mounting of a snapshot to that instance, and deletion of that instance by a new user account may indicate suspicious activity. In AWS, CloudTrail logs capture the deletion of an instance in the <code>TerminateInstances</code> event, and in Azure the deletion of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances delete</code> to delete a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Delete Cloud Instance (T1578.003)",
      "ddmyn_mitigation_detection": "The deletion of a new instance or virtual machine is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, detecting a sequence of events such as the creation of an instance, mounting of a snapshot to that instance, and deletion of that instance by a new user account may indicate suspicious activity. In AWS, CloudTrail logs capture the deletion of an instance in the <code>TerminateInstances</code> event, and in Azure the deletion of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances delete</code> to delete a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Use of Predictable Algorithm in Random Number Generator (CWE-1241)?\nA true random number generator should be specified for cryptographic algorithms.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Predictable Algorithm in Random Number Generator (CWE-1241)",
      "ddmyn_mitigation_detection": "A true random number generator should be specified for cryptographic algorithms.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cross-Site Request Forgery (CSRF) (CWE-352)?\nEnsure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "ddmyn_mitigation_detection": "Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784) by using the strategy below?\nAdd integrity checks to detect tampering.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision (CWE-784)",
      "ddmyn_mitigation_detection": "Add integrity checks to detect tampering.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Servlet Runtime Error Message Containing Sensitive Information (CWE-536) by using the strategy below?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Servlet Runtime Error Message Containing Sensitive Information (CWE-536)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Outlook Forms (T1137.003)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Outlook Forms (T1137.003)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Keylogging (T1056.001)?\nOperating system level mechanisms to prevent abusive input device exploitation.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Keylogging (T1056.001)",
      "ddmyn_mitigation_detection": "Operating system level mechanisms to prevent abusive input device exploitation.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Dynamic Resolution (T1568)?\nExpiring an existing set of credentials and reissuing a new valid set\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "Expiring an existing set of credentials and reissuing a new valid set",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Missing Release of Memory after Effective Lifetime (CWE-401)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Missing Release of Memory after Effective Lifetime (CWE-401)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-1325 (Improperly Controlled Sequential Memory Allocation)?\nUse a tool that dynamically detects memory management problems, such as valgrind.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1325 (Improperly Controlled Sequential Memory Allocation)",
      "ddmyn_mitigation_detection": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Golden Ticket (T1558.001)?\nDeleting a set of credentials permanently to prevent them from being used to authenticate.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Neutralization of Line Delimiters (CWE-144)?\nDevelopers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Line Delimiters (CWE-144)",
      "ddmyn_mitigation_detection": "Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-415 (Double Free) by using the strategy below?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-415 (Double Free)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Web Service (T1102)?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Lateral Tool Transfer (T1570)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate iFrame Overlay (CAPEC-222)?\nOperation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "iFrame Overlay (CAPEC-222)",
      "ddmyn_mitigation_detection": "Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Cleartext Storage of Sensitive Information in a Cookie (CWE-315) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Cleartext Storage of Sensitive Information in a Cookie (CWE-315)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Source code Weakness Analyzer Context-configured Source Code Weakness Analyzer",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Steal Web Session Cookie (T1539) by using the strategy below?\nTrain users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Web Session Cookie (T1539)",
      "ddmyn_mitigation_detection": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Port Monitors (T1547.010) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Monitors (T1547.010)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Rootkit (T1014)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1055.002 (Portable Executable Injection)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.002 (Portable Executable Injection)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Return of Wrong Status Code (CWE-393)?\nFuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Return of Wrong Status Code (CWE-393)",
      "ddmyn_mitigation_detection": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Permissive List of Allowed Inputs (CWE-183)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive List of Allowed Inputs (CWE-183)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1114 (Email Collection)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1114 (Email Collection)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Services File Permissions Weakness (T1574.010)?\nReplacing old software on a computer system component.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmyn_mitigation_detection": "Replacing old software on a computer system component.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Malicious File (T1204.002)?\nTrain users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Malicious File (T1204.002)",
      "ddmyn_mitigation_detection": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Poison Web Service Registry (CAPEC-51)?\nDesign: Enforce principle of least privilege\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Poison Web Service Registry (CAPEC-51)",
      "ddmyn_mitigation_detection": "Design: Enforce principle of least privilege",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Targeted Malware (CAPEC-542)?\nData is being transferred and/or removed from systems/applications within the network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Targeted Malware (CAPEC-542)",
      "ddmyn_mitigation_detection": "Data is being transferred and/or removed from systems/applications within the network.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') (CWE-757)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') (CWE-757)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Escaping Virtualization (CAPEC-480)?\nBe mindful of your surroundings when discussing or viewing sensitive information in public areas.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Escaping Virtualization (CAPEC-480)",
      "ddmyn_mitigation_detection": "Be mindful of your surroundings when discussing or viewing sensitive information in public areas.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1037.001 (Logon Script (Windows)) by using the strategy below?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Setuid and Setgid (T1548.001)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Setuid and Setgid (T1548.001)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Handling of Unexpected Data Type (CWE-241)?\nSystem software can mitigate this weakness by invoking predictor-state-sanitizing operations (for example, the indirect branch prediction barrier on Intel x86) when switching from one context to another, according to the hardware vendor's recommendations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Handling of Unexpected Data Type (CWE-241)",
      "ddmyn_mitigation_detection": "System software can mitigate this weakness by invoking predictor-state-sanitizing operations (for example, the indirect branch prediction barrier on Intel x86) when switching from one context to another, according to the hardware vendor's recommendations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Missing Support for Security Features in On-chip Fabrics or Buses (CWE-1318) by using the strategy below?\nReview the fabric specification and ensure that it contains signals to transfer security-sensitive signals.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Missing Support for Security Features in On-chip Fabrics or Buses (CWE-1318)",
      "ddmyn_mitigation_detection": "Review the fabric specification and ensure that it contains signals to transfer security-sensitive signals.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unprotected Primary Channel (CWE-419) by using the strategy below?\nTest the volatile-memory protections to ensure they are safe from modification or untrusted code.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unprotected Primary Channel (CWE-419)",
      "ddmyn_mitigation_detection": "Test the volatile-memory protections to ensure they are safe from modification or untrusted code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Incomplete Cleanup (CWE-459) by using the strategy below?\nUnwanted connections to the configured server may be denied through a firewall or other packet filtering measures.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incomplete Cleanup (CWE-459)",
      "ddmyn_mitigation_detection": "Unwanted connections to the configured server may be denied through a firewall or other packet filtering measures.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate XSS Targeting Non-Script Elements (CAPEC-18)?\nAll output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "XSS Targeting Non-Script Elements (CAPEC-18)",
      "ddmyn_mitigation_detection": "All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Group Policy Preferences (T1552.006) by using the strategy below?\nRestoring an object for an entity to access. This is the broadest class for object restoral.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Group Policy Preferences (T1552.006)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Observable Behavioral Discrepancy (CWE-205)?\nFully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Behavioral Discrepancy (CWE-205)",
      "ddmyn_mitigation_detection": "Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Free of Memory not on the Heap (CWE-590)?\nBefore freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Free of Memory not on the Heap (CWE-590)",
      "ddmyn_mitigation_detection": "Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Double Free (CWE-415)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Double Free (CWE-415)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nUse an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of a One-Way Hash without a Salt (CWE-759)",
      "ddmyn_mitigation_detection": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Create Process with Token (T1134.002)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Create Process with Token (T1134.002)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Netsh Helper DLL (T1546.007)?\nRestricting network traffic originating from any location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Netsh Helper DLL (T1546.007)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Multi-Stage Channels (T1104)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Resource Shutdown or Release (CWE-404)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Resource Shutdown or Release (CWE-404)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-643 (Identify Shared Files/Directories on System)?\nPurchase potential SoundSquatted domains and forward to legitimate domain.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-643 (Identify Shared Files/Directories on System)",
      "ddmyn_mitigation_detection": "Purchase potential SoundSquatted domains and forward to legitimate domain.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1554 (Compromise Host Software Binary)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1554 (Compromise Host Software Binary)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-652 (Use of Known Kerberos Credentials) by using the strategy below?\nConfiguration: front-end HTTP agents notice ambiguous requests.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-652 (Use of Known Kerberos Credentials)",
      "ddmyn_mitigation_detection": "Configuration: front-end HTTP agents notice ambiguous requests.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1213.002 (Sharepoint) by using the strategy below?\nComparing client-server request and response payloads to a baseline profile to identify outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1213.002 (Sharepoint)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Application Layer Protocol (T1071)?\nUse intrusion detection signatures to block traffic at network boundaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Layer Protocol (T1071)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Using Unicode Encoding to Bypass Validation Logic (CAPEC-71)?\nAssume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Unicode Encoding to Bypass Validation Logic (CAPEC-71)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Use of Persistent Cookies Containing Sensitive Information (CWE-539)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Use of Persistent Cookies Containing Sensitive Information (CWE-539)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Host Application Interface Scanner Fuzz Tester Framework-based Fuzzer Forced Path Execution Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Use of Incorrectly-Resolved Name or Reference (CWE-706)?\nWhile this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers of arguments, such as format strings in C. It also can occur in loosely typed languages or environments. This might require an understanding of intended program behavior or design to determine whether the value is incorrect.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Use of Incorrectly-Resolved Name or Reference (CWE-706)",
      "ddmyn_mitigation_detection": "While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers of arguments, such as format strings in C. It also can occur in loosely typed languages or environments. This might require an understanding of intended program behavior or design to determine whether the value is incorrect.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exfiltration over USB (T1052.001)?\nHardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration over USB (T1052.001)",
      "ddmyn_mitigation_detection": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Insufficient Precision or Accuracy of a Real Number (CWE-1339)?\nThe developer or maintainer can move to a more accurate representation of real numbers. In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Insufficient Precision or Accuracy of a Real Number (CWE-1339)",
      "ddmyn_mitigation_detection": "The developer or maintainer can move to a more accurate representation of real numbers. In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Group Policy Discovery (T1615)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Group Policy Discovery (T1615)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compromise Host Software Binary (T1554)?\nAnalyzing a call stack for return addresses which point to unexpected memory locations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Host Software Binary (T1554)",
      "ddmyn_mitigation_detection": "Analyzing a call stack for return addresses which point to unexpected memory locations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Free of Memory not on the Heap (CWE-590)?\nForce the administrator to change the credential upon installation.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Free of Memory not on the Heap (CWE-590)",
      "ddmyn_mitigation_detection": "Force the administrator to change the credential upon installation.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Sudo and Sudo Caching (T1548.003)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Default Accounts (T1078.001)?\nConsider verifying the checksum of the operating system file and verifying the image of the operating system in memory. Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as Modify System Image.(Citations: Cisco IOS Software Integrity Assurance - Image File Verification, Cisco IOS Software Integrity Assurance - Run-Time Memory Verification)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Default Accounts (T1078.001)",
      "ddmyn_mitigation_detection": "Consider verifying the checksum of the operating system file and verifying the image of the operating system in memory. Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as Modify System Image.(Citations: Cisco IOS Software Integrity Assurance - Image File Verification, Cisco IOS Software Integrity Assurance - Run-Time Memory Verification)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Observable Internal Behavioral Discrepancy (CWE-206)?\nUnderstand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Internal Behavioral Discrepancy (CWE-206)",
      "ddmyn_mitigation_detection": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Botnet (T1583.005)?\nConsider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Botnet (T1583.005)",
      "ddmyn_mitigation_detection": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Install Malicious Extension (CAPEC-698)?\nFor competing actions, use well-known libraries which implement synchronization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Install Malicious Extension (CAPEC-698)",
      "ddmyn_mitigation_detection": "For competing actions, use well-known libraries which implement synchronization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Portable Executable Injection (T1055.002)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Portable Executable Injection (T1055.002)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Lateral Tool Transfer (T1570)?\nRequiring proof of two or more pieces of evidence in order to authenticate a user.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Memory Allocation with Excessive Size Value (CWE-789) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Memory Allocation with Excessive Size Value (CWE-789)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Defense Evasion (T1211)?\nRandomizing the base (start) address of one or more segments of memory during the initialization of a process.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Domains (T1583.001)?\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.(Citations: University of Birmingham C2)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Domains (T1583.001)",
      "ddmyn_mitigation_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.(Citations: University of Birmingham C2)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Load Value Injection (CAPEC-696) by using the strategy below?\nImplementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Load Value Injection (CAPEC-696)",
      "ddmyn_mitigation_detection": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect NoSQL Injection (CAPEC-676)?\nToo many exceptions generated by the application as a result of malformed XPath queries\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "NoSQL Injection (CAPEC-676)",
      "ddmyn_mitigation_detection": "Too many exceptions generated by the application as a result of malformed XPath queries",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect T1137.006 (Add-ins)?\nAnalyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1137.006 (Add-ins)",
      "ddmyn_mitigation_detection": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.(Citations: Cisco Blog Legacy Device Attacks, University of Birmingham C2)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Privilege Escalation (T1068) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Email Forwarding Rule (T1114.003)?\nApplication Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmyn_mitigation_detection": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Internal Proxy (T1090.001)?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Client Execution (T1203) by using the strategy below?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nIdentify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmyn_mitigation_detection": "Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection'))?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection'))",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Neutralization of Quoting Syntax (CWE-149)?\nDevelopers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Quoting Syntax (CWE-149)",
      "ddmyn_mitigation_detection": "Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nCredential Eviction techniques disable or remove compromised credentials from a computer network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Credential Eviction techniques disable or remove compromised credentials from a computer network.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Data Transfer Size Limits (T1030) by using the strategy below?\nEmploying a pattern matching rule language to analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data Transfer Size Limits (T1030)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploiting Incorrectly Configured SSL/TLS (CAPEC-217) by using the strategy below?\nConfigure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploiting Incorrectly Configured SSL/TLS (CAPEC-217)",
      "ddmyn_mitigation_detection": "Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007) by using the strategy below?\nEvery identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007)",
      "ddmyn_mitigation_detection": "Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Thread Execution Hijacking (T1055.003)?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Thread Execution Hijacking (T1055.003)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1547.008 (LSASS Driver)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1547.008 (LSASS Driver)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Modify Registry (T1112) by using the strategy below?\nRestricting system configuration modifications to a specific user or group of users.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Modify Registry (T1112)",
      "ddmyn_mitigation_detection": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1546.010 (AppInit DLLs)?\nInitiating a host's shutdown sequence to terminate all running processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.010 (AppInit DLLs)",
      "ddmyn_mitigation_detection": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Service Execution (T1569.002)?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Service Execution (T1569.002)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Neutralization of Multiple Leading Special Elements (CWE-161) by using the strategy below?\nDevelopers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Multiple Leading Special Elements (CWE-161)",
      "ddmyn_mitigation_detection": "Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Network Device CLI (T1059.008)?\nConsider reviewing command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration. Consider comparing a copy of the network device configuration against a known-good version to discover unauthorized changes to the command interpreter. The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor.(Citations: Cisco IOS Software Integrity Assurance - Command History)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Network Device CLI (T1059.008)",
      "ddmyn_mitigation_detection": "Consider reviewing command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration. Consider comparing a copy of the network device configuration against a known-good version to discover unauthorized changes to the command interpreter. The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor.(Citations: Cisco IOS Software Integrity Assurance - Command History)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Object Injection (CAPEC-586)?\nFrequently change the SSID to new and unrelated values\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Object Injection (CAPEC-586)",
      "ddmyn_mitigation_detection": "Frequently change the SSID to new and unrelated values",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Clear Linux or Mac System Logs (T1070.002) by using the strategy below?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Incorrect Default Permissions (CWE-276)?\nDo not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Default Permissions (CWE-276)",
      "ddmyn_mitigation_detection": "Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Multi-hop Proxy (T1090.003)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Infected Software (CAPEC-442)?\nImplementation: Restrict the permission to modify the entries in the configuration file.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Infected Software (CAPEC-442)",
      "ddmyn_mitigation_detection": "Implementation: Restrict the permission to modify the entries in the configuration file.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Neutralization of Special Elements in Data Query Logic (CWE-943) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Neutralization of Special Elements in Data Query Logic (CWE-943)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1562.009 (Safe Mode Boot)?\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1562.009 (Safe Mode Boot)",
      "ddmyn_mitigation_detection": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate LSASS Driver (T1547.008) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Inclusion of Sensitive Information in Source Code (CWE-540)?\nBe sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inclusion of Sensitive Information in Source Code (CWE-540)",
      "ddmyn_mitigation_detection": "Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Kerberoasting (T1558.003)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Kerberoasting (T1558.003)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1205 (Traffic Signaling)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1205 (Traffic Signaling)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reusing a Nonce, Key Pair in Encryption (CWE-323)?\nRefuse to reuse nonce values.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reusing a Nonce, Key Pair in Encryption (CWE-323)",
      "ddmyn_mitigation_detection": "Refuse to reuse nonce values.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect HTTP Response Smuggling (CAPEC-273)?\nCredential prompts that appear illegitimate or unexpected.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "HTTP Response Smuggling (CAPEC-273)",
      "ddmyn_mitigation_detection": "Credential prompts that appear illegitimate or unexpected.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-499 (Android Intent Intercept)?\nTo mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-499 (Android Intent Intercept)",
      "ddmyn_mitigation_detection": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate DNS Cache Poisoning (CAPEC-142)?\nRequire elevated privileges for distribution of software and software updates.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "DNS Cache Poisoning (CAPEC-142)",
      "ddmyn_mitigation_detection": "Require elevated privileges for distribution of software and software updates.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Web Service (T1102)?\nRestrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Race Condition within a Thread (CWE-366)?\nEnsure that protocols have specific limits of scale placed on them.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Race Condition within a Thread (CWE-366)",
      "ddmyn_mitigation_detection": "Ensure that protocols have specific limits of scale placed on them.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Public cloneable() Method Without Final ('Object Hijack') (CWE-491) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Public cloneable() Method Without Final ('Object Hijack') (CWE-491)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Deobfuscate/Decode Files or Information (T1140)?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Lateral Tool Transfer (T1570)?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Disable or Modify System Firewall (T1562.004) by using the strategy below?\nRestoring an software configuration.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Disable or Modify System Firewall (T1562.004)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Keychain (T1555.001)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Keychain (T1555.001)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect SIP and Trust Provider Hijacking (T1553.003)?\nPeriodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.  Enable CryptoAPI v2 (CAPI) event logging  to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033).  Utilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing)  setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers:  * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust **Note:** As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using Regsvr32.  Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \u201cHide Microsoft Entries\u201d and \u201cHide Windows Entries\u201d are both deselected. (Citations: SpectorOps Subverting Trust Sept 2017, Entrust Enable CAPI2 Aug 2017, SpectorOps Subverting Trust Sept 2017, Microsoft Registry Auditing Aug 2016, Microsoft Audit Registry July 2012, SpectorOps Subverting Trust Sept 2017, SpectorOps Subverting Trust Sept 2017)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "SIP and Trust Provider Hijacking (T1553.003)",
      "ddmyn_mitigation_detection": "Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.  Enable CryptoAPI v2 (CAPI) event logging  to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033).  Utilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing)  setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers:  * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust **Note:** As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using Regsvr32.  Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \u201cHide Microsoft Entries\u201d and \u201cHide Windows Entries\u201d are both deselected. (Citations: SpectorOps Subverting Trust Sept 2017, Entrust Enable CAPI2 Aug 2017, SpectorOps Subverting Trust Sept 2017, Microsoft Registry Auditing Aug 2016, Microsoft Audit Registry July 2012, SpectorOps Subverting Trust Sept 2017, SpectorOps Subverting Trust Sept 2017)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Try All Common Switches (CAPEC-133)?\nImplementation: Remove all debug and testing options from production code.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Try All Common Switches (CAPEC-133)",
      "ddmyn_mitigation_detection": "Implementation: Remove all debug and testing options from production code.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Link Resolution Before File Access ('Link Following') (CWE-59)?\nFollow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Link Resolution Before File Access ('Link Following') (CWE-59)",
      "ddmyn_mitigation_detection": "Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Improper Neutralization of Data within XPath Expressions ('XPath Injection') (CWE-643)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection') (CWE-643)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1033 (System Owner/User Discovery) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1033 (System Owner/User Discovery)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Use of Single-factor Authentication (CWE-308)?\nUse multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Single-factor Authentication (CWE-308)",
      "ddmyn_mitigation_detection": "Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Permissive Cross-domain Policy with Untrusted Domains (CWE-942)?\nSetup default error messages so that unexpected errors do not disclose sensitive information.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive Cross-domain Policy with Untrusted Domains (CWE-942)",
      "ddmyn_mitigation_detection": "Setup default error messages so that unexpected errors do not disclose sensitive information.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1562.002 (Disable Windows Event Logging)?\nRestoring an software configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1562.002 (Disable Windows Event Logging)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Data Destruction (T1485)?\nUse process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as SDelete. Monitor for the creation of suspicious files as well as high unusual file modification activity. In particular, look for large quantities of file modifications in user directories and under <code>C:\\Windows\\System32\\</code>. In cloud environments, the occurrence of anomalous high-volume deletion events, such as the <code>DeleteDBCluster</code> and <code>DeleteGlobalCluster</code> events in AWS, or a high quantity of data deletion events, such as <code>DeleteBucket</code>, within a short period of time may indicate suspicious activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Data Destruction (T1485)",
      "ddmyn_mitigation_detection": "Use process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as SDelete. Monitor for the creation of suspicious files as well as high unusual file modification activity. In particular, look for large quantities of file modifications in user directories and under <code>C:\\Windows\\System32\\</code>. In cloud environments, the occurrence of anomalous high-volume deletion events, such as the <code>DeleteDBCluster</code> and <code>DeleteGlobalCluster</code> events in AWS, or a high quantity of data deletion events, such as <code>DeleteBucket</code>, within a short period of time may indicate suspicious activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Replication Through Removable Media (T1091)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Replication Through Removable Media (T1091)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-570 (Expression is Always False)?\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-570 (Expression is Always False)",
      "ddmyn_mitigation_detection": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Security Software Discovery (T1518.001) by using the strategy below?\nUsing kernel-level capabilities to isolate processes.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Space after Filename (T1036.006)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Space after Filename (T1036.006)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1547.010 (Port Monitors)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1547.010 (Port Monitors)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Logon Script (Windows) (T1037.001)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1021.004 (SSH) by using the strategy below?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1021.004 (SSH)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Replication Through Removable Media (T1091)?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Replication Through Removable Media (T1091)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') (CWE-757) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') (CWE-757)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Spoofing of UDDI/ebXML Messages (CAPEC-218)?\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spoofing of UDDI/ebXML Messages (CAPEC-218)",
      "ddmyn_mitigation_detection": "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Application Window Discovery (T1010)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Window Discovery (T1010)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rootkit (T1014)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate XSS Targeting HTML Attributes (CAPEC-243) by using the strategy below?\nDesign: Use libraries and templates that minimize unfiltered input.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "XSS Targeting HTML Attributes (CAPEC-243)",
      "ddmyn_mitigation_detection": "Design: Use libraries and templates that minimize unfiltered input.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1014 (Rootkit)?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1014 (Rootkit)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Modify Registry (T1112) by using the strategy below?\nEmulating instructions in a file looking for specific patterns.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Modify Registry (T1112)",
      "ddmyn_mitigation_detection": "Emulating instructions in a file looking for specific patterns.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Permissive List of Allowed Inputs (CWE-183) by using the strategy below?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive List of Allowed Inputs (CWE-183)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1218.003 (CMSTP) by using the strategy below?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1218.003 (CMSTP)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-656 (Voice Phishing)?\nDo not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-656 (Voice Phishing)",
      "ddmyn_mitigation_detection": "Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Race Condition within a Thread (CWE-366) by using the strategy below?\nUse locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Race Condition within a Thread (CWE-366)",
      "ddmyn_mitigation_detection": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Data Transfer Size Limits (T1030)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data Transfer Size Limits (T1030)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Internal Proxy (T1090.001)?\nAnalyzing failed connections in a network to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Process Discovery (T1057) by using the strategy below?\nControlling access to local computer system resources with kernel-level capabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Process Discovery (T1057)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-182 (Collapse of Data into Unsafe Value) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-182 (Collapse of Data into Unsafe Value)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Match Legitimate Name or Location (T1036.005) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Ownership Management (CWE-282)?\nFollow the principle of least privilege when assigning access rights to entities in a software system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Ownership Management (CWE-282)",
      "ddmyn_mitigation_detection": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Symmetric Cryptography (T1573.001) by using the strategy below?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1570 (Lateral Tool Transfer)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1570 (Lateral Tool Transfer)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Service Discovery (T1007)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Service Discovery (T1007)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Owner/User Discovery (T1033) by using the strategy below?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-hop Proxy (T1090.003) by using the strategy below?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1124 (System Time Discovery)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1124 (System Time Discovery)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Hiding Malicious Data or Code within Files (CAPEC-636)?\nHard Coded Alternate DNS server in applications\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Hiding Malicious Data or Code within Files (CAPEC-636)",
      "ddmyn_mitigation_detection": "Hard Coded Alternate DNS server in applications",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Rogue Domain Controller (T1207) by using the strategy below?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Executable Installer File Permissions Weakness (T1574.005)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Executable Installer File Permissions Weakness (T1574.005)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1564.008 (Email Hiding Rules)?\nModifying an application's configuration to reduce its attack surface.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1564.008 (Email Hiding Rules)",
      "ddmyn_mitigation_detection": "Modifying an application's configuration to reduce its attack surface.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1574.010 (Services File Permissions Weakness)?\nAnalyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1574.010 (Services File Permissions Weakness)",
      "ddmyn_mitigation_detection": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1596.001 (DNS/Passive DNS)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1596.001 (DNS/Passive DNS)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Port Monitors (T1547.010)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Monitors (T1547.010)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Protection of Physical Side Channels (CWE-1300) by using the strategy below?\nSecurity identifier decoders must be reviewed for design consistency and common weaknesses.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Protection of Physical Side Channels (CWE-1300)",
      "ddmyn_mitigation_detection": "Security identifier decoders must be reviewed for design consistency and common weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Location Discovery (T1614)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Location Discovery (T1614)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))?\nUtilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))",
      "ddmyn_mitigation_detection": "Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1558.001 (Golden Ticket)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1558.001 (Golden Ticket)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Exposed Dangerous Method or Function (CWE-749) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exposed Dangerous Method or Function (CWE-749)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Manual Source Code Review (not inspections) Cost effective for partial coverage: Focused Manual Spotcheck - Focused manual analysis of source",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Using Unicode Encoding to Bypass Validation Logic (CAPEC-71) by using the strategy below?\nIf possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Unicode Encoding to Bypass Validation Logic (CAPEC-71)",
      "ddmyn_mitigation_detection": "If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Security Software Discovery (T1518.001) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-916 (Use of Password Hash With Insufficient Computational Effort)?\nRemove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-916 (Use of Password Hash With Insufficient Computational Effort)",
      "ddmyn_mitigation_detection": "Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Elevated Execution with Prompt (T1548.004) by using the strategy below?\nUse secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Elevated Execution with Prompt (T1548.004)",
      "ddmyn_mitigation_detection": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-157 (Failure to Sanitize Paired Delimiters) by using the strategy below?\nFuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-157 (Failure to Sanitize Paired Delimiters)",
      "ddmyn_mitigation_detection": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate User-Controlled Filename (CAPEC-73)?\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "User-Controlled Filename (CAPEC-73)",
      "ddmyn_mitigation_detection": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Serialized Data with Nested Payloads (CAPEC-230)?\nIdentify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Serialized Data with Nested Payloads (CAPEC-230)",
      "ddmyn_mitigation_detection": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect System Network Configuration Discovery (T1016)?\nMonitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "System Network Configuration Discovery (T1016)",
      "ddmyn_mitigation_detection": "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-1223 (Race Condition for Write-Once Attributes)?\nIf they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1223 (Race Condition for Write-Once Attributes)",
      "ddmyn_mitigation_detection": "If they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Spearphishing via Service (T1566.003)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1055.009 (Proc Memory) by using the strategy below?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.009 (Proc Memory)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-1119 (Excessive Use of Unconditional Branching)?\nExploitation of a vulnerability with commonly-used manipulations might fail, but minor variations might succeed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-1119 (Excessive Use of Unconditional Branching)",
      "ddmyn_mitigation_detection": "Exploitation of a vulnerability with commonly-used manipulations might fail, but minor variations might succeed.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Compromise Host Software Binary (T1554)?\nEnforce binary and application integrity with digital signature verification to prevent untrusted code from executing.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Host Software Binary (T1554)",
      "ddmyn_mitigation_detection": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Use of Path Manipulation Function without Maximum-sized Buffer (CWE-785)?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. Use a list of approved URLs or domains to be used for redirection.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Path Manipulation Function without Maximum-sized Buffer (CWE-785)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. Use a list of approved URLs or domains to be used for redirection.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1584.002 (DNS Server)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1584.002 (DNS Server)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Run Software at Logon (CAPEC-564)?\nRestrict write access to logon scripts to necessary administrators.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Run Software at Logon (CAPEC-564)",
      "ddmyn_mitigation_detection": "Restrict write access to logon scripts to necessary administrators.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Collect Data from Clipboard (CAPEC-637)?\nLeverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Collect Data from Clipboard (CAPEC-637)",
      "ddmyn_mitigation_detection": "Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect T1564.003 (Hidden Window)?\nEvery Launch Agent and Launch Daemon must have a corresponding plist file on disk which can be monitored. Monitor for recently modified or created plist files with a significant change to the executable path executed with the command-line <code>launchctl</code> command. Plist files are located in the root, system, and users <code>/Library/LaunchAgents</code> or <code>/Library/LaunchDaemons</code> folders. Monitor command-line execution of the <code>launchctl</code> command immediately followed by abnormal network connections. Launch Agents or Launch Daemons with executable paths pointing to <code>/tmp</code> and <code>/Shared</code> folders locations are potentially suspicious. When removing Launch Agents or Launch Daemons ensure the services are unloaded prior to deleting plist files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1564.003 (Hidden Window)",
      "ddmyn_mitigation_detection": "Every Launch Agent and Launch Daemon must have a corresponding plist file on disk which can be monitored. Monitor for recently modified or created plist files with a significant change to the executable path executed with the command-line <code>launchctl</code> command. Plist files are located in the root, system, and users <code>/Library/LaunchAgents</code> or <code>/Library/LaunchDaemons</code> folders. Monitor command-line execution of the <code>launchctl</code> command immediately followed by abnormal network connections. Launch Agents or Launch Daemons with executable paths pointing to <code>/tmp</code> and <code>/Shared</code> folders locations are potentially suspicious. When removing Launch Agents or Launch Daemons ensure the services are unloaded prior to deleting plist files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect SAML Tokens (T1606.002) by using the strategy below?\nInternet scanners may be used to look for patterns associated with malicious content designed to collect host hardware information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "SAML Tokens (T1606.002)",
      "ddmyn_mitigation_detection": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host hardware information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Bash History (T1552.003) by using the strategy below?\nThe file removal technique deletes malicious artifacts or programs from a computer system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Local Data Staging (T1074.001)?\nAnalyzing the properties of file create system call invocations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Data Staging (T1074.001)",
      "ddmyn_mitigation_detection": "Analyzing the properties of file create system call invocations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Missing Protection Mechanism for Alternate Hardware Interface (CWE-1299)?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Protection Mechanism for Alternate Hardware Interface (CWE-1299)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Bash History (T1552.003) by using the strategy below?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Using Referer Field for Authentication (CWE-293)?\nIn order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Referer Field for Authentication (CWE-293)",
      "ddmyn_mitigation_detection": "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Audio Capture (T1123) by using the strategy below?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Audio Capture (T1123)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-442 (Infected Software)?\nAn organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-442 (Infected Software)",
      "ddmyn_mitigation_detection": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Insufficient Session Expiration (CWE-613)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insufficient Session Expiration (CWE-613)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Transmitted Data Manipulation (T1565.002)?\nAnalyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmyn_mitigation_detection": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Transmitted Data Manipulation (T1565.002) by using the strategy below?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Session Credential Falsification through Forging (CAPEC-196)?\nImplementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Session Credential Falsification through Forging (CAPEC-196)",
      "ddmyn_mitigation_detection": "Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)?\nRun or compile the product with settings that generate warnings about uninitialized variables or data.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel (CWE-924)",
      "ddmyn_mitigation_detection": "Run or compile the product with settings that generate warnings about uninitialized variables or data.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Filter Failure through Buffer Overflow (CAPEC-24) by using the strategy below?\nPre-design: Use a language or compiler that performs automatic bounds checking.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Filter Failure through Buffer Overflow (CAPEC-24)",
      "ddmyn_mitigation_detection": "Pre-design: Use a language or compiler that performs automatic bounds checking.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Incorrect Regular Expression (CWE-185) by using the strategy below?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Regular Expression (CWE-185)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Client Execution (T1203)?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Information Discovery (T1082)?\nBlocking the execution of files on a host in accordance with defined application policy rules.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Information Discovery (T1082)",
      "ddmyn_mitigation_detection": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nRun time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "ddmyn_mitigation_detection": "Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1074.001 (Local Data Staging) by using the strategy below?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1074.001 (Local Data Staging)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Use of Persistent Cookies Containing Sensitive Information (CWE-539) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Use of Persistent Cookies Containing Sensitive Information (CWE-539)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Upload Tool (T1608.002) by using the strategy below?\nEnforce binary and application integrity with digital signature verification to prevent untrusted code from executing.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Upload Tool (T1608.002)",
      "ddmyn_mitigation_detection": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compiler Removal of Code to Clear Buffers (CWE-14)?\nFor each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compiler Removal of Code to Clear Buffers (CWE-14)",
      "ddmyn_mitigation_detection": "For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Proc Memory (T1055.009)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Proc Memory (T1055.009)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001) by using the strategy below?\nMonitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Commonly abused command arguments include <code>chmod +x</code>, <code>chmod -R 755</code>, and <code>chmod 777</code>. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.(Citations: 20 macOS Common Tools and Techniques)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Commonly abused command arguments include <code>chmod +x</code>, <code>chmod -R 755</code>, and <code>chmod 777</code>. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.(Citations: 20 macOS Common Tools and Techniques)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Domain Accounts (T1078.002)?\nThe process of temporarily disabling user accounts on a system or domain.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compromise Hardware Supply Chain (T1195.003)?\nAnalyzing changes in service binary files by comparing to a source of truth.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Hardware Supply Chain (T1195.003)",
      "ddmyn_mitigation_detection": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Collapse of Data into Unsafe Value (CWE-182)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Collapse of Data into Unsafe Value (CWE-182)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Hiding Malicious Data or Code within Files (CAPEC-636)?\nMany tools are available to search for the hidden data. Scan regularly for such data using one of these tools.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Hiding Malicious Data or Code within Files (CAPEC-636)",
      "ddmyn_mitigation_detection": "Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate File and Directory Discovery (T1083)?\nRequiring proof of two or more pieces of evidence in order to authenticate a user.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Discovery (T1083)",
      "ddmyn_mitigation_detection": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Exposure of Information Through Directory Listing (CWE-548)?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exposure of Information Through Directory Listing (CWE-548)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Handling of Insufficient Privileges (CWE-274)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Handling of Insufficient Privileges (CWE-274)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-1221 (Incorrect Register Defaults or Module Parameters)?\nMost SSL_CTX functions have SSL counterparts that act on SSL-type objects.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1221 (Incorrect Register Defaults or Module Parameters)",
      "ddmyn_mitigation_detection": "Most SSL_CTX functions have SSL counterparts that act on SSL-type objects.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate File and Directory Permissions Modification (T1222)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Permissions Modification (T1222)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Insufficiently Protected Credentials (CWE-522) by using the strategy below?\nDo not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Insufficiently Protected Credentials (CWE-522)",
      "ddmyn_mitigation_detection": "Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Neutralization of Multiple Leading Special Elements (CWE-161)?\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Multiple Leading Special Elements (CWE-161)",
      "ddmyn_mitigation_detection": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Service Execution (T1569.002)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Service Execution (T1569.002)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploits (T1587.004)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploits (T1587.004)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate SIP and Trust Provider Hijacking (T1553.003)?\nEmploying a pattern matching rule language to analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SIP and Trust Provider Hijacking (T1553.003)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Email Hiding Rules (T1564.008)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Hiding Rules (T1564.008)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Mavinject (T1218.013)?\nMonitor the execution and arguments of mavinject.exe. Compare recent invocations of mavinject.exe with prior history of known good arguments and injected DLLs to determine anomalous and potentially adversarial activity. Adversaries may rename abusable binaries to evade detections, but the argument <code>INJECTRUNNING</code> is required for mavinject.exe to perform Dynamic-link Library Injection and may therefore be monitored to alert malicious activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Mavinject (T1218.013)",
      "ddmyn_mitigation_detection": "Monitor the execution and arguments of mavinject.exe. Compare recent invocations of mavinject.exe with prior history of known good arguments and injected DLLs to determine anomalous and potentially adversarial activity. Adversaries may rename abusable binaries to evade detections, but the argument <code>INJECTRUNNING</code> is required for mavinject.exe to perform Dynamic-link Library Injection and may therefore be monitored to alert malicious activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1563.002 (RDP Hijacking) by using the strategy below?\nNetwork intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link. Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once User Execution occurs.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1563.002 (RDP Hijacking)",
      "ddmyn_mitigation_detection": "Network intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link. Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once User Execution occurs.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Process Control (CWE-114)?\nThe Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Process Control (CWE-114)",
      "ddmyn_mitigation_detection": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LNK Icon Smuggling (T1027.012)?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LNK Icon Smuggling (T1027.012)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Generation of Error Message Containing Sensitive Information (CWE-209)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Generation of Error Message Containing Sensitive Information (CWE-209)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate AppInit DLLs (T1546.010)?\nAnalyzing system calls to determine whether a process is exhibiting unauthorized behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-157 (Sniffing Attacks)?\nAdditionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-157 (Sniffing Attacks)",
      "ddmyn_mitigation_detection": "Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1564.008 (Email Hiding Rules)?\nRestoring an software configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1564.008 (Email Hiding Rules)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1615 (Group Policy Discovery)?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor for suspicious use of <code>gpresult</code>. Monitor for the use of PowerShell functions such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code> and processes spawning with command-line arguments containing <code>GPOLocalGroup</code>. Monitor for abnormal LDAP queries with filters for <code>groupPolicyContainer</code> and high volumes of LDAP traffic to domain controllers. Windows Event ID 4661 can also be used to detect when a directory service has been accessed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1615 (Group Policy Discovery)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor for suspicious use of <code>gpresult</code>. Monitor for the use of PowerShell functions such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code> and processes spawning with command-line arguments containing <code>GPOLocalGroup</code>. Monitor for abnormal LDAP queries with filters for <code>groupPolicyContainer</code> and high volumes of LDAP traffic to domain controllers. Windows Event ID 4661 can also be used to detect when a directory service has been accessed.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Port Knocking (T1205.001) by using the strategy below?\nData inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Knocking (T1205.001)",
      "ddmyn_mitigation_detection": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Rogue Domain Controller (T1207) by using the strategy below?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Reflection Amplification (T1498.002) by using the strategy below?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Revert Cloud Instance (T1578.004) by using the strategy below?\nIdentify network traffic sent or received by untrusted hosts or networks. Configure signatures to identify strings that may be found in a network device configuration.(Citations: US-CERT TA18-068A 2018)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Revert Cloud Instance (T1578.004)",
      "ddmyn_mitigation_detection": "Identify network traffic sent or received by untrusted hosts or networks. Configure signatures to identify strings that may be found in a network device configuration.(Citations: US-CERT TA18-068A 2018)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)?\nThis weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)",
      "ddmyn_mitigation_detection": "This weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Domain Fronting (T1090.004)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Fronting (T1090.004)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Restriction of Software Interfaces to Hardware Features (CWE-1256)?\nPerform a security evaluation of system-level architecture and design with software-aided physical attacks in scope.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Restriction of Software Interfaces to Hardware Features (CWE-1256)",
      "ddmyn_mitigation_detection": "Perform a security evaluation of system-level architecture and design with software-aided physical attacks in scope.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443) by using the strategy below?\nAn organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)",
      "ddmyn_mitigation_detection": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Escaping Virtualization (CAPEC-480)?\nEnsure virtualization software is current and up-to-date.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Escaping Virtualization (CAPEC-480)",
      "ddmyn_mitigation_detection": "Ensure virtualization software is current and up-to-date.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Missing Lock Check (CWE-414)?\nImplement a reliable lock mechanism.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Lock Check (CWE-414)",
      "ddmyn_mitigation_detection": "Implement a reliable lock mechanism.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Null Termination (CWE-170)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Null Termination (CWE-170)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Transmitted Data Manipulation (T1565.002)?\nSet and enforce secure password policies for accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Credentials in Registry (T1552.002) by using the strategy below?\nThe detection of an internal host relaying traffic between the internal network and the external network.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credentials in Registry (T1552.002)",
      "ddmyn_mitigation_detection": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Dynamic Resolution (T1568) by using the strategy below?\nThe detection of an internal host relaying traffic between the internal network and the external network.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Stored Data Manipulation (T1565.001)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-586 (Object Injection)?\nImplementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-586 (Object Injection)",
      "ddmyn_mitigation_detection": "Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Use an allowlist of acceptable classes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1014 (Rootkit)?\nThe file removal technique deletes malicious artifacts or programs from a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1014 (Rootkit)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-73 (User-Controlled Filename)?\nImplementation: Disable scripting languages such as JavaScript in browser\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-73 (User-Controlled Filename)",
      "ddmyn_mitigation_detection": "Implementation: Disable scripting languages such as JavaScript in browser",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-Stage Channels (T1104) by using the strategy below?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate TCP Null Scan (CAPEC-304) by using the strategy below?\nMaintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "TCP Null Scan (CAPEC-304)",
      "ddmyn_mitigation_detection": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Code Repositories (T1213.003) by using the strategy below?\nData inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Code Repositories (T1213.003)",
      "ddmyn_mitigation_detection": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Insecure Security Identifier Mechanism (CWE-1294)?\nSecurity Identifier Decoders must be reviewed for design inconsistency and common weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Insecure Security Identifier Mechanism (CWE-1294)",
      "ddmyn_mitigation_detection": "Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Default Accounts (T1078.001)?\nSet and enforce secure password policies for accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Default Accounts (T1078.001)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Boot or Logon Initialization Scripts (T1037)?\nRestrict the ability to modify certain hives or keys in the Windows Registry.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Boot or Logon Initialization Scripts (T1037)",
      "ddmyn_mitigation_detection": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate SQL Stored Procedures (T1505.001)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SQL Stored Procedures (T1505.001)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Archive via Utility (T1560.001)?\nEncrypting a file using a cryptographic key.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Archive via Utility (T1560.001)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Expanding Control over the Operating System from the Database (CAPEC-470) by using the strategy below?\nForceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Expanding Control over the Operating System from the Database (CAPEC-470)",
      "ddmyn_mitigation_detection": "Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Buffer Access with Incorrect Length Value (CWE-805) by using the strategy below?\nManual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Buffer Access with Incorrect Length Value (CWE-805)",
      "ddmyn_mitigation_detection": "Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code (CWE-781) by using the strategy below?\nIf the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code (CWE-781)",
      "ddmyn_mitigation_detection": "If the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Rogue Domain Controller (T1207)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Use of Default Credentials (CWE-1392)?\nIt can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Default Credentials (CWE-1392)",
      "ddmyn_mitigation_detection": "It can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Exfiltration over USB (T1052.001) by using the strategy below?\nMonitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Exfiltration over USB (T1052.001)",
      "ddmyn_mitigation_detection": "Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Network Boundary Bridging (T1599)?\nUse capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Network Boundary Bridging (T1599)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1037.001 (Logon Script (Windows))?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Scheduled Task (T1053.005) by using the strategy below?\nControlling access to local computer system resources with kernel-level capabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-304 (TCP Null Scan) by using the strategy below?\nEmploy a robust network defensive posture that includes a managed IDS/IPS.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-304 (TCP Null Scan)",
      "ddmyn_mitigation_detection": "Employ a robust network defensive posture that includes a managed IDS/IPS.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Hardware Child Block Incorrectly Connected to Parent System (CWE-1276)?\nUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Hardware Child Block Incorrectly Connected to Parent System (CWE-1276)",
      "ddmyn_mitigation_detection": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1037.005 (Startup Items)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1037.005 (Startup Items)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate SOAP Array Blowup (CAPEC-493) by using the strategy below?\nEnforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SOAP Array Blowup (CAPEC-493)",
      "ddmyn_mitigation_detection": "Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-263 (Password Aging with Long Expiration)?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-263 (Password Aging with Long Expiration)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Additional Cloud Roles (T1098.003)?\nCollect activity logs from IAM services and cloud administrator accounts to identify unusual activity in the assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Additional Cloud Roles (T1098.003)",
      "ddmyn_mitigation_detection": "Collect activity logs from IAM services and cloud administrator accounts to identify unusual activity in the assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Restriction of Names for Files and Other Resources (CWE-641)?\nPerform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Restriction of Names for Files and Other Resources (CWE-641)",
      "ddmyn_mitigation_detection": "Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Using Malicious Files (CAPEC-17)?\nRemove potentially sensitive information that is not necessary for the application's functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Malicious Files (CAPEC-17)",
      "ddmyn_mitigation_detection": "Remove potentially sensitive information that is not necessary for the application's functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  }
]